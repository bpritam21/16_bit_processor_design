library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity processor_ent is
	Port (	trap, rst7_5, rst6_5, rst5_5, reset_in, clock, sid, interr, lock_out_ack, lock_in: in std_logic;
				
				ext_data: inout std_logic_vector(15 downto 0);
				
				lockout, lockinack, intra, sod, read_out, io_m_out, ale, writeout: out std_logic;
				ext_add: out std_logic_vector(15 downto 0)
			);
end processor_ent;

architecture Behavioral of processor_ent is

	signal interr_mask_reg_data, interr_read_reg_data: std_logic_vector(7 downto 0);
	signal step, step_count: std_logic_vector(2 downto 0):="000";
	signal sync_flag, write_out, ale_flag, sync: std_logic:='1';
	signal trap_ack, rst7_5_ack, rst6_5_ack, rst5_5_ack, lockoutack, lockin, tr_ap, rst75, rst65, rst55, interr_req, lock_out, lock_in_ack, interr_ack, interr_mask_reg_sel, interr_read_reg_sel, clr_inter, pc_wr,phold, data_opc, pcup, cnt, io_m_in, out_proc_end, carry_out, alu_en, out_blk_en, reg_read, reg_write, reg_proc_end, alu_proc_end, pre_end:std_logic:='0';
	type RAMtype is array (0 to 11) of std_logic_vector (15 downto 0);
	signal data_array: RAMtype := (others=>X"0000");
	signal pre_data, data_a, data_b, reg_write_data, reg_read_data: std_logic_vector (15 downto 0):=X"0000";
	signal reg_sel: std_logic_vector(3 downto 0);
	signal alu_result: std_logic_vector(21 downto 0):="0000000000000000000000";
	signal alu_instr_sel: std_logic_vector(4 downto 0):="00000";
	signal out_add: std_logic_vector(31 downto 0):=X"00000000";
signal out_blk_data:std_logic_vector(15 downto 0):=X"0000";
	signal count, xyz,zyx,add_over: std_logic_vector(1 downto 0):="00";
begin
interrupt:process(reset_in, clock, trap, rst7_5, rst6_5, rst5_5, interr, lock_in, lockoutack)
	variable intr_reg: std_logic_vector(9 downto 0);
begin


if(reset_in='0') then
	intr_reg:="0000000000";
	interr_read_reg_data<=X"00";
	tr_ap<='0';
	rst75<='0';
	rst65<='0';
	rst55<='0';
	interr_req<='0';
	lockoutack<='0';
	lockin<='0';
	lockout<='0';
	lockinack<='1';
	intra<='1';
	sod<='0';

else

if(rst7_5='1') then
	intr_reg(6):='1';
else
	NULL;
end if;

if(rst6_5='1') then
	intr_reg(5):='1';
else
	NULL;
end if;

if(rst5_5='1') then
	intr_reg(4):='1';
else
	NULL;
end if;

if(trap='1') then
	intr_reg(8):='1';
else
	NULL;
end if;
if(interr='1') then
	intr_reg(9):='1';
else
	NULL;
end if;
intr_reg(7):=sid;
if (clock='0' and clock'event) then
	if(rst7_5_ack='1') then		--RST 7.5 ACK.
		intr_reg(6):='0';
	else
	NULL;
	end if;
	if(rst6_5_ack='1') then		--RST 6.5 ACK.
		intr_reg(5):='0';
	else
		NULL;
	end if;

	if(rst5_5_ack='1') then		--RST 5.5 ACK.
		intr_reg(4):='0';
	else
		NULL;
	end if;
	
	if(trap_ack='1') then		--TRAP ACK.
		intr_reg(8):='0';
	else
		NULL;
	end if;
	
	if(intr_reg(8)='1') then	--TRAP
		tr_ap<='1';
	else
		tr_ap<='0';
	end if;
	
	if(clr_inter='1') then			--Clear all Interr.
		intr_reg(6 downto 4):="000";
	else
		NULL;
	end if;

	if(intr_reg(6)='1' and not(intr_reg(2) and intr_reg(3))='1') then		--RST 7.5
		rst75<='1';
	else
		rst75<='0';
	end if;
	
	if(intr_reg(5)='1' and not(intr_reg(1) and intr_reg(3))='1') then		--RST 6.5
		rst65<='1';
	else
		rst65<='0';
	end if;
	
	if(intr_reg(4)='1' and not(intr_reg(0) and intr_reg(3))='1') then		--RST 5.5
		rst55<='1';
	else
		rst55<='0';
	end if;
	
	if (interr_mask_reg_sel='1') then					--Interr. mask reg. update
		intr_reg(3 downto 0):=interr_mask_reg_data(3 downto 0);
		if(interr_mask_reg_data(6)='1') then
			sod<=interr_mask_reg_data(7);
		else
			sod<='0';
		end if;
	else
		sod<='0';
	end if;
	if (interr_read_reg_sel='1') then					--Interr. read reg. update
		interr_read_reg_data(2 downto 0)<=intr_reg(2 downto 0);
		interr_read_reg_data(3)<='0';
		interr_read_reg_data(6 downto 4)<=intr_reg(6 downto 4);
		interr_read_reg_data(7)<=intr_reg(7);
	else
		NULL;
	end if;
	
	interr_req<=not intr_reg(9);	--INTR.
	
	if(interr_ack='1') then			--INTA.
		intra<='0';
		intr_reg(9):='0';
	else
		intra<='1';
	end if;
	
	if(lock_out='1') then		--LOCK OUT
		lockout<='1';
	else
		lockout<='0';
	end if;
	
	if(lock_out_ack='0') then		--LOCK OUT ACK.
		lockoutack<='1';
	else
		lockoutack<='0';
	end if;
	
	if(lock_in='1') then		--LOCK IN
		lockin<='1';
	else
		lockin<='0';
	end if;
	
	if(lock_in_ack='1') then		--LOCK IN ACK.
		lockinack<='0';
	else
		lockinack<='1';
	end if;	
	
end if;
end if;
end process;
precoder:process (reset_in, clock)
	type RAMtype is array (0 to 3) of std_logic_vector (15 downto 0);

	variable data_array: RAMtype := (others=>X"0000");
	variable temp_data: std_logic_vector (15 downto 0) :=X"0000";
	variable master: std_logic_vector(1 downto 0) :="00";
	variable grp: std_logic_vector(7 downto 0) :=X"00";
	variable sec_reg: std_logic_vector (3 downto 0) :=X"0";
	variable int_out_add, pc: std_logic_vector (31 downto 0):=X"00000000";
	variable in_data_pointer: std_logic_vector (1 downto 0):="00";
	variable out_data_pointer: std_logic_vector (1 downto 0):="10";
	variable t16: std_logic:='0';
	variable read_flag: std_logic:='1';
	begin
	if(reset_in='0') then
	--checks if reset is on
			ext_data<="ZZZZZZZZZZZZZZZZ";
			pre_end<='0';
			read_flag:='1';
			ale_flag<='1';
			cnt<='0';
			ale<='1';
			t16:='0';
			master:="00";
			grp:=X"00";
			sec_reg:=X"0";
			int_out_add:=X"00000000";
			in_data_pointer:="00";
			out_data_pointer:="10";
			data_array(0):=X"0000";
			data_array(1):=X"0000";
			data_array(2):=X"0000";
			data_array(3):=X"0000";
			temp_data:=X"0000";
			io_m_out<='0';
			read_out<='0';
			pre_data<=X"0000";
			ext_add<=X"0000";
			pc:=X"00000000";
	
	else
	--resets the reset counter
		
		if (clock='1' and clock'event) then
			case add_over is
			--checks if address override is enabled or not
			
				when "00"=>
				--no updates
				
					NULL;
				when "01"=>
				--updates internal address counter only
				
					int_out_add:=out_add;
					out_data_pointer:=in_data_pointer-'1';
					ale_flag<='1';
					--reset the queue pointers
				
				when "10"=>
				--puts the value of pc in pre_data
					
					case cnt is
						when '0'=>
							pre_data<=pc(15 downto 0);
							cnt<='1';
						when '1'=>
							pre_data<=pc(31 downto 16);
							cnt<='0';
						when others=>
							NULL;
					end case;
				when "11"=>
				--copies pc value into internal address counter
					int_out_add:=pc;
					out_data_pointer:=in_data_pointer-'1';
					ale_flag<='1';
					--reset the queue pointers
							
				when others=>
					NULL;
			end case;
			
			if(pc_wr='1') then		--if pc value is to be updated
				pc:=out_add;
			else
				NULL;
			end if;
			
			if (pcup='1') then
			--if pc value is to be incermented
			
				pc:=pc+'1';
				
			else
				NULL;
			end if;	
			
			ale<=ale_flag;
			read_out<=read_flag;
			
			if(write_out='0') then
				ext_data<="ZZZZZZZZZZZZZZZZ";
				ext_add<="ZZZZZZZZZZZZZZZZ";
				io_m_out<='Z';
				ale<='Z';
			else
			if(((in_data_pointer(1) xor out_data_pointer(1)) or (in_data_pointer(0) xor out_data_pointer(0)))='1' and add_over="00" and ale_flag='0') then
			--checks if queue is full or not and write operation is not in progress
				
				io_m_out<=io_m_in;					
				--decides the io/m output signal
				
				ext_add<=int_out_add(15 downto 0);
				--puts the external address in the address bus
				ext_data<="ZZZZZZZZZZZZZZZZ";
				--test(31 downto 16)<=ext_data;
				read_flag:='0';
				--enables the read signal

			else 
			
				if(ale_flag='1') then
					ext_data<=int_out_add(31 downto 16);
					ext_add<=int_out_add(15 downto 0);
					ale_flag<='0';
				else
					NULL;
				end if;
					
				read_flag:='1';
				--disables the read signal
					
			end if;
			end if;
			--data is entered in the data queue
		
			if (phold='0') then
			--checks if P.ALLOW is valid
				
				out_data_pointer:=out_data_pointer+'1';
				
					--load temp_data reg with the data
				case out_data_pointer is
					when "00" =>
						temp_data:=data_array(0);
						
					when "01" =>
						temp_data:=data_array(1);
						
					when "10" =>
						temp_data:=data_array(2);
						
					when "11" =>
						temp_data:=data_array(3);
						
					when others=>
						NULL;
				end case;
					
					
				--start of precoding of the opcode
		
				case temp_data (15 downto 8) is
			
					when X"00" =>
						master:="00";
					case temp_data (7 downto 0) is
						when X"00" =>					--NOP
							grp:=X"00";
							sec_reg:=X"0";
								
						when X"01"=>					--MOV A
							grp:=X"01";
							sec_reg:=X"2";
						when X"02"=>
							grp:=X"01";
							sec_reg:=X"3";
						when X"03"=>
							grp:=X"01";
							sec_reg:=X"4";
						when X"04"=>
							grp:=X"01";
							sec_reg:=X"5";
						when X"05"=>
							grp:=X"01";
							sec_reg:=X"6";
						when X"06"=>
							grp:=X"01";
							sec_reg:=X"7";
						when X"07"=>
							grp:=X"01";
							sec_reg:=X"8";
						when X"08"=>
							grp:=X"01";
							sec_reg:=X"9";
						when X"09"=>
							grp:=X"01";
							sec_reg:=X"A";
						when X"0A"=>
							grp:=X"01";
							sec_reg:=X"B";
						when X"0B"=>
							grp:=X"01";
							sec_reg:=X"C";
						when X"0C"=>
							grp:=X"01";
							sec_reg:=X"D";
						
						when X"0D"=>					--MOV B
							grp:=X"02";
							sec_reg:=X"1";
						when X"0E"=>
							grp:=X"02";
							sec_reg:=X"3";
						when X"0F"=>
							grp:=X"02";
							sec_reg:=X"4";
						when X"10"=>
							grp:=X"02";
							sec_reg:=X"5";
						when X"11"=>
							grp:=X"02";
							sec_reg:=X"6";
						when X"12"=>
							grp:=X"02";
							sec_reg:=X"7";
						when X"13"=>
							grp:=X"02";
							sec_reg:=X"8";
						when X"14"=>
							grp:=X"02";
							sec_reg:=X"9";
						when X"15"=>
							grp:=X"02";
							sec_reg:=X"A";
						when X"16"=>
							grp:=X"02";
							sec_reg:=X"B";
						when X"17"=>
							grp:=X"02";
							sec_reg:=X"C";
						when X"18"=>
							grp:=X"02";
							sec_reg:=X"D";
							
						when X"19"=>					--MOV C
							grp:=X"03";
							sec_reg:=X"1";
						when X"1A"=>
							grp:=X"03";
							sec_reg:=X"2";
						when X"1B"=>
							grp:=X"03";
							sec_reg:=X"4";
						when X"1C"=>
							grp:=X"03";
							sec_reg:=X"5";
						when X"1D"=>
							grp:=X"03";
							sec_reg:=X"6";
						when X"1E"=>
							grp:=X"03";
							sec_reg:=X"7";
						when X"1F"=>
							grp:=X"03";
							sec_reg:=X"8";
						when X"20"=>
							grp:=X"03";
							sec_reg:=X"9";
						when X"21"=>
							grp:=X"03";
							sec_reg:=X"A";
						when X"22"=>
							grp:=X"03";
							sec_reg:=X"B";
						when X"23"=>
							grp:=X"03";
							sec_reg:=X"C";
						when X"24"=>
							grp:=X"03";
							sec_reg:=X"D";
							
						when X"25"=>					--MOV D
							grp:=X"04";
							sec_reg:=X"1";
						when X"26"=>
							grp:=X"04";
							sec_reg:=X"2";
						when X"27"=>
							grp:=X"04";
							sec_reg:=X"3";
						when X"28"=>
							grp:=X"04";
							sec_reg:=X"5";
						when X"29"=>
							grp:=X"04";
							sec_reg:=X"6";
						when X"2A"=>
							grp:=X"04";
							sec_reg:=X"7";
						when X"2B"=>
							grp:=X"04";
							sec_reg:=X"8";
						when X"2C"=>
							grp:=X"04";
							sec_reg:=X"9";
						when X"2D"=>
							grp:=X"04";
							sec_reg:=X"A";
						when X"2E"=>
							grp:=X"04";
							sec_reg:=X"B";
						when X"2F"=>
							grp:=X"04";
							sec_reg:=X"C";
						when X"30"=>
							grp:=X"04";
							sec_reg:=X"D";
							
						when X"31"=>					--MOV E
							grp:=X"05";
							sec_reg:=X"1";
						when X"32"=>
							grp:=X"05";
							sec_reg:=X"2";
						when X"33"=>
							grp:=X"05";
							sec_reg:=X"3";
						when X"34"=>
							grp:=X"05";
							sec_reg:=X"4";
						when X"35"=>
							grp:=X"05";
							sec_reg:=X"6";
						when X"36"=>
							grp:=X"05";
							sec_reg:=X"7";
						when X"37"=>
							grp:=X"05";
							sec_reg:=X"8";
						when X"38"=>
							grp:=X"05";
							sec_reg:=X"9";
						when X"39"=>
							grp:=X"05";
							sec_reg:=X"A";
						when X"3A"=>
							grp:=X"05";
							sec_reg:=X"B";
						when X"3B"=>
							grp:=X"05";
							sec_reg:=X"C";
						when X"3C"=>
							grp:=X"05";
							sec_reg:=X"D";
							
						when X"3D"=>					--MOV F
							grp:=X"06";
							sec_reg:=X"1";
						when X"3E"=>
							grp:=X"06";
							sec_reg:=X"2";
						when X"3F"=>
							grp:=X"06";
							sec_reg:=X"3";
						when X"40"=>
							grp:=X"06";
							sec_reg:=X"4";
						when X"41"=>
							grp:=X"06";
							sec_reg:=X"5";
						when X"42"=>
							grp:=X"06";
							sec_reg:=X"7";
						when X"43"=>
							grp:=X"06";
							sec_reg:=X"8";
						when X"44"=>
							grp:=X"06";
							sec_reg:=X"9";
						when X"45"=>
							grp:=X"06";
							sec_reg:=X"A";
						when X"46"=>
							grp:=X"06";
							sec_reg:=X"B";
						when X"47"=>
							grp:=X"06";
							sec_reg:=X"C";
						when X"48"=>
							grp:=X"06";
							sec_reg:=X"D";
							
						when X"49"=>					--MOV GH
							grp:=X"07";
							sec_reg:=X"1";
						when X"4A"=>
							grp:=X"07";
							sec_reg:=X"2";
						when X"4B"=>
							grp:=X"07";
							sec_reg:=X"3";
						when X"4C"=>
							grp:=X"07";
							sec_reg:=X"4";
						when X"4D"=>
							grp:=X"07";
							sec_reg:=X"5";
						when X"4E"=>
							grp:=X"07";
							sec_reg:=X"6";
						when X"4F"=>
							grp:=X"07";
							sec_reg:=X"7";
						when X"50"=>
							grp:=X"07";
							sec_reg:=X"9";
						when X"51"=>
							grp:=X"07";
							sec_reg:=X"A";
						when X"52"=>
							grp:=X"07";
							sec_reg:=X"B";
						when X"53"=>
							grp:=X"07";
							sec_reg:=X"C";
						when X"54"=>
							grp:=X"07";
							sec_reg:=X"D";
							
						when X"55"=>					--MOV GL
							grp:=X"08";
							sec_reg:=X"1";
						when X"56"=>
							grp:=X"08";
							sec_reg:=X"2";
						when X"57"=>
							grp:=X"08";
							sec_reg:=X"3";
						when X"58"=>
							grp:=X"08";
							sec_reg:=X"4";
						when X"59"=>
							grp:=X"08";
							sec_reg:=X"5";
						when X"5A"=>
							grp:=X"08";
							sec_reg:=X"6";
						when X"5B"=>
							grp:=X"08";
							sec_reg:=X"7";
						when X"5C"=>
							grp:=X"08";
							sec_reg:=X"8";
						when X"5D"=>
							grp:=X"08";
							sec_reg:=X"A";
						when X"5E"=>
							grp:=X"08";
							sec_reg:=X"B";
						when X"5F"=>
							grp:=X"08";
							sec_reg:=X"C";
						when X"60"=>
							grp:=X"08";
							sec_reg:=X"D";
							
						when X"61"=>					--MOV HH
							grp:=X"09";
							sec_reg:=X"1";
						when X"62"=>
							grp:=X"09";
							sec_reg:=X"2";
						when X"63"=>
							grp:=X"09";
							sec_reg:=X"3";
						when X"64"=>
							grp:=X"09";
							sec_reg:=X"4";
						when X"65"=>
							grp:=X"09";
							sec_reg:=X"5";
						when X"66"=>
							grp:=X"09";
							sec_reg:=X"6";
						when X"67"=>
							grp:=X"09";
							sec_reg:=X"7";
						when X"68"=>
							grp:=X"09";
							sec_reg:=X"8";
						when X"69"=>
							grp:=X"09";
							sec_reg:=X"9";
						when X"6A"=>
							grp:=X"09";
							sec_reg:=X"B";
						when X"6B"=>
							grp:=X"09";
							sec_reg:=X"C";
						when X"6C"=>
							grp:=X"09";
							sec_reg:=X"D";
							
						when X"6D"=>					--MOV HL
							grp:=X"0A";
							sec_reg:=X"1";
						when X"6E"=>
							grp:=X"0A";
							sec_reg:=X"2";
						when X"6F"=>
							grp:=X"0A";
							sec_reg:=X"3";
						when X"70"=>
							grp:=X"0A";
							sec_reg:=X"4";
						when X"71"=>
							grp:=X"0A";
							sec_reg:=X"5";
						when X"72"=>
							grp:=X"0A";
							sec_reg:=X"6";
						when X"73"=>
							grp:=X"0A";
							sec_reg:=X"7";
						when X"74"=>
							grp:=X"0A";
							sec_reg:=X"8";
						when X"75"=>
							grp:=X"0A";
							sec_reg:=X"9";
						when X"76"=>
							grp:=X"0A";
							sec_reg:=X"A";
						when X"77"=>
							grp:=X"0A";
							sec_reg:=X"C";
						when X"78"=>
							grp:=X"0A";
							sec_reg:=X"D";
							
						when X"79"=>					--MOV IH
							grp:=X"0B";
							sec_reg:=X"1";
						when X"7A"=>
							grp:=X"0B";
							sec_reg:=X"2";
						when X"7B"=>
							grp:=X"0B";
							sec_reg:=X"3";
						when X"7C"=>
							grp:=X"0B";
							sec_reg:=X"4";
						when X"7D"=>
							grp:=X"0B";
							sec_reg:=X"5";
						when X"7E"=>
							grp:=X"0B";
							sec_reg:=X"6";
						when X"7F"=>
							grp:=X"0B";
							sec_reg:=X"7";
						when X"80"=>
							grp:=X"0B";
							sec_reg:=X"8";
						when X"81"=>
							grp:=X"0B";
							sec_reg:=X"9";
						when X"82"=>
							grp:=X"0B";
							sec_reg:=X"A";
						when X"83"=>
							grp:=X"0B";
							sec_reg:=X"B";
						when X"84"=>
							grp:=X"0B";
							sec_reg:=X"D";
							
						when X"85"=>					--MOV IL
							grp:=X"0C";
							sec_reg:=X"1";
						when X"86"=>
							grp:=X"0C";
							sec_reg:=X"2";
						when X"87"=>
							grp:=X"0C";
							sec_reg:=X"3";
						when X"88"=>
							grp:=X"0C";
							sec_reg:=X"4";
						when X"89"=>
							grp:=X"0C";
							sec_reg:=X"5";
						when X"8A"=>
							grp:=X"0C";
							sec_reg:=X"6";
						when X"8B"=>
							grp:=X"0C";
							sec_reg:=X"7";
						when X"8C"=>
							grp:=X"0C";
							sec_reg:=X"8";
						when X"8D"=>
							grp:=X"0C";
							sec_reg:=X"9";
						when X"8E"=>
							grp:=X"0C";
							sec_reg:=X"A";
						when X"8F"=>
							grp:=X"0C";
							sec_reg:=X"B";
						when X"90"=>
							grp:=X"0C";
							sec_reg:=X"C";
							
						when X"91"=>					--MOV M
							grp:=X"0D";
							sec_reg:=X"1";
						when X"92"=>
							grp:=X"0D";
							sec_reg:=X"2";
						when X"93"=>
							grp:=X"0D";
							sec_reg:=X"3";
						when X"94"=>
							grp:=X"0D";
							sec_reg:=X"4";
						when X"95"=>
							grp:=X"0D";
							sec_reg:=X"5";
						when X"96"=>
							grp:=X"0D";
							sec_reg:=X"6";
						when X"97"=>
							grp:=X"0D";
							sec_reg:=X"8";
						when X"98"=>
							grp:=X"0D";
							sec_reg:=X"9";
						when X"99"=>
							grp:=X"0D";
							sec_reg:=X"A";
						when X"9A"=>
							grp:=X"0D";
							sec_reg:=X"B";
						when X"9B"=>
							grp:=X"0D";
							sec_reg:=X"C";
						when X"9C"=>
							grp:=X"0D";
							sec_reg:=X"D";
							
						when X"9D"=>				--MVI
							grp:=X"0E";
							sec_reg:=X"1";
						when X"9E"=>
							grp:=X"0E";
							sec_reg:=X"2";
						when X"9F"=>
							grp:=X"0E";
							sec_reg:=X"3";
						when X"A0"=>
							grp:=X"0E";
							sec_reg:=X"4";
						when X"A1"=>
							grp:=X"0E";
							sec_reg:=X"5";
						when X"A2"=>
							grp:=X"0E";
							sec_reg:=X"6";
						when X"A3"=>
							grp:=X"0E";
							sec_reg:=X"8";
						when X"A4"=>
							grp:=X"0E";
							sec_reg:=X"9";
						when X"A5"=>
							grp:=X"0E";
							sec_reg:=X"A";
						when X"A6"=>
							grp:=X"0E";
							sec_reg:=X"B";
						when X"A7"=>
							grp:=X"0E";
							sec_reg:=X"C";
						when X"A8"=>
							grp:=X"0E";
							sec_reg:=X"D";
						
						when X"A9"=>				--LDA
							grp:=X"0F";
							sec_reg:=X"1";
						
						when X"AA"=>				--LDAX
							grp:=X"10";
							sec_reg:=X"4";
						when X"AB"=>
							grp:=X"10";
							sec_reg:=X"6";
						when X"AC"=>
							grp:=X"10";
							sec_reg:=X"9";
						when X"AD"=>
							grp:=X"10";
							sec_reg:=X"B";
						
						when X"AE"=>				--LXI
							grp:=X"11";
							sec_reg:=X"4";
						when X"AF"=>
							grp:=X"11";
							sec_reg:=X"6";
						when X"B0"=>
							grp:=X"11";
							sec_reg:=X"9";
						when X"B1"=>
							grp:=X"11";
							sec_reg:=X"B";
						when X"B2"=>
							grp:=X"11";
							sec_reg:=X"D";
						when X"B3"=>
							grp:=X"11";
							sec_reg:=X"F";
						
						when X"B4"=>				--MOVS
							grp:=X"12";
							sec_reg:=X"D";
						
						when X"B5"=>				--POP
							grp:=X"13";
							sec_reg:=X"1";
						when X"B6"=>
							grp:=X"13";
							sec_reg:=X"2";
						when X"B7"=>
							grp:=X"13";
							sec_reg:=X"3";
						when X"B8"=>
							grp:=X"13";
							sec_reg:=X"4";
						when X"B9"=>
							grp:=X"13";
							sec_reg:=X"5";
						when X"BA"=>
							grp:=X"13";
							sec_reg:=X"6";
						when X"BB"=>
							grp:=X"13";
							sec_reg:=X"9";
						when X"BC"=>
							grp:=X"13";
							sec_reg:=X"B";
						when X"BD"=>
							grp:=X"13";
							sec_reg:=X"D";
						when X"BE"=>
							grp:=X"13";
							sec_reg:=X"E";
						
						when X"BF"=>				--PUSH
							grp:=X"14";
							sec_reg:=X"1";
						when X"C0"=>
							grp:=X"14";
							sec_reg:=X"2";
						when X"C1"=>
							grp:=X"14";
							sec_reg:=X"3";
						when X"C2"=>
							grp:=X"14";
							sec_reg:=X"4";
						when X"C3"=>
							grp:=X"14";
							sec_reg:=X"5";
						when X"C4"=>
							grp:=X"14";
							sec_reg:=X"6";
						when X"C5"=>
							grp:=X"14";
							sec_reg:=X"8";
						when X"C6"=>
							grp:=X"14";
							sec_reg:=X"A";
						when X"C7"=>
							grp:=X"14";
							sec_reg:=X"C";
						when X"C8"=>
							grp:=X"14";
							sec_reg:=X"E";
						
						when X"C9"=>				--PUSM
							grp:=X"15";
							sec_reg:=X"2";
						when X"CA"=>
							grp:=X"15";
							sec_reg:=X"4";
						when X"CB"=>
							grp:=X"15";
							sec_reg:=X"6";
						when X"CC"=>
							grp:=X"15";
							sec_reg:=X"9";
						when X"CD"=>
							grp:=X"15";
							sec_reg:=X"B";
						when X"CE"=>
							grp:=X"15";
							sec_reg:=X"D";
						
						when X"CF"=>				--POPM
							grp:=X"16";
							sec_reg:=X"2";
						when X"D0"=>
							grp:=X"16";
							sec_reg:=X"4";
						when X"D1"=>
							grp:=X"16";
							sec_reg:=X"6";
						when X"D2"=>
							grp:=X"16";
							sec_reg:=X"9";
						when X"D3"=>
							grp:=X"16";
							sec_reg:=X"B";
						when X"D4"=>
							grp:=X"16";
							sec_reg:=X"D";
						
						when X"D5"=>				--XCHG A
							grp:=X"17";
							sec_reg:=X"2";
						when X"D6"=>
							grp:=X"17";
							sec_reg:=X"3";
						when X"D7"=>
							grp:=X"17";
							sec_reg:=X"4";
						when X"D8"=>
							grp:=X"17";
							sec_reg:=X"5";
						when X"D9"=>
							grp:=X"17";
							sec_reg:=X"6";
						when X"DA"=>
							grp:=X"17";
							sec_reg:=X"8";
						when X"DB"=>
							grp:=X"17";
							sec_reg:=X"9";
						when X"DC"=>
							grp:=X"17";
							sec_reg:=X"A";
						when X"DD"=>
							grp:=X"17";
							sec_reg:=X"B";
						when X"DE"=>
							grp:=X"17";
							sec_reg:=X"C";
						when X"DF"=>
							grp:=X"17";
							sec_reg:=X"D";
						
						when X"E0"=>				--XCHG B
							grp:=X"18";
							sec_reg:=X"3";
						when X"E1"=>
							grp:=X"18";
							sec_reg:=X"4";
						when X"E2"=>
							grp:=X"18";
							sec_reg:=X"5";
						when X"E3"=>
							grp:=X"18";
							sec_reg:=X"6";
						when X"E4"=>
							grp:=X"18";
							sec_reg:=X"8";
						when X"E5"=>
							grp:=X"18";
							sec_reg:=X"9";
						when X"E6"=>
							grp:=X"18";
							sec_reg:=X"A";
						when X"E7"=>
							grp:=X"18";
							sec_reg:=X"B";
						when X"E8"=>
							grp:=X"18";
							sec_reg:=X"C";
						when X"E9"=>
							grp:=X"18";
							sec_reg:=X"D";
						
						when X"EA"=>				--XCHG C
							grp:=X"19";
							sec_reg:=X"4";
						when X"EB"=>
							grp:=X"19";
							sec_reg:=X"5";
						when X"EC"=>
							grp:=X"19";
							sec_reg:=X"6";
						when X"ED"=>
							grp:=X"19";
							sec_reg:=X"8";
						when X"EE"=>
							grp:=X"19";
							sec_reg:=X"9";
						when X"EF"=>
							grp:=X"19";
							sec_reg:=X"A";
						when X"F0"=>
							grp:=X"19";
							sec_reg:=X"B";
						when X"F1"=>
							grp:=X"19";
							sec_reg:=X"C";
						when X"F2"=>
							grp:=X"19";
							sec_reg:=X"D";
						
						when X"F3"=>					--XCHG D
							grp:=X"1A";
							sec_reg:=X"5";
						when X"F4"=>
							grp:=X"1A";
							sec_reg:=X"6";
						when X"F5"=>
							grp:=X"1A";
							sec_reg:=X"8";
						when X"F6"=>
							grp:=X"1A";
							sec_reg:=X"9";
						when X"F7"=>
							grp:=X"1A";
							sec_reg:=X"A";
						when X"F8"=>
							grp:=X"1A";
							sec_reg:=X"B";
						when X"F9"=>
							grp:=X"1A";
							sec_reg:=X"C";
						when X"FA"=>
							grp:=X"1A";
							sec_reg:=X"D";
						
						when X"FB"=>					--XCHG E
							grp:=X"1B";
							sec_reg:=X"6";
						when X"FC"=>
							grp:=X"1B";
							sec_reg:=X"8";
						when X"FD"=>
							grp:=X"1B";
							sec_reg:=X"9";
						when X"FE"=>
							grp:=X"1B";
							sec_reg:=X"A";
						when X"FF"=>
							grp:=X"1B";	
							sec_reg:=X"B";				--CONTD...
						
						when others=>					--INVLID INPUT
						grp:=X"00";
						sec_reg:=X"0";
					end case;
																		
				when X"01" =>
					master:="00";
					case temp_data (7 downto 0) is
						when X"00"=>					--XCHG E...CONTD
							grp:=X"1B";
							sec_reg:=X"C";
						when X"01"=>
							grp:=X"1B";
							sec_reg:=X"D";
						
						when X"02"=>					--XCHG F
							grp:=X"1C";
							sec_reg:=X"8";
						when X"03"=>
							grp:=X"1C";
							sec_reg:=X"9";
						when X"04"=>
							grp:=X"1C";
							sec_reg:=X"A";
						when X"05"=>
							grp:=X"1C";
							sec_reg:=X"B";
						when X"06"=>
							grp:=X"1C";
							sec_reg:=X"C";
						when X"07"=>
							grp:=X"1C";
							sec_reg:=X"D";
						
						when X"08"=>					--XCHG GH
							grp:=X"1D";
							sec_reg:=X"9";
						when X"09"=>
							grp:=X"1D";
							sec_reg:=X"A";
						when X"0A"=>
							grp:=X"1D";
							sec_reg:=X"B";
						when X"0B"=>
							grp:=X"1D";
							sec_reg:=X"C";
						when X"0C"=>
							grp:=X"1D";
							sec_reg:=X"D";
							
						when X"0D"=>					--XCHG GL
							grp:=X"1E";
							sec_reg:=X"A";
						when X"0E"=>
							grp:=X"1E";
							sec_reg:=X"B";
						when X"0F"=>
							grp:=X"1E";
							sec_reg:=X"C";
						when X"10"=>
							grp:=X"1E";
							sec_reg:=X"D";
						
						when X"11"=>					--XCHG HH
							grp:=X"1F";
							sec_reg:=X"B";
						when X"12"=>
							grp:=X"1F";
							sec_reg:=X"C";
						when X"13"=>
							grp:=X"1F";
							sec_reg:=X"D";

						when X"14"=>					--XCHG HL
							grp:=X"20";
							sec_reg:=X"C";
						when X"15"=>
							grp:=X"20";
							sec_reg:=X"D";
							
						when X"16"=>					--XCGH IH
							grp:=X"21";
							sec_reg:=X"D";
							
						when X"17"=>					--XCHP A
							grp:=X"22";
							sec_reg:=X"4";
						when X"18"=>
							grp:=X"22";
							sec_reg:=X"6";
						when X"19"=>
							grp:=X"22";
							sec_reg:=X"9";
						when X"1A"=>
							grp:=X"22";
							sec_reg:=X"B";
						when X"1B"=>
							grp:=X"22";
							sec_reg:=X"D";
						
						when X"1C"=>					--XCHP C
							grp:=X"23";
							sec_reg:=X"6";
						when X"1D"=>
							grp:=X"23";
							sec_reg:=X"9";
						when X"1E"=>
							grp:=X"23";
							sec_reg:=X"B";
						when X"1F"=>
							grp:=X"23";
							sec_reg:=X"D";
						
						when X"20"=>					--XCHP E
							grp:=X"24";
							sec_reg:=X"9";
						when X"21"=>
							grp:=X"24";
							sec_reg:=X"B";
						when X"22"=>
							grp:=X"24";
							sec_reg:=X"D";
						
						when X"23"=>					--XCHP G
							grp:=X"25";
							sec_reg:=X"B";
						when X"24"=>
							grp:=X"25";
							sec_reg:=X"D";
							
						when X"25"=>					--XCHP H
							grp:=X"26";
							sec_reg:=X"D";
						
						when X"26"=>					--XCHG I
							grp:=X"27";
							sec_reg:=X"7";
						
						when X"27"=>					--STA
							grp:=X"28";
							sec_reg:=X"1";
						
						when X"28"=>					--STAX
							grp:=X"29";
							sec_reg:=X"4";
						when X"29"=>
							grp:=X"29";
							sec_reg:=X"6";
						when X"2A"=>
							grp:=X"29";
							sec_reg:=X"9";
						when X"2B"=>
							grp:=X"29";
							sec_reg:=X"B";
							
						when X"2C"=>					--POPD
							grp:=X"46";
							sec_reg:=X"2";
						when X"2D"=>
							grp:=X"46";
							sec_reg:=X"4";
						when X"2E"=>
							grp:=X"46";
							sec_reg:=X"6";
						
						when X"2F"=>					--PUSHD
							grp:=X"47";
							sec_reg:=X"1";
						when X"30"=>
							grp:=X"47";
							sec_reg:=X"3";
						when X"31"=>
							grp:=X"47";
							sec_reg:=X"5";
						
						when others=>					--INVLID INPUT
							grp:=X"00";
							sec_reg:=X"0";			
					end case;
													
				when X"02" =>
					master:="10";
					case temp_data (7 downto 0) is
						when X"00" =>					--EI
							grp:=X"00";
							sec_reg:=X"0";
						
						when X"01"=>					--DI
							grp:=X"01";
							sec_reg:=X"0";
							
						when X"02"=>					--HLT
							grp:=X"02";
							sec_reg:=X"0";
							
						when X"03"=>					--CLI
							grp:=X"03";
							sec_reg:=X"0";
						
						when X"04"=>					--STI
							master:="00";
							grp:=X"2A";
							sec_reg:=X"0";
						
						when X"05"=>					--RDI
							master:="00";
							grp:=X"2B";
							sec_reg:=X"0";
							
						when X"06"=>					--LOCK
							grp:=X"04";
							sec_reg:=X"0";
							
						when X"07"=>					--DLCK
							grp:=X"05";
							sec_reg:=X"0";
						
						when X"08"=>					--CLF
							grp:=X"06";
							sec_reg:=X"0";
						
						when X"09"=>					--CLC
							grp:=X"07";
							sec_reg:=X"0";
							
						when X"0A"=>					--STC
							grp:=X"08";
							sec_reg:=X"0";
						
						when X"0B"=>					--STF
							master:="00";
							grp:=X"2C";
							sec_reg:=X"0";
						
						when X"0C"=>					--RST
							master:="11";
							grp:=X"27";
							sec_reg:=X"0";
						when X"0D"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"1";
						when X"0E"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"2";
						when X"0F"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"3";
						when X"10"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"4";
						when X"11"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"5";
						when X"12"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"6";
						when X"13"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"7";
						when X"14"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"8";
						when X"15"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"9";
						when X"16"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"A";
						when X"17"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"B";
						when X"18"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"C";
						when X"19"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"D";
						when X"1A"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"E";
						when X"1B"=>
							master:="11";
							grp:=X"27";
							sec_reg:=X"F";
						
						when others=>					--INVLID INPUT
							master:="00";
							grp:=X"00";
							sec_reg:=X"0";
					end case;
				
				when X"03" =>
					master:="01";
					case temp_data (7 downto 0) is
						when X"00" =>					--ADD
							grp:=X"00";
							sec_reg:=X"2";
						when X"01"=>
							grp:=X"00";
							sec_reg:=X"3";
						when X"02"=>
							grp:=X"00";
							sec_reg:=X"4";
						when X"03"=>
							grp:=X"00";
							sec_reg:=X"5";
						when X"04"=>
							grp:=X"00";
							sec_reg:=X"6";
						when X"05"=>
							grp:=X"00";
							sec_reg:=X"8";
						when X"06"=>
							grp:=X"00";
							sec_reg:=X"9";
						when X"07"=>
							grp:=X"00";
							sec_reg:=X"A";
						when X"08"=>
							grp:=X"00";
							sec_reg:=X"B";
						when X"09"=>
							grp:=X"00";
							sec_reg:=X"C";
						when X"0A"=>
							grp:=X"00";
							sec_reg:=X"D";
						when X"0B"=>
							grp:=X"00";
							sec_reg:=X"7";
							
						when X"0C"=>					--ADC
							grp:=X"01";
							sec_reg:=X"2";
						when X"0D"=>
							grp:=X"01";
							sec_reg:=X"3";
						when X"0E"=>
							grp:=X"01";
							sec_reg:=X"4";
						when X"0F"=>
							grp:=X"01";
							sec_reg:=X"5";
						when X"10"=>
							grp:=X"01";
							sec_reg:=X"6";
						when X"11"=>
							grp:=X"01";
							sec_reg:=X"8";
						when X"12"=>
							grp:=X"01";
							sec_reg:=X"9";
						when X"13"=>
							grp:=X"01";
							sec_reg:=X"A";
						when X"14"=>
							grp:=X"01";
							sec_reg:=X"B";
						when X"15"=>
							grp:=X"01";
							sec_reg:=X"C";
						when X"16"=>
							grp:=X"01";
							sec_reg:=X"D";
						when X"17"=>
							grp:=X"01";
							sec_reg:=X"7";
						
						when X"18"=>					--ADI
							grp:=X"02";
							sec_reg:=X"0";
							
						when X"19"=>					--ADC
							grp:=X"03";
							sec_reg:=X"0";
					
						when X"1A"=>					--ADM
							grp:=X"04";
							sec_reg:=X"0";
						
						when X"1B"=>					--ACM
							grp:=X"05";
							sec_reg:=X"0";
						
						when X"1C"=>					--SUB
							grp:=X"06";
							sec_reg:=X"2";
						when X"1D"=>
							grp:=X"06";
							sec_reg:=X"3";
						when X"1E"=>
							grp:=X"06";
							sec_reg:=X"4";
						when X"1F"=>
							grp:=X"06";
							sec_reg:=X"5";
						when X"20"=>
							grp:=X"06";
							sec_reg:=X"6";
						when X"21"=>
							grp:=X"06";
							sec_reg:=X"8";
						when X"22"=>
							grp:=X"06";
							sec_reg:=X"9";
						when X"23"=>
							grp:=X"06";
							sec_reg:=X"A";
						when X"24"=>
							grp:=X"06";
							sec_reg:=X"B";
						when X"25"=>
							grp:=X"06";
							sec_reg:=X"C";
						when X"26"=>
							grp:=X"06";
							sec_reg:=X"D";
						when X"27"=>
							grp:=X"06";
							sec_reg:=X"7";
							
						when X"28"=>					--SBB
							grp:=X"07";
							sec_reg:=X"2";
						when X"29"=>
							grp:=X"07";
							sec_reg:=X"3";
						when X"2A"=>
							grp:=X"07";
							sec_reg:=X"4";
						when X"2B"=>
							grp:=X"07";
							sec_reg:=X"5";
						when X"2C"=>
							grp:=X"07";
							sec_reg:=X"6";
						when X"2D"=>
							grp:=X"07";
							sec_reg:=X"8";
						when X"2E"=>
							grp:=X"07";
							sec_reg:=X"9";
						when X"2F"=>
							grp:=X"07";
							sec_reg:=X"A";
						when X"30"=>
							grp:=X"07";
							sec_reg:=X"B";
						when X"31"=>
							grp:=X"07";
							sec_reg:=X"C";
						when X"32"=>
							grp:=X"07";
							sec_reg:=X"D";
						when X"33"=>
							grp:=X"07";
							sec_reg:=X"7";
							
						when X"34"=>					--SUI
							grp:=X"08";
							sec_reg:=X"0";
						
						when X"35"=>					--SBI
							grp:=X"09";
							sec_reg:=X"0";
						
						when X"36"=>					--SUM
							grp:=X"0A";
							sec_reg:=X"0";
						
						when X"37"=>					--SBM
							grp:=X"0B";
							sec_reg:=X"0";
						
						when X"38"=>					--SUBA
							grp:=X"0C";
							sec_reg:=X"2";
						when X"39"=>
							grp:=X"0C";
							sec_reg:=X"3";
						when X"3A"=>
							grp:=X"0C";
							sec_reg:=X"4";
						when X"3B"=>
							grp:=X"0C";
							sec_reg:=X"5";
						when X"3C"=>
							grp:=X"0C";
							sec_reg:=X"6";
						when X"3D"=>
							grp:=X"0C";
							sec_reg:=X"8";
						when X"3E"=>
							grp:=X"0C";
							sec_reg:=X"9";
						when X"3F"=>
							grp:=X"0C";
							sec_reg:=X"A";
						when X"40"=>
							grp:=X"0C";
							sec_reg:=X"B";
						when X"41"=>
							grp:=X"0C";
							sec_reg:=X"C";
						when X"42"=>
							grp:=X"0C";
							sec_reg:=X"D";
						when X"43"=>
							grp:=X"0C";
							sec_reg:=X"7";

						when X"44"=>					--SBBA
							grp:=X"0D";
							sec_reg:=X"2";
						when X"45"=>
							grp:=X"0D";
							sec_reg:=X"3";
						when X"46"=>
							grp:=X"0D";
							sec_reg:=X"4";
						when X"47"=>
							grp:=X"0D";
							sec_reg:=X"5";
						when X"48"=>
							grp:=X"0D";
							sec_reg:=X"6";
						when X"49"=>
							grp:=X"0D";
							sec_reg:=X"8";
						when X"4A"=>
							grp:=X"0D";
							sec_reg:=X"9";
						when X"4B"=>
							grp:=X"0D";
							sec_reg:=X"A";
						when X"4C"=>
							grp:=X"0D";
							sec_reg:=X"B";
						when X"4D"=>
							grp:=X"0D";
							sec_reg:=X"C";
						when X"4E"=>
							grp:=X"0D";
							sec_reg:=X"D";
						when X"4F"=>
							grp:=X"0D";
							sec_reg:=X"7";
							
						when X"50"=>					--SUIA
							grp:=X"0E";
							sec_reg:=X"0";
						
						when X"51"=>					--SBIA
							grp:=X"0F";
							sec_reg:=X"0";
							
						when X"52"=>					--SUMA
							grp:=X"10";
							sec_reg:=X"0";
						
						when X"53"=>					--SBMA
							grp:=X"11";
							sec_reg:=X"0";
						
						when X"55"=>					--MUL
							grp:=X"12";
							sec_reg:=X"3";
						when X"56"=>
							grp:=X"12";
							sec_reg:=X"4";
						when X"57"=>
							grp:=X"12";
							sec_reg:=X"5";
						when X"58"=>
							grp:=X"12";
							sec_reg:=X"6";
						when X"59"=>
							grp:=X"12";
							sec_reg:=X"8";
						when X"5A"=>
							grp:=X"12";
							sec_reg:=X"9";
						when X"5B"=>
							grp:=X"12";
							sec_reg:=X"A";
						when X"5C"=>
							grp:=X"12";
							sec_reg:=X"B";
						when X"5D"=>
							grp:=X"12";
							sec_reg:=X"C";
						when X"5E"=>
							grp:=X"12";
							sec_reg:=X"D";
						when X"5F"=>
							grp:=X"12";
							sec_reg:=X"7";
						
						when X"60"=>					--MUI
							grp:=X"13";
							sec_reg:=X"0";
						
						when X"61"=>					--MUM
							grp:=X"14";
							sec_reg:=X"0";
						
						when X"63"=>					--DIV
							grp:=X"15";
							sec_reg:=X"3";
						when X"64"=>
							grp:=X"15";
							sec_reg:=X"4";
						when X"65"=>
							grp:=X"15";
							sec_reg:=X"5";
						when X"66"=>
							grp:=X"15";
							sec_reg:=X"6";
						when X"67"=>
							grp:=X"15";
							sec_reg:=X"8";
						when X"68"=>
							grp:=X"15";
							sec_reg:=X"9";
						when X"69"=>
							grp:=X"15";
							sec_reg:=X"A";
						when X"6A"=>
							grp:=X"15";
							sec_reg:=X"B";
						when X"6B"=>
							grp:=X"15";
							sec_reg:=X"C";
						when X"6C"=>
							grp:=X"15";
							sec_reg:=X"D";
						when X"6D"=>
							grp:=X"15";
							sec_reg:=X"7";
						
						when X"6E"=>					--DVI
							grp:=X"16";
							sec_reg:=X"0";
						
						when X"6F"=>					--DVM
							grp:=X"17";
							sec_reg:=X"0";
						
						when X"71"=>					--DIVA
							grp:=X"18";
							sec_reg:=X"3";
						when X"72"=>
							grp:=X"18";
							sec_reg:=X"4";
						when X"73"=>
							grp:=X"18";
							sec_reg:=X"5";
						when X"74"=>
							grp:=X"18";
							sec_reg:=X"6";
						when X"75"=>
							grp:=X"18";
							sec_reg:=X"8";
						when X"76"=>
							grp:=X"18";
							sec_reg:=X"9";
						when X"77"=>
							grp:=X"18";
							sec_reg:=X"A";
						when X"78"=>
							grp:=X"18";
							sec_reg:=X"B";
						when X"79"=>
							grp:=X"18";
							sec_reg:=X"C";
						when X"7A"=>
							grp:=X"18";
							sec_reg:=X"D";
						when X"7B"=>
							grp:=X"18";
							sec_reg:=X"7";
							
						when X"7C"=>					--DVIA
							grp:=X"19";
							sec_reg:=X"0";
						
						when X"7D"=>					--DVMA
							grp:=X"1A";
							sec_reg:=X"0";
						
						when X"7E"=>					--INR
							grp:=X"1B";
							sec_reg:=X"2";
						when X"7F"=>
							grp:=X"1B";
							sec_reg:=X"3";
						when X"80"=>
							grp:=X"1B";
							sec_reg:=X"4";
						when X"81"=>
							grp:=X"1B";
							sec_reg:=X"5";
						when X"82"=>
							grp:=X"1B";
							sec_reg:=X"6";
						when X"83"=>
							grp:=X"1B";
							sec_reg:=X"8";
						when X"84"=>
							grp:=X"1B";
							sec_reg:=X"9";
						when X"85"=>
							grp:=X"1B";
							sec_reg:=X"A";
						when X"86"=>
							grp:=X"1B";
							sec_reg:=X"B";
						when X"87"=>
							grp:=X"1B";
							sec_reg:=X"C";
						when X"88"=>
							grp:=X"1B";
							sec_reg:=X"D";
						when X"89"=>
							grp:=X"1B";
							sec_reg:=X"7";
							
						when X"8A"=>					--INX
							grp:=X"1C";
							sec_reg:=X"4";
						when X"8B"=>
							grp:=X"1C";
							sec_reg:=X"6";
						when X"8C"=>
							grp:=X"1C";
							sec_reg:=X"9";
						when X"8D"=>
							grp:=X"1C";
							sec_reg:=X"B";
						when X"8E"=>
							grp:=X"1C";
							sec_reg:=X"D";
						when X"8F"=>
							grp:=X"1C";
							sec_reg:=X"F";
							
						when X"90"=>					--DCR
							grp:=X"1D";
							sec_reg:=X"2";
						when X"91"=>
							grp:=X"1D";
							sec_reg:=X"3";
						when X"92"=>
							grp:=X"1D";
							sec_reg:=X"4";
						when X"93"=>
							grp:=X"1D";
							sec_reg:=X"5";
						when X"94"=>
							grp:=X"1D";
							sec_reg:=X"6";
						when X"95"=>
							grp:=X"1D";
							sec_reg:=X"8";
						when X"96"=>
							grp:=X"1D";
							sec_reg:=X"9";
						when X"97"=>
							grp:=X"1D";
							sec_reg:=X"A";
						when X"98"=>
							grp:=X"1D";
							sec_reg:=X"B";
						when X"99"=>
							grp:=X"1D";
							sec_reg:=X"C";
						when X"9A"=>
							grp:=X"1D";
							sec_reg:=X"D";
						when X"9B"=>
							grp:=X"1D";
							sec_reg:=X"7";
							
						when X"9C"=>					--DCX
							grp:=X"1E";
							sec_reg:=X"4";
						when X"9D"=>
							grp:=X"1E";
							sec_reg:=X"6";
						when X"9E"=>
							grp:=X"1E";
							sec_reg:=X"9";
						when X"9F"=>
							grp:=X"1E";
							sec_reg:=X"B";
						when X"A0"=>
							grp:=X"1E";
							sec_reg:=X"D";
						when X"A1"=>
							grp:=X"1E";
							sec_reg:=X"F";
							
						when X"A2"=>					--ANA
							grp:=X"1F";
							sec_reg:=X"2";
						when X"A3"=>
							grp:=X"1F";
							sec_reg:=X"3";
						when X"A4"=>
							grp:=X"1F";
							sec_reg:=X"4";
						when X"A5"=>
							grp:=X"1F";
							sec_reg:=X"5";
						when X"A6"=>
							grp:=X"1F";
							sec_reg:=X"6";
						when X"A7"=>
							grp:=X"1F";
							sec_reg:=X"8";
						when X"A8"=>
							grp:=X"1F";
							sec_reg:=X"9";
						when X"A9"=>
							grp:=X"1F";
							sec_reg:=X"A";
						when X"AA"=>
							grp:=X"1F";
							sec_reg:=X"B";
						when X"AB"=>
							grp:=X"1F";
							sec_reg:=X"C";
						when X"AC"=>
							grp:=X"1F";
							sec_reg:=X"D";
						when X"AD"=>
							grp:=X"1F";
							sec_reg:=X"7";
						
						when X"AE"=>				--ANR B
							grp:=X"20";
							sec_reg:=X"3";
						when X"AF"=>
							grp:=X"20";
							sec_reg:=X"4";
						when X"B0"=>
							grp:=X"20";
							sec_reg:=X"5";
						when X"B1"=>
							grp:=X"20";
							sec_reg:=X"6";
						when X"B2"=>
							grp:=X"20";
							sec_reg:=X"8";
						when X"B3"=>
							grp:=X"20";
							sec_reg:=X"9";
						when X"B4"=>
							grp:=X"20";
							sec_reg:=X"A";
						when X"B5"=>
							grp:=X"20";
							sec_reg:=X"B";
						when X"B6"=>
							grp:=X"20";
							sec_reg:=X"C";
						when X"B7"=>
							grp:=X"20";
							sec_reg:=X"D";
						when X"B8"=>
							grp:=X"20";
							sec_reg:=X"7";
							
						when X"B9"=>					--ANR C
							grp:=X"21";
							sec_reg:=X"4";
						when X"BA"=>
							grp:=X"21";
							sec_reg:=X"5";
						when X"BB"=>
							grp:=X"21";
							sec_reg:=X"6";
						when X"BC"=>
							grp:=X"21";
							sec_reg:=X"8";
						when X"BD"=>
							grp:=X"21";
							sec_reg:=X"9";
						when X"BE"=>
							grp:=X"21";
							sec_reg:=X"A";
						when X"BF"=>
							grp:=X"21";
							sec_reg:=X"B";
						when X"C0"=>
							grp:=X"21";
							sec_reg:=X"C";
						when X"C1"=>
							grp:=X"21";
							sec_reg:=X"D";
						when X"C2"=>
							grp:=X"21";
							sec_reg:=X"7";
							
						when X"C3"=>					--ANR D
							grp:=X"22";
							sec_reg:=X"5";
						when X"C4"=>
							grp:=X"22";
							sec_reg:=X"6";
						when X"C5"=>
							grp:=X"22";
							sec_reg:=X"8";
						when X"C6"=>
							grp:=X"22";
							sec_reg:=X"9";
						when X"C7"=>
							grp:=X"22";
							sec_reg:=X"A";
						when X"C8"=>
							grp:=X"22";
							sec_reg:=X"B";
						when X"C9"=>
							grp:=X"22";
							sec_reg:=X"C";
						when X"CA"=>
							grp:=X"22";
							sec_reg:=X"D";
						when X"CB"=>
							grp:=X"22";
							sec_reg:=X"7";
							
						when X"CC"=>					--ANR E
							grp:=X"23";
							sec_reg:=X"6";
						when X"CD"=>
							grp:=X"23";
							sec_reg:=X"8";
						when X"CE"=>
							grp:=X"23";
							sec_reg:=X"9";
						when X"CF"=>
							grp:=X"23";
							sec_reg:=X"A";
						when X"D0"=>
							grp:=X"23";
							sec_reg:=X"B";
						when X"D1"=>
							grp:=X"23";
							sec_reg:=X"C";
						when X"D2"=>
							grp:=X"23";
							sec_reg:=X"D";
						when X"D3"=>
							grp:=X"23";
							sec_reg:=X"7";
							
						when X"D4"=>					--ANR F
							grp:=X"24";
							sec_reg:=X"8";
						when X"D5"=>
							grp:=X"24";
							sec_reg:=X"9";
						when X"D6"=>
							grp:=X"24";
							sec_reg:=X"A";
						when X"D7"=>
							grp:=X"24";
							sec_reg:=X"B";
						when X"D8"=>
							grp:=X"24";
							sec_reg:=X"C";
						when X"D9"=>
							grp:=X"24";
							sec_reg:=X"D";
						when X"DA"=>
							grp:=X"24";
							sec_reg:=X"7";
							
						when X"DB"=>					--ANR GH
							grp:=X"25";
							sec_reg:=X"9";
						when X"DC"=>
							grp:=X"25";
							sec_reg:=X"A";
						when X"DD"=>
							grp:=X"25";
							sec_reg:=X"B";
						when X"DE"=>
							grp:=X"25";
							sec_reg:=X"C";
						when X"DF"=>
							grp:=X"25";
							sec_reg:=X"D";
						when X"E0"=>
							grp:=X"25";
							sec_reg:=X"7";
							
						when X"E1"=>					--ANR GL
							grp:=X"26";
							sec_reg:=X"A";
						when X"E2"=>
							grp:=X"26";
							sec_reg:=X"B";
						when X"E3"=>
							grp:=X"26";
							sec_reg:=X"C";
						when X"E4"=>
							grp:=X"26";
							sec_reg:=X"D";
						when X"E5"=>
							grp:=X"26";
							sec_reg:=X"7";
							
						when X"E6"=>					--ANR HH
							grp:=X"27";
							sec_reg:=X"B";
						when X"E7"=>
							grp:=X"27";
							sec_reg:=X"C";
						when X"E8"=>
							grp:=X"27";
							sec_reg:=X"D";
						when X"E9"=>
							grp:=X"27";
							sec_reg:=X"7";
						
						when X"EA"=>					--ANR HL
							grp:=X"28";
							sec_reg:=X"C";
						when X"EB"=>
							grp:=X"28";
							sec_reg:=X"D";
						when X"EC"=>
							grp:=X"28";
							sec_reg:=X"7";
							
						when X"ED"=>					--ANR IH
							grp:=X"29";
							sec_reg:=X"D";
						when X"EE"=>
							grp:=X"29";
							sec_reg:=X"7";
							
						when X"EF"=>					--ANR IL
							grp:=X"2A";
							sec_reg:=X"7";
							
						when X"F0"=>					--ANI
							grp:=X"2B";
							sec_reg:=X"0";
						
						when X"F1"=>					--ANM
							grp:=X"2C";
							sec_reg:=X"0";
						
						when X"F2"=>					--ORA
							grp:=X"2D";
							sec_reg:=X"2";
						when X"F3"=>
							grp:=X"2D";
							sec_reg:=X"3";
						when X"F4"=>
							grp:=X"2D";
							sec_reg:=X"4";
						when X"F5"=>
							grp:=X"2D";
							sec_reg:=X"5";
						when X"F6"=>
							grp:=X"2D";
							sec_reg:=X"6";
						when X"F7"=>
							grp:=X"2D";
							sec_reg:=X"8";
						when X"F8"=>
							grp:=X"2D";
							sec_reg:=X"9";
						when X"F9"=>
							grp:=X"2D";
							sec_reg:=X"A";
						when X"FA"=>
							grp:=X"2D";
							sec_reg:=X"B";
						when X"FB"=>
							grp:=X"2D";
							sec_reg:=X"C";
						when X"FC"=>
							grp:=X"2D";
							sec_reg:=X"D";
						when X"FD"=>
							grp:=X"2D";
							sec_reg:=X"7";
							
						when X"FE"=>					--ORR B
							grp:=X"2E";
							sec_reg:=X"3";
						when X"FF"=>
							grp:=X"2E";	
							sec_reg:=X"4";				--CONTD...
						
						when others=>					--INVLID INPUT
							master:="00";
							grp:=X"00";
							sec_reg:=X"0";
					end case;
					
				
				when X"04" =>
					master:="01";
					case temp_data (7 downto 0) is
						when X"00" =>					--ORR B...CONTD
							grp:=X"2E";
							sec_reg:=X"5";
						when X"01"=>
							grp:=X"2E";
							sec_reg:=X"6";
						when X"02"=>
							grp:=X"2E";
							sec_reg:=X"8";
						when X"03"=>
							grp:=X"2E";
							sec_reg:=X"9";
						when X"04"=>
							grp:=X"2E";
							sec_reg:=X"A";
						when X"05"=>
							grp:=X"2E";
							sec_reg:=X"B";
						when X"06"=>
							grp:=X"2E";
							sec_reg:=X"C";
						when X"07"=>
							grp:=X"2E";
							sec_reg:=X"D";
						when X"08"=>
							grp:=X"2E";
							sec_reg:=X"7";
							
						when X"09"=>					--ORR C
							grp:=X"2F";
							sec_reg:=X"4";
						when X"0A"=>
							grp:=X"2F";
							sec_reg:=X"5";
						when X"0B"=>
							grp:=X"2F";
							sec_reg:=X"6";
						when X"0C"=>
							grp:=X"2F";
							sec_reg:=X"8";
						when X"0D"=>
							grp:=X"2F";
							sec_reg:=X"9";
						when X"0E"=>
							grp:=X"2F";
							sec_reg:=X"A";
						when X"0F"=>
							grp:=X"2F";
							sec_reg:=X"B";
						when X"10"=>
							grp:=X"2F";
							sec_reg:=X"C";
						when X"11"=>
							grp:=X"2F";
							sec_reg:=X"D";
						when X"12"=>
							grp:=X"2F";
							sec_reg:=X"7";
							
						when X"13"=>						--ORR D
							grp:=X"30";
							sec_reg:=X"5";
						when X"14"=>
							grp:=X"30";
							sec_reg:=X"6";
						when X"15"=>
							grp:=X"30";
							sec_reg:=X"8";
						when X"16"=>
							grp:=X"30";
							sec_reg:=X"9";
						when X"17"=>
							grp:=X"30";
							sec_reg:=X"A";
						when X"18"=>
							grp:=X"30";
							sec_reg:=X"B";
						when X"19"=>
							grp:=X"30";
							sec_reg:=X"C";
						when X"1A"=>
							grp:=X"30";
							sec_reg:=X"D";
						when X"1B"=>
							grp:=X"30";
							sec_reg:=X"7";
							
						when X"1C"=>					--ORR E
							grp:=X"31";
							sec_reg:=X"6";
						when X"1D"=>
							grp:=X"31";
							sec_reg:=X"8";
						when X"1E"=>
							grp:=X"31";
							sec_reg:=X"9";
						when X"1F"=>
							grp:=X"31";
							sec_reg:=X"A";
						when X"20"=>
							grp:=X"31";
							sec_reg:=X"B";
						when X"21"=>
							grp:=X"31";
							sec_reg:=X"C";
						when X"22"=>
							grp:=X"31";
							sec_reg:=X"D";
						when X"23"=>
							grp:=X"31";
							sec_reg:=X"7";
							
						when X"24"=>					--ORR F
							grp:=X"32";
							sec_reg:=X"8";
						when X"25"=>
							grp:=X"32";
							sec_reg:=X"9";
						when X"26"=>
							grp:=X"32";
							sec_reg:=X"A";
						when X"27"=>
							grp:=X"32";
							sec_reg:=X"B";
						when X"28"=>
							grp:=X"32";
							sec_reg:=X"C";
						when X"29"=>
							grp:=X"32";
							sec_reg:=X"D";
						when X"2A"=>
							grp:=X"32";
							sec_reg:=X"7";
							
						when X"2B"=>					--ORR GH
							grp:=X"33";
							sec_reg:=X"9";
						when X"2C"=>
							grp:=X"33";
							sec_reg:=X"A";
						when X"2D"=>
							grp:=X"33";
							sec_reg:=X"B";
						when X"2E"=>
							grp:=X"33";
							sec_reg:=X"C";
						when X"2F"=>
							grp:=X"33";
							sec_reg:=X"D";
						when X"30"=>
							grp:=X"33";
							sec_reg:=X"7";
							
						when X"31"=>					--ORR GL
							grp:=X"34";
							sec_reg:=X"A";
						when X"32"=>
							grp:=X"34";
							sec_reg:=X"B";
						when X"33"=>
							grp:=X"34";
							sec_reg:=X"C";
						when X"34"=>
							grp:=X"34";
							sec_reg:=X"D";
						when X"35"=>
							grp:=X"34";
							sec_reg:=X"7";
							
						when X"36"=>					--ORR HH
							grp:=X"35";
							sec_reg:=X"B";
						when X"37"=>
							grp:=X"35";
							sec_reg:=X"C";
						when X"38"=>
							grp:=X"35";
							sec_reg:=X"D";
						when X"39"=>
							grp:=X"35";
							sec_reg:=X"7";
							
						when X"3A"=>					--ORR HL
							grp:=X"36";
							sec_reg:=X"C";
						when X"3B"=>
							grp:=X"36";
							sec_reg:=X"D";
						when X"3C"=>
							grp:=X"36";
							sec_reg:=X"7";
							
						when X"3D"=>					--ORR IH
							grp:=X"37";
							sec_reg:=X"D";
						when X"3E"=>
							grp:=X"37";
							sec_reg:=X"7";
							
						when X"3F"=>					--ORR IL
							grp:=X"38";
							sec_reg:=X"7";
							
						when X"40"=>					--ORI
							grp:=X"39";
							sec_reg:=X"0";
						
						when X"41"=>					--ORM
							grp:=X"3A";
							sec_reg:=X"0";
						
						when X"42"=>					--XORA
							grp:=X"3B";
							sec_reg:=X"2";
						when X"43"=>
							grp:=X"3B";
							sec_reg:=X"3";
						when X"44"=>
							grp:=X"3B";
							sec_reg:=X"4";
						when X"45"=>
							grp:=X"3B";
							sec_reg:=X"5";
						when X"46"=>
							grp:=X"3B";
							sec_reg:=X"6";
						when X"47"=>
							grp:=X"3B";
							sec_reg:=X"8";
						when X"48"=>
							grp:=X"3B";
							sec_reg:=X"9";
						when X"49"=>
							grp:=X"3B";
							sec_reg:=X"A";
						when X"4A"=>
							grp:=X"3B";
							sec_reg:=X"B";
						when X"4B"=>
							grp:=X"3B";
							sec_reg:=X"C";
						when X"4C"=>
							grp:=X"3B";
							sec_reg:=X"D";
						when X"4D"=>
							grp:=X"3B";
							sec_reg:=X"7";
							
						when X"4E"=>					--XORR B
							grp:=X"3C";
							sec_reg:=X"3";
						when X"4F"=>
							grp:=X"3C";
							sec_reg:=X"4";
						when X"50"=>
							grp:=X"3C";
							sec_reg:=X"5";
						when X"51"=>
							grp:=X"3C";
							sec_reg:=X"6";
						when X"52"=>
							grp:=X"3C";
							sec_reg:=X"8";
						when X"53"=>
							grp:=X"3C";
							sec_reg:=X"9";
						when X"54"=>
							grp:=X"3C";
							sec_reg:=X"A";
						when X"55"=>
							grp:=X"3C";
							sec_reg:=X"B";
						when X"56"=>
							grp:=X"3C";
							sec_reg:=X"C";
						when X"57"=>
							grp:=X"3C";
							sec_reg:=X"D";
						when X"58"=>
							grp:=X"3C";
							sec_reg:=X"7";
							
						when X"59"=>					--XORR C
							grp:=X"3D";
							sec_reg:=X"4";
						when X"5A"=>
							grp:=X"3D";
							sec_reg:=X"5";
						when X"5B"=>
							grp:=X"3D";
							sec_reg:=X"6";
						when X"5C"=>
							grp:=X"3D";
							sec_reg:=X"8";
						when X"5D"=>
							grp:=X"3D";
							sec_reg:=X"9";
						when X"5E"=>
							grp:=X"3D";
							sec_reg:=X"A";
						when X"5F"=>
							grp:=X"3D";
							sec_reg:=X"B";
						when X"60"=>
							grp:=X"3D";
							sec_reg:=X"C";
						when X"61"=>
							grp:=X"3D";
							sec_reg:=X"D";
						when X"62"=>
							grp:=X"3D";
							sec_reg:=X"7";
							
						when X"63"=>						--XORR D
							grp:=X"3E";
							sec_reg:=X"5";
						when X"64"=>
							grp:=X"3E";
							sec_reg:=X"6";
						when X"65"=>
							grp:=X"3E";
							sec_reg:=X"8";
						when X"66"=>
							grp:=X"3E";
							sec_reg:=X"9";
						when X"67"=>
							grp:=X"3E";
							sec_reg:=X"A";
						when X"68"=>
							grp:=X"3E";
							sec_reg:=X"B";
						when X"69"=>
							grp:=X"3E";
							sec_reg:=X"C";
						when X"6A"=>
							grp:=X"3E";
							sec_reg:=X"D";
						when X"6B"=>
							grp:=X"3E";
							sec_reg:=X"7";
							
						when X"6C"=>					--XORR E
							grp:=X"3F";
							sec_reg:=X"6";
						when X"6D"=>
							grp:=X"3F";
							sec_reg:=X"8";
						when X"6E"=>
							grp:=X"3F";
							sec_reg:=X"9";
						when X"6F"=>
							grp:=X"3F";
							sec_reg:=X"A";
						when X"70"=>
							grp:=X"3F";
							sec_reg:=X"B";
						when X"71"=>
							grp:=X"3F";
							sec_reg:=X"C";
						when X"72"=>
							grp:=X"3F";
							sec_reg:=X"D";
						when X"73"=>
							grp:=X"3F";
							sec_reg:=X"7";
							
						when X"74"=>					--XORR F
							grp:=X"40";
							sec_reg:=X"8";
						when X"75"=>
							grp:=X"40";
							sec_reg:=X"9";
						when X"76"=>
							grp:=X"40";
							sec_reg:=X"A";
						when X"77"=>
							grp:=X"40";
							sec_reg:=X"B";
						when X"78"=>
							grp:=X"40";
							sec_reg:=X"C";
						when X"79"=>
							grp:=X"40";
							sec_reg:=X"D";
						when X"7A"=>
							grp:=X"40";
							sec_reg:=X"7";
							
						when X"7B"=>					--XORR GH
							grp:=X"41";
							sec_reg:=X"9";
						when X"7C"=>
							grp:=X"41";
							sec_reg:=X"A";
						when X"7D"=>
							grp:=X"41";
							sec_reg:=X"B";
						when X"7E"=>
							grp:=X"41";
							sec_reg:=X"C";
						when X"7F"=>
							grp:=X"41";
							sec_reg:=X"D";
						when X"80"=>
							grp:=X"41";
							sec_reg:=X"7";
							
						when X"81"=>					--XORR GL
							grp:=X"42";
							sec_reg:=X"A";
						when X"82"=>
							grp:=X"42";
							sec_reg:=X"B";
						when X"83"=>
							grp:=X"42";
							sec_reg:=X"C";
						when X"84"=>
							grp:=X"42";
							sec_reg:=X"D";
						when X"85"=>
							grp:=X"42";
							sec_reg:=X"7";
							
						when X"86"=>					--XORR HH
							grp:=X"43";
							sec_reg:=X"B";
						when X"87"=>
							grp:=X"43";
							sec_reg:=X"C";
						when X"88"=>
							grp:=X"43";
							sec_reg:=X"D";
						when X"89"=>
							grp:=X"43";
							sec_reg:=X"7";
							
						when X"8A"=>					--XORR HL
							grp:=X"44";
							sec_reg:=X"C";
						when X"8B"=>
							grp:=X"44";
							sec_reg:=X"D";
						when X"8C"=>
							grp:=X"44";
							sec_reg:=X"7";
							
						when X"8D"=>					--XORR IH
							grp:=X"45";
							sec_reg:=X"D";
						when X"8E"=>
							grp:=X"45";
							sec_reg:=X"7";
							
						when X"8F"=>					--XORR IL
							grp:=X"46";
							sec_reg:=X"7";
							
						when X"90"=>					--XORI
							grp:=X"47";
							sec_reg:=X"0";
							
						when X"91"=>					--XORM
							grp:=X"48";
							sec_reg:=X"0";
							
						when X"92"=>					--NOT
							grp:=X"49";
							sec_reg:=X"1";
						when X"93"=>
							grp:=X"49";
							sec_reg:=X"2";
						when X"94"=>
							grp:=X"49";
							sec_reg:=X"3";
						when X"95"=>
							grp:=X"49";
							sec_reg:=X"4";
						when X"96"=>
							grp:=X"49";
							sec_reg:=X"5";
						when X"97"=>
							grp:=X"49";
							sec_reg:=X"6";
						when X"98"=>
							grp:=X"49";
							sec_reg:=X"8";
						when X"99"=>
							grp:=X"49";
							sec_reg:=X"9";
						when X"9A"=>
							grp:=X"49";
							sec_reg:=X"A";
						when X"9B"=>
							grp:=X"49";
							sec_reg:=X"B";
						when X"9C"=>
							grp:=X"49";
							sec_reg:=X"C";
						when X"9D"=>
							grp:=X"49";
							sec_reg:=X"D";
						when X"9E"=>
							grp:=X"49";
							sec_reg:=X"7";
							
						when X"9F"=>					--NOA
							grp:=X"4A";
							sec_reg:=X"2";
						when X"A0"=>
							grp:=X"4A";
							sec_reg:=X"3";
						when X"A1"=>
							grp:=X"4A";
							sec_reg:=X"4";
						when X"A2"=>
							grp:=X"4A";
							sec_reg:=X"5";
						when X"A3"=>
							grp:=X"4A";
							sec_reg:=X"6";
						when X"A4"=>
							grp:=X"4A";
							sec_reg:=X"8";
						when X"A5"=>
							grp:=X"4A";
							sec_reg:=X"9";
						when X"A6"=>
							grp:=X"4A";
							sec_reg:=X"A";
						when X"A7"=>
							grp:=X"4A";
							sec_reg:=X"B";
						when X"A8"=>
							grp:=X"4A";
							sec_reg:=X"C";
						when X"A9"=>
							grp:=X"4A";
							sec_reg:=X"D";
						when X"AA"=>
							grp:=X"4A";
							sec_reg:=X"7";
							
						when X"AB"=>					--NOI
							grp:=X"4B";
							sec_reg:=X"0";
							
						when X"AC"=>					--NOM
							grp:=X"4C";
							sec_reg:=X"0";
							
						when X"AD"=>					--RCR
							grp:=X"4D";
							sec_reg:=X"0";
						
						when X"AE"=>					--RRC
							grp:=X"4E";
							sec_reg:=X"0";
							
						when X"AF"=>					--RRA
							grp:=X"4F";
							sec_reg:=X"0";
						
						when X"B0"=>					--LCR
							grp:=X"50";
							sec_reg:=X"0";
						
						when X"B1"=>					--LRC
							grp:=X"51";
							sec_reg:=X"0";
							
						when X"B2"=>					--LRA
							grp:=X"52";
							sec_reg:=X"0";
						
						when X"B3"=>					--SHR
							grp:=X"53";
							sec_reg:=X"0";
						
						when X"B4"=>					--SRC
							grp:=X"54";
							sec_reg:=X"0";
						
						when X"B5"=>					--SHL
							grp:=X"55";
							sec_reg:=X"0";
							
						when X"B6"=>					--SLC
							grp:=X"56";
							sec_reg:=X"0";
						
						when X"B7"=>					--NEG
							grp:=X"57";
							sec_reg:=X"0";
							
						when X"B8"=>					--CPA
							grp:=X"58";
							sec_reg:=X"2";
						when X"B9"=>
							grp:=X"58";
							sec_reg:=X"3";
						when X"BA"=>
							grp:=X"58";
							sec_reg:=X"4";
						when X"BB"=>
							grp:=X"58";
							sec_reg:=X"5";
						when X"BC"=>
							grp:=X"58";
							sec_reg:=X"6";
						when X"BD"=>
							grp:=X"58";
							sec_reg:=X"8";
						when X"BE"=>
							grp:=X"58";
							sec_reg:=X"9";
						when X"BF"=>
							grp:=X"58";
							sec_reg:=X"A";
						when X"C0"=>
							grp:=X"58";
							sec_reg:=X"B";
						when X"C1"=>
							grp:=X"58";
							sec_reg:=X"C";
						when X"C2"=>
							grp:=X"58";
							sec_reg:=X"D";
						when X"C3"=>
							grp:=X"58";
							sec_reg:=X"7";
							
						when X"C4"=>					--CMP B
							grp:=X"59";
							sec_reg:=X"3";
						when X"C5"=>
							grp:=X"59";
							sec_reg:=X"4";
						when X"C6"=>
							grp:=X"59";
							sec_reg:=X"5";
						when X"C7"=>
							grp:=X"59";
							sec_reg:=X"6";
						when X"C8"=>
							grp:=X"59";
							sec_reg:=X"8";
						when X"C9"=>
							grp:=X"59";
							sec_reg:=X"9";
						when X"CA"=>
							grp:=X"59";
							sec_reg:=X"A";
						when X"CB"=>
							grp:=X"59";
							sec_reg:=X"B";
						when X"CC"=>
							grp:=X"59";
							sec_reg:=X"C";
						when X"CD"=>
							grp:=X"59";
							sec_reg:=X"D";
						when X"CE"=>
							grp:=X"59";
							sec_reg:=X"7";
						
						when X"CF"=>					--CMP C
							grp:=X"5A";
							sec_reg:=X"4";
						when X"D0"=>
							grp:=X"5A";
							sec_reg:=X"5";
						when X"D1"=>
							grp:=X"5A";
							sec_reg:=X"6";
						when X"D2"=>
							grp:=X"5A";
							sec_reg:=X"8";
						when X"D3"=>
							grp:=X"5A";
							sec_reg:=X"9";
						when X"D4"=>
							grp:=X"5A";
							sec_reg:=X"A";
						when X"D5"=>
							grp:=X"5A";
							sec_reg:=X"B";
						when X"D6"=>
							grp:=X"5A";
							sec_reg:=X"C";
						when X"D7"=>
							grp:=X"5A";
							sec_reg:=X"D";
						when X"D8"=>
							grp:=X"5A";
							sec_reg:=X"7";
							
						when X"D9"=>					--CMP D
							grp:=X"5B";
							sec_reg:=X"5";
						when X"DA"=>
							grp:=X"5B";
							sec_reg:=X"6";
						when X"DB"=>
							grp:=X"5B";
							sec_reg:=X"8";
						when X"DC"=>
							grp:=X"5B";
							sec_reg:=X"9";
						when X"DD"=>
							grp:=X"5B";
							sec_reg:=X"A";
						when X"DE"=>
							grp:=X"5B";
							sec_reg:=X"B";
						when X"DF"=>
							grp:=X"5B";
							sec_reg:=X"C";
						when X"E0"=>
							grp:=X"5B";
							sec_reg:=X"D";
						when X"E1"=>
							grp:=X"5B";
							sec_reg:=X"7";
							
						when X"E2"=>					--CMP E
							grp:=X"5C";
							sec_reg:=X"6";
						when X"E3"=>
							grp:=X"5C";
							sec_reg:=X"8";
						when X"E4"=>
							grp:=X"5C";
							sec_reg:=X"9";
						when X"E5"=>
							grp:=X"5C";
							sec_reg:=X"A";
						when X"E6"=>
							grp:=X"5C";
							sec_reg:=X"B";
						when X"E7"=>
							grp:=X"5C";
							sec_reg:=X"C";
						when X"E8"=>
							grp:=X"5C";
							sec_reg:=X"D";
						when X"E9"=>
							grp:=X"5C";
							sec_reg:=X"7";
						
						when X"EA"=>					--CMP F
							grp:=X"5D";
							sec_reg:=X"8";
						when X"EB"=>
							grp:=X"5D";
							sec_reg:=X"9";
						when X"EC"=>
							grp:=X"5D";
							sec_reg:=X"A";
						when X"ED"=>
							grp:=X"5D";
							sec_reg:=X"B";
						when X"EE"=>
							grp:=X"5D";
							sec_reg:=X"C";
						when X"EF"=>
							grp:=X"5D";
							sec_reg:=X"D";
						when X"F0"=>
							grp:=X"5D";
							sec_reg:=X"7";
							
						when X"F1"=>					--CMP GH
							grp:=X"5E";
							sec_reg:=X"9";
						when X"F2"=>
							grp:=X"5E";
							sec_reg:=X"A";
						when X"F3"=>
							grp:=X"5E";
							sec_reg:=X"B";
						when X"F4"=>
							grp:=X"5E";
							sec_reg:=X"C";
						when X"F5"=>
							grp:=X"5E";
							sec_reg:=X"D";
						when X"F6"=>
							grp:=X"5E";
							sec_reg:=X"7";
							
						when X"F7"=>					--CMP GL
							grp:=X"5F";
							sec_reg:=X"A";
						when X"F8"=>
							grp:=X"5F";
							sec_reg:=X"B";
						when X"F9"=>
							grp:=X"5F";
							sec_reg:=X"C";
						when X"FA"=>
							grp:=X"5F";
							sec_reg:=X"D";
						when X"FB"=>
							grp:=X"5F";
							sec_reg:=X"7";
							
						when X"FC"=>						--CMP HH
							grp:=X"60";
							sec_reg:=X"B";
						when X"FD"=>
							grp:=X"60";
							sec_reg:=X"C";
						when X"FE"=>
							grp:=X"60";
							sec_reg:=X"D";
						when X"FF"=>
							grp:=X"60";	
							sec_reg:=X"7";
						
						when others=>					--INVLID INPUT
						master:="00";
						grp:=X"00";
						sec_reg:=X"0";
					end case;
					
				when X"05" =>
					master:="01";
					case temp_data (7 downto 0) is
						when X"00" =>					--CMP HL
							grp:=X"61";
							sec_reg:=X"C";
						when X"01"=>
							grp:=X"61";
							sec_reg:=X"D";
						when X"02"=>
							grp:=X"61";
							sec_reg:=X"7";
							
						when X"03"=>					--CMP IH
							grp:=X"62";
							sec_reg:=X"D";
						when X"04"=>
							grp:=X"62";
							sec_reg:=X"7";
							
						when X"05"=>					--CMP IL
							grp:=X"63";
							sec_reg:=X"7";
							
						when X"06"=>					--CMI
							grp:=X"64";
							sec_reg:=X"0";
							
						when X"07"=>					--CPP A
							grp:=X"65";
							sec_reg:=X"4";
						when X"08"=>
							grp:=X"65";
							sec_reg:=X"6";
						when X"09"=>
							grp:=X"65";
							sec_reg:=X"9";
						when X"0A"=>
							grp:=X"65";
							sec_reg:=X"B";
						when X"0B"=>
							grp:=X"65";
							sec_reg:=X"D";
						when X"0C"=>
							grp:=X"65";
							sec_reg:=X"F";
							
						when X"0D"=>					--CPP C
							grp:=X"66";
							sec_reg:=X"6";
						when X"0E"=>
							grp:=X"66";
							sec_reg:=X"9";
						when X"0F"=>
							grp:=X"66";
							sec_reg:=X"B";
						when X"10"=>
							grp:=X"66";
							sec_reg:=X"D";
						when X"11"=>
							grp:=X"66";
							sec_reg:=X"F";
							
						when X"12"=>					--CPP E
							grp:=X"67";
							sec_reg:=X"9";
						when X"13"=>
							grp:=X"67";
							sec_reg:=X"B";
						when X"14"=>
							grp:=X"67";
							sec_reg:=X"D";
						when X"15"=>
							grp:=X"67";
							sec_reg:=X"F";
							
						when X"16"=>					--CPP G
							grp:=X"68";
							sec_reg:=X"B";
						when X"17"=>
							grp:=X"68";
							sec_reg:=X"D";
						when X"18"=>
							grp:=X"68";
							sec_reg:=X"F";
							
						when X"19"=>					--CPP H
							grp:=X"69";
							sec_reg:=X"D";
						when X"1A"=>
							grp:=X"69";
							sec_reg:=X"F";
							
						when X"1B"=>					--CPP I
							grp:=X"6A";
							sec_reg:=X"F";
							
						when X"1C"=>					--DAD
							grp:=X"6B";
							sec_reg:=X"4";
						when X"1D"=>
							grp:=X"6B";
							sec_reg:=X"6";
						when X"1E"=>
							grp:=X"6B";
							sec_reg:=X"9";
						when X"1F"=>
							grp:=X"6B";
							sec_reg:=X"B";
						when X"20"=>
							grp:=X"6B";
							sec_reg:=X"F";
							
						when X"21"=>					--SBD
							grp:=X"6C";
							sec_reg:=X"4";
						when X"22"=>
							grp:=X"6C";
							sec_reg:=X"6";
						when X"23"=>
							grp:=X"6C";
							sec_reg:=X"9";
						when X"24"=>
							grp:=X"6C";
							sec_reg:=X"B";
						when X"25"=>
							grp:=X"6C";
							sec_reg:=X"F";
							
						when X"26"=>					--SBDI
							grp:=X"6D";
							sec_reg:=X"4";
						when X"27"=>
							grp:=X"6D";
							sec_reg:=X"6";
						when X"28"=>
							grp:=X"6D";
							sec_reg:=X"9";
						when X"29"=>
							grp:=X"6D";
							sec_reg:=X"B";
						when X"2A"=>
							grp:=X"6D";
							sec_reg:=X"F";
							
						when X"2B"=>					--CMPS
							grp:=X"6E";
							sec_reg:=X"0";

						when X"2C"=>					--ADDS
							grp:=X"6F";
							sec_reg:=X"0";

						when X"2D"=>					--ADSD
							grp:=X"70";
							sec_reg:=X"0";
				
						when others=>					--INVLID INPUT
							master:="00";
							grp:=X"00";
							sec_reg:=X"0";
					end case;				
				
				when X"07" =>
					master:="11";
					case temp_data (7 downto 0) is
						when X"00" =>					--CALL
							grp:=X"00";
							sec_reg:=X"0";
						
						when X"01"=>					--CC
							grp:=X"01";
							sec_reg:=X"0";
						
						when X"02"=>					--CNC
							grp:=X"02";
							sec_reg:=X"0";
							
						when X"03"=>					--CZ
							grp:=X"03";
							sec_reg:=X"0";
						
						when X"04"=>					--CNZ
							grp:=X"04";
							sec_reg:=X"0";
							
						when X"05"=>					--CEP
							grp:=X"05";
							sec_reg:=X"0";
							
						when X"06"=>					--COP
							grp:=X"06";
							sec_reg:=X"0";
							
						when X"07"=>					--CP
							grp:=X"07";
							sec_reg:=X"0";
							
						when X"08"=>					--CN
							grp:=X"08";
							sec_reg:=X"0";
							
						when X"09"=>					--CE
							grp:=X"09";
							sec_reg:=X"0";
							
						when X"0A"=>					--CNE
							grp:=X"0A";
							sec_reg:=X"0";
							
						when X"0B"=>					--CG
							grp:=X"0B";
							sec_reg:=X"0";
							
						when X"0C"=>					--CL
							grp:=X"0C";
							sec_reg:=X"0";
							
						when X"0D"=>					--RET
							grp:=X"0D";
							sec_reg:=X"0";
							
						when X"0E"=>					--RC
							grp:=X"0E";
							sec_reg:=X"0";
							
						when X"0F"=>					--RNC
							grp:=X"0F";
							sec_reg:=X"0";
							
						when X"10"=>					--RZ
							grp:=X"10";
							sec_reg:=X"0";
							
						when X"11"=>					--RNZ
							grp:=X"11";
							sec_reg:=X"0";
							
						when X"12"=>					--REP
							grp:=X"12";
							sec_reg:=X"0";
							
						when X"13"=>					--ROP
							grp:=X"13";
							sec_reg:=X"0";
							
						when X"14"=>					--RP
							grp:=X"14";
							sec_reg:=X"0";
							
						when X"15"=>					--RN
							grp:=X"15";
							sec_reg:=X"0";
							
						when X"16"=>					--RE
							grp:=X"16";
							sec_reg:=X"0";
							
						when X"17"=>					--RNE
							grp:=X"17";
							sec_reg:=X"0";
							
						when X"18"=>					--RG
							grp:=X"18";
							sec_reg:=X"0";
							
						when X"19"=>					--RL
							grp:=X"19";
							sec_reg:=X"0";
							
						when X"1D"=>					--JMP
							grp:=X"1A";
							sec_reg:=X"0";
							
						when X"1E"=>					--JC
							grp:=X"1B";
							sec_reg:=X"0";
							
						when X"1F"=>					--JNC
							grp:=X"1C";
							sec_reg:=X"0";
							
						when X"20"=>					--JZ
							grp:=X"1D";
							sec_reg:=X"0";
							
						when X"21"=>					--JNZ
							grp:=X"1E";
							sec_reg:=X"0";
							
						when X"22"=>					--JEP
							grp:=X"1F";
							sec_reg:=X"0";
							
						when X"23"=>					--JOP
							grp:=X"20";
							sec_reg:=X"0";
							
						when X"24"=>					--JP
							grp:=X"21";
							sec_reg:=X"0";
							
						when X"25"=>					--JN
							grp:=X"22";
							sec_reg:=X"0";
							
						when X"26"=>					--JE
							grp:=X"23";
							sec_reg:=X"0";
							
						when X"27"=>					--JNE
							grp:=X"24";
							sec_reg:=X"0";

						when X"28"=>					--JG
							grp:=X"25";
							sec_reg:=X"0";
							
						when X"29"=>					--JL
							grp:=X"26";
							sec_reg:=X"0";
							
						when X"2A"=>					--IN
							master:="00";
							grp:=X"2D";
							sec_reg:=X"0";
							
						when X"2B"=>					--OUT
							master:="00";
							grp:=X"2E";
							sec_reg:=X"0";

						when others=>					--INVLID INPUT
							master:="00";
							grp:=X"00";
							sec_reg:=X"0";
						end case;				
			
					when others =>							--INVALID INPUT
						master:="00";
						grp:=X"00";
						sec_reg:=X"0";
				end case;
			
				--end of precoding
				
					case data_opc is
					
						when '1'=>
						--if decoder expects a data
							pre_data<=temp_data;
							--data moved to the decoder
						
						when '0'=>
						--if decoder expects an opcode
				
							pre_data(3 downto 0)<=sec_reg;
							pre_data(11 downto 4)<=grp;
							pre_data(13 downto 12)<=master;
							pre_data(15 downto 14)<="00";
							pre_end<='1';
							
						when others=>
							NULL;
						
					end case;
					--data/opcode loaded to the decoder
		
			else
				--if P.HOLD is valid
				pre_end<='0';
			end if;
		end if;
	--	else
	--		sync_flag<='0';
	--	end if;
	--	end if;
			
		if(clock='0' and clock'event) then
			--if(sync='0') then
				--sync_flag<='0';
		--	else
			if (read_flag='0') then
				
				read_out<='0';
				read_flag:='1';
				
				case in_data_pointer is
					when "00" =>
						data_array(0):=ext_data;
						
					when "01" =>
						data_array(1):=ext_data;
						
					when "10" =>
						data_array(2):=ext_data;
						
					when "11" =>
						data_array(3):=ext_data;
						
					when others=>
						NULL;
				end case;
				--reads the data
				
				t16:=int_out_add(16);
				in_data_pointer:=in_data_pointer+'1';
				int_out_add:=int_out_add+'1';
				
				if ((int_out_add(16) xor t16)='1') then
					ale_flag<='1';
				else
					NULL;
				end if;
				
			else
				read_out<='1';
			end if;
		end if;
	--	end if;
	end if;
end process;

output_blk:process(clock,reset_in)	
	
	variable data: std_logic_vector (15 downto 0) :=X"0000";
	variable address: std_logic_vector (31 downto 0) :=X"00000000";

begin
		
	if(reset_in='0') then
		
			data:=X"0000";
			address:=X"00000000";
			out_proc_end<='0';
			write_out<='1';
			writeout<='1';
			ale<='Z';
			count<="00";
			io_m_out<='Z';
			ext_data<="ZZZZZZZZZZZZZZZZ";
			ext_add<="ZZZZZZZZZZZZZZZZ";
			--resets data
			
	else
		address := out_add;	--enter the output address in the internal address reg
		data := out_blk_data;	--enter the output data in the internal register
		
		case out_blk_en is
		
			when '0' =>
				--initialise the process end signal to '0' and write signal to '1'
				out_proc_end<='0';
				write_out<='1';
				ale<='Z';
				count<="00";
				io_m_out<='Z';
				ext_data<="ZZZZZZZZZZZZZZZZ";
				ext_add<="ZZZZZZZZZZZZZZZZ";
			
			when '1'=>
				
				write_out<='0';		--total address is updated
				if(clock='1' and clock'event) then	
		
				case count is
					
					when "00" =>
						count<="01";
						
					when "01" =>	--writes the address to the external
						ale<='1';
						ext_data<=address(31 downto 16);
						ext_add<=address(15 downto 0);
						io_m_out<=io_m_in;
						count<="10";
					
					when "10" =>	--writes the data to the external
						ale<='0';
						ext_add<=address(15 downto 0);
						ext_data<=data;
						writeout<='0';
						count<="11";
					
					when "11" =>
						out_proc_end<='1';
						writeout<='1';
						count<="00";
						
					when others=>
						NULL;
					
				end case;
				end if;
										
			when others=>
				NULL;
		end case;
		
	end if;
end process;

alu:process(alu_en, reset_in, data_a, data_b)

	variable rdata: std_logic_vector(21 downto 0):="0000000000000000000000";
	variable code: std_logic_vector(4 downto 0):="00000";
	variable td: std_logic:='0';
	
	begin
	
	if(reset_in='0') then		--reset in from decoder
		rdata:="0000000000000000000000";
		code:="00000";
		td:='0';
		alu_result<="0000000000000000000000";
		alu_proc_end<='0';
	else
	
	if (alu_en='1') then
	
		if(alu_instr_sel="10000" or alu_instr_sel="01111") then	--checks if the opcode is ADD or SUB
			code:="01111";
			rdata(15 downto 0):=data_b+carry_out;
		else	
			code:=alu_instr_sel;
		end if;
		
		case alu_instr_sel(4) is
			when '0'=>
				rdata:=rdata;
			when '1'=>
				rdata:=not rdata;
				rdata:=rdata+'1';
				td:=rdata(4);
			when others=>
				NULL;
		end case;
	
		case code is
		
			when "00000" =>	--NOP
				NULL;
			
			when "00001" =>	--RCR
			
				rdata(16 downto 1):=data_a;
				rdata(0):=carry_out;
			
			when "00010" =>	--RRC
			
				rdata(16 downto 1):=data_a;
				rdata(0):=data_a(15);
			
			when "00011" =>	--RRA
			
				rdata(15 downto 1):=data_a(14 downto 0);
				rdata(0):=data_a(15);
				rdata(16):=carry_out;
			
			when "00100" =>	--LCR
			
				rdata(14 downto 0):=data_a(15 downto 1);
				rdata(15):=carry_out;
				rdata(16):=data_a(0);
			
			when "00101" =>	--LRC
				
				rdata(14 downto 0):=data_a(15 downto 1);
				rdata(15):=data_a(0);
				rdata(16):=data_a(0);
			
			when "00110" =>	--LRA
			
				rdata(14 downto 0):=data_a(15 downto 1);
				rdata(15):=data_a(0);
				rdata(16):=carry_out;
			
			when "00111"  =>	--SRC
			
				rdata(15 downto 1):=data_a(14 downto 0);
				rdata(0):=carry_out;
				rdata(16):=carry_out;
			
			when "01000" =>	--SHR
			
				rdata(15 downto 1):=data_a(14 downto 0);
				rdata(0):='0';
				rdata(16):=carry_out;
			
			when "01001" =>	--SLC
				
				rdata(14 downto 0):=data_a(15 downto 1);
				rdata(15):=carry_out;
				rdata(16):=carry_out;
			
			when "01010" =>	--SHL
			
				rdata(14 downto 0):=data_a(15 downto 1);
				rdata(15):='0';
				rdata(16):=carry_out;
			
			when "01011" =>	--NOT
			
				rdata(15 downto 0):=not(data_a);
				rdata(16):=carry_out;
			
			when "01100" =>	--AND
				
				rdata(15 downto 0):=data_a and data_b;
				rdata(16):=carry_out;
				
			when "01101" =>	--OR
			
				rdata(15 downto 0):=data_a or data_b;
				rdata(16):=carry_out;
			
			when "01110" =>	--XOR
				
				rdata(15 downto 0):=data_a xor data_b;
				rdata(16):=carry_out;
			
			when "01111" =>	--ADD or SUB
			
				rdata(16 downto 0):='0'&data_a+rdata(16 downto 0);
				
			when others =>
				
				NULL;
		
		end case;
		
		rdata(17):=rdata(16);
		rdata(18):=not(rdata(15) xor rdata(14) xor rdata(13) xor rdata(12) xor rdata(11) xor rdata(10) xor rdata(9)
				xor rdata(8) xor rdata(7) xor rdata(6) xor rdata(5) xor rdata(4) xor rdata(3) xor rdata(2)
				xor rdata(1)  xor rdata(0));
		rdata(19):=not((data_a(4) xnor td) xor rdata(4));
		rdata(20):=not(rdata(15) or rdata(14) or rdata(13) or rdata(12) or rdata(11) or rdata(10) or rdata(9)
				or rdata(8) or rdata(7) or rdata(6) or rdata(5) or rdata(4) or rdata(3) or rdata(2)
				or rdata(1) or rdata(0));
		rdata(21):=rdata(15);
		alu_result<=rdata;
	else
		NULL;
	end if;
	alu_proc_end<=alu_en;
	end if;
end process;


reg_block:process(reset_in, reg_read, reg_write)
begin
	
	if (reset_in='0') then
	--reset is enabled by the decoder
		
		data_array(0)<=X"0000";		--reset A
		data_array(1)<=X"0000";		--reset B
		data_array(2)<=X"0000";		--reset C
		data_array(3)<=X"0000";		--reset D
		data_array(4)<=X"0000";		--reset E
		data_array(5)<=X"0000";		--reset F
		data_array(6)<=X"0000";		--reset GH
		data_array(7)<=X"0000";		--reset GL
		data_array(8)<=X"0000";		--reset HH
		data_array(9)<=X"0000";		--reset HL
		data_array(10)<=X"0000";	--reset IH
		data_array(11)<=X"0000";	--reset IL
		reg_proc_end<='0';			--reset reg. proc. end.
		reg_read_data<=X"0000";		--reset reg. read data
		
	else
		
		case reg_read is
			
			when '1' =>
			
				case reg_sel is
					
					when X"1"=>	--read A
					
						reg_read_data<=data_array(0);
					
					when X"2"=>	--read B
					
						reg_read_data<=data_array(1);
					
					when X"3"=>	--read C
					
						reg_read_data<=data_array(2);
					
					when X"4"=>	--read D
					
						reg_read_data<=data_array(3);
					
					when X"5"=>	--read E
					
						reg_read_data<=data_array(4);
					
					when X"6"=>	--read F
					
						reg_read_data<=data_array(5);
					
					when X"8"=>	--read GH
					
						reg_read_data<=data_array(6);
					
					when X"9"=>	--read GL
					
						reg_read_data<=data_array(7);
					
					when X"A"=>	--read HH
					
						reg_read_data<=data_array(8);
					
					when X"B"=>	--read HL
					
						reg_read_data<=data_array(9);
					
					when X"C"=>	--read IH
					
						reg_read_data<=data_array(10);
					
					when X"D"=>	--read IL
					
						reg_read_data<=data_array(11);
					
					when others=>	
						
						NULL;
				end case;
			
			--reg_proc_end<='1';
			
			when others=>
				
				NULL;
				--if(reg_write='0') then
				--	reg_proc_end<=reg_read or reg_write;
				--end if;
				
		end case;
		
		case reg_write is
			
			when '1' =>
			
				case reg_sel is
					
					when X"1"=>	--write A
					
						data_array(0)<=reg_write_data;
					
					when X"2"=>	--write B
					
						data_array(1)<=reg_write_data;
					
					when X"3"=>	--write C
					
						data_array(2)<=reg_write_data;
					
					when X"4"=>	--write D
					
						data_array(3)<=reg_write_data;
					
					when X"5"=>	--write E
					
						data_array(4)<=reg_write_data;
					
					when X"6"=>	--write F
					
						data_array(5)<=reg_write_data;
					
					when X"8"=>	--write GH
					
						data_array(6)<=reg_write_data;
					
					when X"9"=>	--write GL
					
						data_array(7)<=reg_write_data;
					
					when X"A"=>	--write HH
					
						data_array(8)<=reg_write_data;
					
					when X"B"=>	--write HL
					
						data_array(9)<=reg_write_data;
					
					when X"C"=>	--write IH
					
						data_array(10)<=reg_write_data;
					
					when X"D"=>	--write IL
					
						data_array(11)<=reg_write_data;
					
					when others=>	
						
						NULL;
				end case;
			
			when others=>
				
				NULL;
				
		end case;
	
	reg_proc_end<=reg_read or reg_write;
	end if;
end process;


decoder:process(clock, reset_in, step, step_count)
	
	variable temp1, temp2, opc, flag: std_logic_vector(15 downto 0):=X"0000";
	variable ltemp, sp: std_logic_vector(31 downto 0):=X"00000000";
	variable tc, alu_end, reg_end, out_end, pre_work, sf: std_logic:='0';
	variable se: std_logic:='1';

begin

if(reset_in='0') then	--MPU is reset
	
	trap_ack<='0';
	rst7_5_ack<='0';
	rst6_5_ack<='0';
	rst5_5_ack<='0';
	interr_ack<='0';
	sync_flag<='1';
	io_m_in<='0';
	alu_end:='0';
	out_blk_en<='0';
	reg_read<='0';
	reg_write<='0';
	interr_mask_reg_data<=X"00";
	interr_mask_reg_sel<='0';
	lock_out<='0';
	interr_read_reg_sel<='0';
	clr_inter<='0';
	temp1:=X"0000";
	temp2:=X"0000";
	opc:=X"0000";
	flag:=X"0000";
	flag(9):='1';
	ltemp:=X"00000000";
	sp:=X"00000000";
	step<="000";
	step_count<="000";
	sync<='1';
	data_opc<='0';
	phold<='0';
	pcup<='0';
	carry_out<='0';
	alu_en<='0';
	out_blk_en<='0';
	reg_read<='0';
	reg_write<='0';
	add_over<="00";
	reg_sel<="0000";
	alu_instr_sel<="00000";
	data_a<=X"0000";
	data_b<=X"0000";
	reg_write_data<=X"0000";
	out_blk_data<=X"0000";
	out_add<=X"00000000";
	
else

if(sync='1') then	--sync mode

	--pre_work:=phold xor pre_end;
if(clock='0' and clock'event) then
if(sync_flag='0') then
	sync_flag<='1';
else
if((phold='1' and pre_end='0') or phold='0') then

case step_count is
	when "000"=>--step count is 0
		case step is
			when "000"=>--step 0
				io_m_in<='0';
				if(tr_ap='1') then
					phold<='1';
					ltemp:=X"00000048";
					flag(9):='0';
					opc(15 downto 0):=X"3000";
					trap_ack<='1';
					step<="011";
				
				else	if(rst75='1') then
					phold<='1';
					ltemp:=X"00000078";
					flag(9):='0';
					opc(15 downto 0):=X"3000";
					rst7_5_ack<='1';
					step<="011";
				
				else	if (rst65='1') then
					phold<='1';
					ltemp:=X"00000068";
					flag(9):='0';
					opc(15 downto 0):=X"3000";
					rst6_5_ack<='1';
					step<="011";
				
				else	if(rst55='1') then
					phold<='1';
					ltemp:=X"00000058";
					flag(9):='0';
					opc(15 downto 0):=X"3000";
					rst5_5_ack<='1';
					step<="011";
				else 
				
				opc:=pre_data;
				pcup<='1';
				case opc(13 downto 12) is
					when "00"=>	--Master 0
						case opc(11 downto 4) is
							when X"00"=>		--NOP
								phold<='1';
								step<="001";
							when X"01"=>		--MOV A
								phold<='1';
								sync<='0';
								step<="000";
							when X"02"=>		--MOV B
								phold<='1';
								sync<='0';
								step<="000";
							when X"03"=>		--MOV C
								phold<='1';
								sync<='0';
								step<="000";
							when X"04"=>		--MOV D
								phold<='1';
								sync<='0';
								step<="000";
							when X"05"=>		--MOV E
								phold<='1';
								sync<='0';
								step<="000";
							when X"06"=>		--MOV F
								phold<='1';
								sync<='0';
								step<="000";
							when X"07"=>		--MOV GH
								phold<='1';
								sync<='0';
								step<="000";
							when X"08"=>		--MOV GL
								phold<='1';
								sync<='0';
								step<="000";
							when X"09"=>		--MOV HH
								phold<='1';
								sync<='0';
								step<="000";
							when X"0A"=>		--MOV HL
								phold<='1';
								sync<='0';
								step<="000";
							when X"0B"=>		--MOV IH
								phold<='1';
								sync<='0';
								step<="000";
							when X"0C"=>		--MOV IL
								phold<='1';
								sync<='0';
								step<="000";
							when X"0D"=>		--MOV M
								phold<='1';
								sync<='0';
								step<="000";
							when X"0E"=>		--MVI
								data_opc<='1';
								step<="001";
							when X"0F"=>		--LDA
								data_opc<='1';
								step<="001";
							when X"10"=>		--LDAX
								phold<='1';
								sync<='0';
								step<="000";
							when X"11"=>		--LXI
								data_opc<='1';
								step<="001";
							when X"12"=>		--MOVS
								data_opc<='1';
								step<="001";
							when X"13"=>		--POP
								if(opc(3 downto 0)=X"8" or opc(3 downto 0)=X"A" or opc(3 downto 0)=X"C") then
									opc(11 downto 4):=X"2A";
								else
									NULL;
								end if;
								step<="001";
								phold<='1';
							when X"14"=>		--PUSH
								if(opc(3 downto 0)=X"8" or opc(3 downto 0)=X"A" or opc(3 downto 0)=X"C") then
									opc(11 downto 4):=X"2B";
								else if(opc(3 downto 0)=X"E") then
										opc(11 downto 4):=X"2C";
									else
										NULL;
									end if;
								end if;
								step<="000";
								phold<='1';
								sync<='0';
							when X"15"=>		--PUSM
								phold<='1';
								sync<='0';
								step<="000";
							when X"16"=>		--POPM
								phold<='1';
								step<="001";
							when X"17"=>		--XCHG A
								phold<='1';
								sync<='0';
								step<="000";
							when X"18"=>		--XCHG B
								phold<='1';
								sync<='0';
								step<="000";
							when X"19"=>		--XCHG C
								phold<='1';
								sync<='0';
								step<="000";
							when X"1A"=>		--XCHG D
								phold<='1';
								sync<='0';
								step<="000";
							when X"1B"=>		--XCHG E
								phold<='1';
								sync<='0';
								step<="000";
							when X"1C"=>		--XCHG F
								phold<='1';
								sync<='0';
								step<="000";
							when X"1D"=>		--XCHG GH
								phold<='1';
								sync<='0';
								step<="000";
							when X"1E"=>		--XCHG GL
								phold<='1';
								sync<='0';
								step<="000";
							when X"1F"=>		--XCHG HH
								phold<='1';
								sync<='0';
								step<="000";
							when X"20"=>		--XCHG HL
								phold<='1';
								sync<='0';
								step<="000";
							when X"21"=>		--XCHG IH
								phold<='1';
								sync<='0';
								step<="000";
							when X"22"=>		--XCHP A
								phold<='1';
								sync<='0';
								step<="000";
							when X"23"=>		--XCHP C
								phold<='1';
								sync<='0';
								step<="000";
							when X"24"=>		--XCHP E
								phold<='1';
								sync<='0';
								step<="000";
							when X"25"=>		--XCHP G
								phold<='1';
								sync<='0';
								step<="000";
							when X"26"=>		--XCHP H
								phold<='1';
								sync<='0';
								step<="000";
							when X"27"=>		--XCHP I
								phold<='1';
								sync<='0';
								step<="000";
							when X"28"=>		--STA
								data_opc<='1';
								step<="001";
							when X"29"=>		--STAX
								phold<='1';
								sync<='0';
								step<="000";
							when X"2D"=>		--IN
								data_opc<='1';
								step<="001";
							when X"2E"=>		--OUT
								data_opc<='1';
								step<="001";
							when others=>
								NULL;
						end case;
					
					
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								phold<='1';
								sync<='0';
							when X"01"=>		--ADC
								phold<='1';
								sync<='0';
							when X"02"=>		--ADI
								data_opc<='1';
								step<="001";
							when X"03"=>		--ACI
								data_opc<='1';
								step<="001";
							when X"04"=>		--ADM
								data_opc<='1';
								step<="001";
							when X"05"=>		--ACM
								data_opc<='1';
								step<="001";
							when X"06"=>		--SUB
								phold<='1';
								sync<='0';
							when X"07"=>		--SBB
								phold<='1';
								sync<='0';
							when X"08"=>		--SUI
								data_opc<='1';
								step<="001";
							when X"09"=>		--SBI
								data_opc<='1';
								step<="001";
							when X"0A"=>		--SMU
								data_opc<='1';
								step<="001";
							when X"0B"=>		--SBM
								data_opc<='1';
								step<="001";
							when X"0C"=>		--SUBA
								phold<='1';
								sync<='0';
							when X"0D"=>		--SBBA
								phold<='1';
								sync<='0';
							when X"0E"=>		--SUIA
								data_opc<='1';
								step<="001";
							when X"0F"=>		--SBIA
								data_opc<='1';
								step<="001";
							when X"10"=>		--SMUA
								data_opc<='1';
								step<="001";
							when X"11"=>		--SBMA
								data_opc<='1';
								step<="001";
							when X"12"=>		--MUL
								phold<='1';
								sync<='0';
							when X"13"=>		--MUI
								data_opc<='1';
								step<="001";
							when X"14"=>		--MUM
								data_opc<='1';
								step<="001";
							when X"15"=>		--DIV
								phold<='1';
								sync<='0';
							when X"16"=>		--DVI
								data_opc<='1';
								step<="001";
							when X"17"=>		--DVM
								data_opc<='1';
								step<="001";
							when X"18"=>		--DIVA
								phold<='1';
								sync<='0';
							when X"19"=>		--DVIA
								data_opc<='1';
								step<="001";
							when X"1A"=>		--DVMA
								data_opc<='1';
								step<="001";
							when X"1B"=>		--INR
								phold<='1';
								sync<='0';
							when X"1C"=>		--INX
								phold<='1';
								sync<='0';
							when X"1D"=>		--DCR
								phold<='1';
								sync<='0';
							when X"1E"=>		--DCX
								phold<='1';
								sync<='0';
							when X"1F"=>		--ANA
								phold<='1';
								sync<='0';
							when X"20"=>		--ANR B
								phold<='1';
								sync<='0';
							when X"21"=>		--ANR C
								phold<='1';
								sync<='0';
							when X"22"=>		--ANR D
								phold<='1';
								sync<='0';
							when X"23"=>		--ANR E
								phold<='1';
								sync<='0';
							when X"24"=>		--ANR F
								phold<='1';
								sync<='0';
							when X"25"=>		--ANR GH
								phold<='1';
								sync<='0';
							when X"26"=>		--ANR GL
								phold<='1';
								sync<='0';
							when X"27"=>		--ANR HH
								phold<='1';
								sync<='0';
							when X"28"=>		--ANR HL
								phold<='1';
								sync<='0';
							when X"29"=>		--ANR IH
								phold<='1';
								sync<='0';
							when X"2A"=>		--ANR IL
								phold<='1';
								sync<='0';
							when X"2B"=>		--ANI
								data_opc<='1';
								step<="001";
							when X"2C"=>		--ANM
								data_opc<='1';
								step<="001";
							when X"2D"=>		--ORA
								phold<='1';
								sync<='0';
							when X"2E"=>		--ORR B
								phold<='1';
								sync<='0';
							when X"2F"=>		--ORR C
								phold<='1';
								sync<='0';
							when X"30"=>		--ORR D
								phold<='1';
								sync<='0';
							when X"31"=>		--ORR E
								phold<='1';
								sync<='0';
							when X"32"=>		--ORR F
								phold<='1';
								sync<='0';
							when X"33"=>		--ORR GH
								phold<='1';
								sync<='0';
							when X"34"=>		--ORR GL
								phold<='1';
								sync<='0';
							when X"35"=>		--ORR HH
								phold<='1';
								sync<='0';
							when X"36"=>		--ORR HL
								phold<='1';
								sync<='0';
							when X"37"=>		--ORR IH
								phold<='1';
								sync<='0';
							when X"38"=>		--ORR IL
								phold<='1';
								sync<='0';
							when X"39"=>		--ORI
								data_opc<='1';
								step<="001";
							when X"3A"=>		--ORM
								data_opc<='1';
								step<="001";
							when X"3B"=>		--XORA
								phold<='1';
								sync<='0';
							when X"3C"=>		--XORR B
								phold<='1';
								sync<='0';
							when X"3D"=>		--XORR C
								phold<='1';
								sync<='0';
							when X"3E"=>		--XORR D
								phold<='1';
								sync<='0';
							when X"3F"=>		--XORR E
								phold<='1';
								sync<='0';
							when X"40"=>		--XORR F
								phold<='1';
								sync<='0';
							when X"41"=>		--XORR GH
								phold<='1';
								sync<='0';
							when X"42"=>		--XORR GL
								phold<='1';
								sync<='0';
							when X"43"=>		--XORR HH
								phold<='1';
								sync<='0';
							when X"44"=>		--XORR HL
								phold<='1';
								sync<='0';
							when X"45"=>		--XORR IH
								phold<='1';
								sync<='0';
							when X"46"=>		--XORR IL
								phold<='1';
								sync<='0';
							when X"47"=>		--XORI
								data_opc<='1';
								step<="001";
							when X"48"=>		--XORM
								data_opc<='1';
								step<="001";
							when X"49"=>		--NOT
								phold<='1';
								sync<='0';
							when X"4A"=>		--NOA
								phold<='1';
								sync<='0';
							when X"4B"=>		--NOI
								data_opc<='1';
								step<="001";
							when X"4C"=>		--NOM
								data_opc<='1';
								step<="001";
							when X"4D"=>		--RCR
								phold<='1';
								sync<='0';
							when X"4E"=>		--RRC
								phold<='1';
								sync<='0';
							when X"4F"=>		--RRA
								phold<='1';
								sync<='0';
							when X"50"=>		--LCR
								phold<='1';
								sync<='0';
							when X"51"=>		--LRC
								phold<='1';
								sync<='0';
							when X"52"=>		--LRA
								phold<='1';
								sync<='0';
							when X"53"=>		--SHR
								phold<='1';
								sync<='0';
							when X"54"=>		--SRC
								phold<='1';
								sync<='0';
							when X"55"=>		--SHL
								phold<='1';
								sync<='0';
							when X"56"=>		--SLC
								phold<='1';
								sync<='0';
							when X"57"=>		--NEG
								phold<='1';
								sync<='0';
							when X"58"=>		--CPA
								phold<='1';
								sync<='0';
							when X"59"=>		--CMP B
								phold<='1';
								sync<='0';
							when X"5A"=>		--CMP C
								phold<='1';
								sync<='0';
							when X"5B"=>		--CMP D
								phold<='1';
								sync<='0';
							when X"5C"=>		--CMP E
								phold<='1';
								sync<='0';
							when X"5D"=>		--CMP F
								phold<='1';
								sync<='0';
							when X"5E"=>		--CMP GH
								phold<='1';
								sync<='0';
							when X"5F"=>		--CMP GL
								phold<='1';
								sync<='0';
							when X"60"=>		--CMP HH
								phold<='1';
								sync<='0';
							when X"61"=>		--CMP HL
								phold<='1';
								sync<='0';
							when X"62"=>		--CMP IH
								phold<='1';
								sync<='0';
							when X"63"=>		--CMP IL
								phold<='1';
								sync<='0';
							when X"64"=>		--CMI
								data_opc<='1';
								step<="001";
							when X"65"=>		--CPP A
								phold<='1';
								sync<='0';
							when X"66"=>		--CPP C
								phold<='1';
								sync<='0';
							when X"67"=>		--CPP E
								phold<='1';
								sync<='0';
							when X"68"=>		--CPP G
								phold<='1';
								sync<='0';
							when X"69"=>		--CPP H
								phold<='1';
								sync<='0';
							when X"6A"=>		--CPP I
								phold<='1';
								sync<='0';
							when X"6B"=>		--DAD
								phold<='1';
								sync<='0';
							when X"6C"=>		--SBD
								phold<='1';
								sync<='0';
							when X"6D"=>		--SBDI
								phold<='1';
								sync<='0';
							


							when others=>
								NULL;
						end case;
						
						
					when "10"=>	--Master 2
						case opc(11 downto 4) is
							when X"00"=>	--EI
								flag(9):='1';
							when X"01"=>	--DI
								flag(9):='0';
							when X"02"=>	--HLT
								phold<='1';
								step<="001";
							when X"03"=>	--CLI
								clr_inter<='1';
								phold<='1';
								step<="001";
							when X"04"=>	--STI
								data_opc<='1';
								step<="001";
							when X"05"=>	--RDI
								interr_read_reg_sel<='1';
								phold<='1';
								sync<='0';
							when X"06"=>	--LOCK
								lock_out<='1';
							when X"07"=>	--DLCK
								lock_out<='0';
							when X"08"=>	--CLF
								flag:=X"0000";
							when X"09"=>	--CLC
								flag(0):='0';
							when X"0A"=>	--STC
								flag(0):='1';
							when X"0B"=>	--STF
								data_opc<='1';
								step<="001";
								
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								data_opc<='1';
								step<="001";
							when X"01"=>	--CC
								data_opc<='1';
								step<="001";
							when X"02"=>	--CNC
								data_opc<='1';
								step<="001";
							when X"03"=>	--CZ
								data_opc<='1';
								step<="001";
							when X"04"=>	--CNZ
								data_opc<='1';
								step<="001";
							when X"05"=>	--CEP
								data_opc<='1';
								step<="001";
							when X"06"=>	--COP
								data_opc<='1';
								step<="001";
							when X"07"=>	--CP
								data_opc<='1';
								step<="001";
							when X"08"=>	--CN
								data_opc<='1';
								step<="001";
							when X"09"=>	--CE
								data_opc<='1';
								step<="001";
							when X"0A"=>	--CNE
								data_opc<='1';
								step<="001";
							when X"0B"=>	--CG
								data_opc<='1';
								step<="001";
							when X"0C"=>	--CL
								data_opc<='1';
								step<="001";
							when X"0D"=>	--RET
								phold<='1';
								step<="001";
							when X"0E"=>	--RC
								phold<='1';
								step<="001";
							when X"0F"=>	--RNC
								phold<='1';
								step<="001";
							when X"10"=>	--RZ
								phold<='1';
								step<="001";
							when X"11"=>	--RNZ
								phold<='1';
								step<="001";
							when X"12"=>	--REP
								phold<='1';
								step<="001";
							when X"13"=>	--ROP
								phold<='1';
								step<="001";
							when X"14"=>	--RP
								phold<='1';
								step<="001";
							when X"15"=>	--RN
								phold<='1';
								step<="001";
							when X"16"=>	--RE
								data_opc<='1';
								step<="001";
							when X"17"=>	--RNE
								data_opc<='1';
								step<="001";
							when X"18"=>	--RG
								data_opc<='1';
								step<="001";
							when X"19"=>	--RL
								data_opc<='1';
								step<="001";
							when X"1A"=>	--JMP
								data_opc<='1';
								step<="001";
							when X"1B"=>	--JC
								data_opc<='1';
								step<="001";
							when X"1C"=>	--JNC
								data_opc<='1';
								step<="001";
							when X"1D"=>	--JZ
								data_opc<='1';
								step<="001";
							when X"1E"=>	--JNZ
								data_opc<='1';
								step<="001";
							when X"1F"=>	--JEP
								data_opc<='1';
								step<="001";
							when X"20"=>	--JOP
								data_opc<='1';
								step<="001";
							when X"21"=>	--JP
								data_opc<='1';
								step<="001";
							when X"22"=>	--JN
								data_opc<='1';
								step<="001";
							when X"23"=>	--JE
								data_opc<='1';
								step<="001";
							when X"24"=>	--JNE
								data_opc<='1';
								step<="001";
							when X"25"=>	--JG
								data_opc<='1';
								step<="001";
							when X"26"=>	--JL
								data_opc<='1';
								step<="001";
							when X"27"=>	--RST
								if(flag(9)='1') then
									phold<='1';
									interr_ack<='1';
									step<="001";
								else
									NULL;
								end if;
								
								
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				end if;
				end if;
				end if;
				end if;
				
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"00"=>		--NOP
								phold<='0';
								pcup<='0';
								step<="000";
							when X"0E"=>		--MVI
								temp1:=pre_data;
								data_opc<='0';
								phold<='1';
								sync<='0';
								step<="000";
							when X"0F"=>		--LDA
								ltemp(15 downto 0 ):=pre_data;
								step<="010";
							when X"11"=>		--LXI
								temp1:=pre_data;
								step<="010";
							when X"12"=>		--MOVS
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"13"=>		--POP
								sf:='0';
								pcup<='0';
								if(se='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"16"=>		--POPM
								sf:='0';
								pcup<='0';
								if(se='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"28"=>		--STA
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"2A"=>		--POPD
								sf:='0';
								pcup<='0';
								if(se='1' or sp=X"FFFFFFFF") then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"2D"=>		--IN
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"2E"=>		--OUT
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when others=>
								NULL;
							end case;
								
					
					when "01"=>--Master 1
						case opc(11 downto 4) is
							when X"02"=>		--ADI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"03"=>		--ACI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"04"=>		--ADM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"05"=>		--ACM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"08"=>		--SUI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"09"=>		--SBI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0A"=>		--SMU
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0B"=>		--SBM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0E"=>		--SUIA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0F"=>		--SBIA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"10"=>		--SMUA
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"11"=>		--SBMA
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"13"=>		--MUI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"14"=>		--MUM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"16"=>		--DVI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"17"=>		--DVM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"19"=>		--DVIA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"1A"=>		--DVMA
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"2B"=>		--ANI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"2C"=>		--ANM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"39"=>		--ORI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"3A"=>		--ORM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"47"=>		--XORI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"48"=>		--XORM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"4B"=>		--NOI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"4C"=>		--NOM
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"64"=>		--CMI
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
				

							when others=>
								NULL;
						end case;
						
						
					when "10"=>	--Master 2
						case opc(11 downto 4) is
							when X"02"=>	--HLT
								pcup<='0';
							when X"03"=>	--CLI
								pcup<='0';
								clr_inter<='0';
								phold<='0';
								step<="000";
							when X"04"=>	--STI
								pcup<='0';
								temp1:=pre_data;
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"0B"=>	--STF
								pcup<='0';
								flag:=pre_data;
								data_opc<='0';
								phold<='0';
								step<="000";
							
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"01"=>	--CC
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"02"=>	--CNC
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"03"=>	--CZ
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"04"=>	--CNZ
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"05"=>	--CEP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"06"=>	--COP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"07"=>	--CP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"08"=>	--CN
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"09"=>	--CE
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0A"=>	--CNE
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0B"=>	--CG
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0C"=>	--CL
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"0D"=>	--RET
								sf:='0';
								pcup<='0';
								if(se='1' or sp=X"FFFFFFFF") then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"0E"=>	--RC
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(0)='0') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"0F"=>	--RNC
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(0)='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"10"=>	--RZ
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='0') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"11"=>	--RNZ
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"12"=>	--REP
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(2)='0') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"13"=>	--ROP
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(2)='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"14"=>	--RP
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(7)='1') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"15"=>	--RN
								sf:='0';
								pcup<='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(7)='0') then
									phold<='0';
									step<="000";
								else
									out_add<=sp;
									add_over<="01";
									step<="010";
								end if;
							when X"16"=>	--RE
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"17"=>	--RNE
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"18"=>	--RG
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"19"=>	--RL
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"1A"=>	--JMP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"1B"=>	--JC
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"1C"=>	--JNC
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"1D"=>	--JZ
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"1E"=>	--JNZ
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"1F"=>	--JEP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"20"=>	--JOP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"21"=>	--JP
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"22"=>	--JN
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"23"=>	--JE
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"24"=>	--JNE
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"25"=>	--JG
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"26"=>	--JL
								ltemp(15 downto 0):=pre_data;
								step<="010";
							when X"27"=>	--RST
								if(flag(9)='1') then
									pcup<='0';
									case opc(3 downto 0) is
										when X"0"=>
											ltemp:=X"00000000";
										when X"1"=>
											ltemp:=X"00000010";
										when X"2"=>
											ltemp:=X"00000020";
										when X"3"=>
											ltemp:=X"00000030";
										when X"4"=>
											ltemp:=X"00000040";
										when X"5"=>
											ltemp:=X"00000050";
										when X"6"=>
											ltemp:=X"00000060";
										when X"7"=>
											ltemp:=X"00000070";
										when X"8"=>
											ltemp:=X"00000080";
										when X"9"=>
											ltemp:=X"00000090";
										when X"A"=>
											ltemp:=X"000000A0";
										when X"B"=>
											ltemp:=X"000000B0";
										when X"C"=>
											ltemp:=X"000000C0";
										when X"D"=>
											ltemp:=X"000000D0";
										when X"E"=>
											ltemp:=X"000000E0";
										when X"F"=>
											ltemp:=X"000000F0";
										when others=>
											NULL;
									end case;
									flag(9):='0';
									interr_ack<='0';
									opc(15 downto 0):=X"3000";
									step<="011";
								else
									NULL;
								end if;
										
							when others=>
								NULL;
						end case;
			
			
					when others=>
						NULL;
				end case;
			
			when "010"=>	--step 2
				case opc(13 downto 12) is
					when "00"=>	--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"11"=>		--LXI
								temp2:=pre_data;
								data_opc<='0';
								step<="000";
								if(opc(3 downto 0)=X"F") then
									sp(15 downto 0):=temp1;
									sp(31 downto 16):=temp2;
									phold<='0';
								else
									sync<='0';
									phold<='1';
								end if;
							when X"13"=>		--POP
								add_over<="00";
								step<="011";
							when X"16"=>		--POPM
								add_over<="00";
								step<="011";
							when X"28"=>		--STA
								ltemp(31 downto 16):=pre_data;
								sync<='0';
								phold<='1';
								step<="000";
							when X"2A"=>		--POPD
								add_over<="00";
								step<="011";
							when X"2D"=>		--IN
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"2E"=>		--OUT
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when others=>
								NULL;
						end case;
					
					
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"04"=>		--ADM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"05"=>		--ACM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"0A"=>		--SMU
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"0B"=>		--SBM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"10"=>		--SMUA
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"11"=>		--SBMA
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"14"=>		--MUM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"17"=>		--DVM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"1A"=>		--DVMA
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"2C"=>		--ANM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"3A"=>		--ORM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"48"=>		--XORM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
							when X"4C"=>		--NOM
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								out_add<=ltemp;
								add_over<="01";
								pcup<='0';
								step<="011";
				
							
							when others=>
								NULL;
						end case;
						
						
					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"01"=>	--CC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"02"=>	--CNC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"03"=>	--CZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"04"=>	--CNZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"05"=>	--CEP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"06"=>	--COP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"07"=>	--CP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"08"=>	--CN
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"09"=>	--CE
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"0A"=>	--CNE
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"0B"=>	--CG
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"0C"=>	--CL
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"0D"=>	--RET
								add_over<="00";
								step<="011";
							when X"0E"=>	--RC
								add_over<="00";
								step<="011";
							when X"0F"=>	--RNC
								add_over<="00";
								step<="011";
							when X"10"=>	--RZ
								add_over<="00";
								step<="011";
							when X"11"=>	--RNZ
								add_over<="00";
								step<="011";
							when X"12"=>	--REP
								add_over<="00";
								step<="011";
							when X"13"=>	--ROP
								add_over<="00";
								step<="011";
							when X"14"=>	--RP
								add_over<="00";
								step<="011";
							when X"15"=>	--RN
								add_over<="00";
								step<="011";
							when X"1A"=>	--JMP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"1B"=>	--JC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"1C"=>	--JNC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"1D"=>	--JZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"1E"=>	--JNZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"1F"=>	--JEP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"20"=>	--JOP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"21"=>	--JP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"22"=>	--JN
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								step<="011";
							when X"23"=>	--JE
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"24"=>	--JNE
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"25"=>	--JG
								ltemp(31 downto 16):=pre_data;
								step<="011";
							when X"26"=>	--JL
								ltemp(31 downto 16):=pre_data;
								step<="011";
							
							
							when others=>
								NULL;
						end case;
						
							
					when others=>
						NULL;
				end case;
			
			
			when "011"=>	--step 3
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								out_add<=ltemp;
								add_over<="01";
								step<="100";
								pcup<='0';
							when X"13"=>		--POP
								data_opc<='1';
								step<="100";
							when X"16"=>		--POPM
								data_opc<='1';
								step<="100";
							when X"2A"=>		--POPD
								data_opc<='1';
								step<="100";
							when X"2D"=>		--IN
								pcup<='0';
								out_add<=ltemp;
								io_m_in<='1';
								add_over<="01";
								step<="100";
							when others=>
								NULL;
						end case;
							
								
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"04"=>		--ADM
								add_over<="00";
								step<="100";
							when X"05"=>		--ACM
								add_over<="00";
								step<="100";
							when X"0A"=>		--SMU
								add_over<="00";
								step<="100";
							when X"0B"=>		--SBM
								add_over<="00";
								step<="100";
							when X"10"=>		--SMUA
								add_over<="00";
								step<="100";
							when X"11"=>		--SBMA
								add_over<="00";
								step<="100";
							when X"14"=>		--MUM
								add_over<="00";
								step<="100";
							when X"17"=>		--DVM
								add_over<="00";
								step<="100";
							when X"1A"=>		--DVMA
								add_over<="00";
								step<="100";
							when X"2C"=>		--ANM
								add_over<="00";
								step<="100";
							when X"3A"=>		--ORM
								add_over<="00";
								step<="100";
							when X"48"=>		--XORM
								add_over<="00";
								step<="100";
							when X"4C"=>		--NOM
								add_over<="00";
								step<="100";
								
								
							when others=>
								NULL;
						end case;
							
							
					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								pcup<='0';
								trap_ack<='0';
								rst7_5_ack<='0';
								rst6_5_ack<='0';
								rst5_5_ack<='0';
								add_over<="10";
								step<="100";
							when X"01"=>	--CC
								pcup<='0';
								if(flag(0)='1') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"02"=>	--CNC
								pcup<='0';
								if(flag(0)='0') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"03"=>	--CZ
								pcup<='0';
								if(flag(6)='1') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"04"=>	--CNZ
								pcup<='0';
								if(flag(6)='0') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"05"=>	--CEP
								pcup<='0';
								if(flag(2)='1') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"06"=>	--COP
								pcup<='0';
								if(flag(2)='0') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"07"=>	--CP
								pcup<='0';
								if(flag(7)='0') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"08"=>	--CN
								pcup<='0';
								if(flag(7)='1') then
									add_over<="10";
									step<="100";
								else
									data_opc<='0';
									phold<='0';
									step<="000";
								end if;
							when X"09"=>	--CE
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0A"=>	--CNE
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0B"=>	--CG
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0C"=>	--CL
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0D"=>	--RET
								data_opc<='1';
								step<="100";
							when X"0E"=>	--RC
								data_opc<='1';
								step<="100";
							when X"0F"=>	--RNC
								data_opc<='1';
								step<="100";
							when X"10"=>	--RZ
								data_opc<='1';
								step<="100";
							when X"11"=>	--RNZ
								data_opc<='1';
								step<="100";
							when X"12"=>	--REP
								data_opc<='1';
								step<="100";
							when X"13"=>	--ROP
								data_opc<='1';
								step<="100";
							when X"14"=>	--RP
								data_opc<='1';
								step<="100";
							when X"15"=>	--RN
								data_opc<='1';
								step<="100";
							when X"1A"=>	--JMP
								pcup<='0';
								out_add<=ltemp;
								add_over<="01";
								pc_wr<='1';
								step<="100";
							when X"1B"=>	--JC
								pcup<='0';
								if(flag(0)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"1C"=>	--JNC
								pcup<='0';
								if(flag(0)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"1D"=>	--JZ
								pcup<='0';
								if(flag(6)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"1E"=>	--JNZ
								pcup<='0';
								if(flag(6)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"1F"=>	--JEP
								pcup<='0';
								if(flag(2)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"20"=>	--JOP
								pcup<='0';
								if(flag(2)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"21"=>	--JP
								pcup<='0';
								if(flag(7)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"22"=>	--JN
								pcup<='0';
								if(flag(7)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step<="100";
								else
									phold<='0';
									step<="000";
									data_opc<='0';
								end if;
							when X"23"=>	--JE
								temp1:=pre_data;
								sync<='0';
								phold<='1';
								step<="000";
							when X"24"=>	--JNE
								temp1:=pre_data;
								sync<='0';
								phold<='1';
								step<="000";
							when X"25"=>	--JG
								temp1:=pre_data;
								sync<='0';
								phold<='1';
								step<="000";
							when X"26"=>	--JL
								temp1:=pre_data;
								sync<='0';
								phold<='1';
								step<="000";
							
							
							when others=>
								NULL;
						end case;
					
					
					when others=>
						NULL;
				end case;
				
				
			when "100"=>	--step 4
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								add_over<="00";
								step<="101";
							when X"13"=>		--POP
								phold<='0';
								step<="101";
							when X"16"=>		--POPM
								phold<='0';
								step<="101";
							when X"2A"=>		--POPD
								phold<='0';
								step<="101";
							when X"2D"=>		--IN
								add_over<="00";
								step<="101";
							when others=>
								NULL;
						end case;
							
							
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"04"=>		--ADM
								step<="101";
							when X"05"=>		--ACM
								step<="101";
							when X"0A"=>		--SMU
								step<="101";
							when X"0B"=>		--SBM
								step<="101";
							when X"10"=>		--SMUA
								step<="101";
							when X"11"=>		--SBMA
								step<="101";
							when X"14"=>		--MUM
								step<="101";
							when X"17"=>		--DVM
								step<="101";
							when X"1A"=>		--DVMA
								step<="101";
							when X"2C"=>		--ANM
								step<="101";
							when X"3A"=>		--ORM
								step<="101";
							when X"48"=>		--XORM
								step<="101";
							when X"4C"=>		--NOM
								step<="101";
								
							
							when others=>
								NULL;
						end case;
						
							
					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								temp1:=pre_data;
								step<="101";
							when X"01"=>	--CC
								temp1:=pre_data;
								step<="101";
							when X"02"=>	--CNC
								temp1:=pre_data;
								step<="101";
							when X"03"=>	--CZ
								temp1:=pre_data;
								step<="101";
							when X"04"=>	--CNZ
								temp1:=pre_data;
								step<="101";
							when X"05"=>	--CEP
								temp1:=pre_data;
								step<="101";
							when X"06"=>	--COP
								temp1:=pre_data;
								step<="101";
							when X"07"=>	--CP
								temp1:=pre_data;
								step<="101";
							when X"08"=>	--CN
								temp1:=pre_data;
								step<="101";
							when X"0D"=>	--RET
								phold<='0';
								step<="101";
							when X"0E"=>	--RC
								phold<='0';
								step<="101";
							when X"0F"=>	--RNC
								phold<='0';
								step<="101";
							when X"10"=>	--RZ
								phold<='0';
								step<="101";
							when X"11"=>	--RNZ
								phold<='0';
								step<="101";
							when X"12"=>	--REP
								phold<='0';
								step<="101";
							when X"13"=>	--ROP
								phold<='0';
								step<="101";
							when X"14"=>	--RP
								phold<='0';
								step<="101";
							when X"15"=>	--RN
								phold<='0';
								step<="101";
							when X"1A"=>	--JMP
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"1B"=>	--JC
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"1C"=>	--JNC
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"1D"=>	--JZ
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"1E"=>	--JNZ
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"1F"=>	--JEP
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"20"=>	--JOP
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"21"=>	--JP
								add_over<="00";
								pc_wr<='0';
								step<="101";
							when X"22"=>	--JN
								add_over<="00";
								pc_wr<='0';
								step<="101";
							
							
							
							when others=>
								NULL;
						end case;
							
							
					when others=>
						NULL;
				end case;
				
				
			when "101"=>	--step 5
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								step<="110";
							when X"13"=>		--POP
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								if(opc(3 downto 0)=X"E") then
									step_count<="001";
								else
									step_count<="000";
								end if;
								step<="000";
								add_over<="11";
							when X"16"=>		--POPM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"2A"=>		--POPD
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"2D"=>		--IN
								data_opc<='1';
								step<="110";
							when others=>
								NULL;
						end case;
							
							
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"04"=>		--ADM
								phold<='0';
								step<="110";
							when X"05"=>		--ACM
								phold<='0';
								step<="110";
							when X"0A"=>		--SMU
								phold<='0';
								step<="110";
							when X"0B"=>		--SBM
								phold<='0';
								step<="110";
							when X"10"=>		--SMUA
								phold<='0';
								step<="110";
							when X"11"=>		--SBMA
								phold<='0';
								step<="110";
							when X"14"=>		--MUM
								phold<='0';
								step<="110";
							when X"17"=>		--DVM
								phold<='0';
								step<="110";
							when X"1A"=>		--DVMA
								phold<='0';
								step<="110";
							when X"2C"=>		--ANM
								phold<='0';
								step<="110";
							when X"3A"=>		--ORM
								phold<='0';
								step<="110";
							when X"48"=>		--XORM
								phold<='0';
								step<="110";
							when X"4C"=>		--NOM
								phold<='0';
								step<="110";
								
								
							when others=>
								NULL;
						end case;
						
						
					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"01"=>	--CC
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"02"=>	--CNC
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"03"=>	--CZ
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"04"=>	--CNZ
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"05"=>	--CEP
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"06"=>	--COP
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"07"=>	--CP
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"08"=>	--CN
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0D"=>	--RET
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"0E"=>	--RC
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"0F"=>	--RNC
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"10"=>	--RZ
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"11"=>	--RNZ
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"12"=>	--REP
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"13"=>	--ROP
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"14"=>	--RP
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"15"=>	--RN
								ltemp(15 downto 0):=pre_data;
								step<="110";
							when X"1A"=>	--JMP
								data_opc<='0';
								step<="110";
							when X"1B"=>	--JC
								data_opc<='0';
								step<="110";
							when X"1C"=>	--JNC
								data_opc<='0';
								step<="110";
							when X"1D"=>	--JZ
								data_opc<='0';
								step<="110";
							when X"1E"=>	--JNZ
								data_opc<='0';
								step<="110";
							when X"1F"=>	--JEP
								data_opc<='0';
								step<="110";
							when X"20"=>	--JOP
								data_opc<='0';
								step<="110";
							when X"21"=>	--JP
								data_opc<='0';
								step<="110";
							when X"22"=>	--JN
								data_opc<='0';
								step<="110";
							
									
							
							when others=>
								NULL;
						end case;
						
						
					when others=>
						NULL;
				end case;
				
				
			when "110"=>	--step 6
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								phold<='0';
								step<="111";
							when X"2D"=>		--IN
								phold<='0';
								step<="111";
							when others=>
								NULL;
						end case;
											
							
					when "01"=>	--Master 1
						case opc(11 downto 4) is
							when X"04"=>		--ADM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"05"=>		--ACM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"0A"=>		--SMU
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"0B"=>		--SBM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"10"=>		--SMUA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"11"=>		--SBMA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"14"=>		--MUM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"17"=>		--DVM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"1A"=>		--DVMA
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"2C"=>		--ANM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"3A"=>		--ORM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"48"=>		--XORM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
							when X"4C"=>		--NOM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								add_over<="11";
								data_opc<='0';
								step<="000";
								
								
							when others=>
								NULL;
						end case;
						
						
					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"0D"=>	--RET
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0E"=>	--RC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"0F"=>	--RNC
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"10"=>	--RZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"11"=>	--RNZ
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"12"=>	--REP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"13"=>	--ROP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"14"=>	--RP
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"15"=>	--RN
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"1A"=>	--JMP
								phold<='0';
								step<="000";
							when X"1B"=>	--JC
								phold<='0';
								step<="000";
							when X"1C"=>	--JNC
								phold<='0';
								step<="000";
							when X"1D"=>	--JZ
								phold<='0';
								step<="000";
							when X"1E"=>	--JNZ
								phold<='0';
								step<="000";
							when X"1F"=>	--JEP
								phold<='0';
								step<="000";
							when X"20"=>	--JOP
								phold<='0';
								step<="000";
							when X"21"=>	--JP
								phold<='0';
								step<="000";
							when X"22"=>	--JN
								phold<='0';
								step<="000";
								
							
							when others=>
								NULL;
						end case;
						
					
					when others=>
						NULL;
				end case;
				
				
			when "111"=>	--step 7
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0F"=>		--LDA
								temp1:=pre_data;
								add_over<="11";
								data_opc<='0';
								sync<='0';
								phold<='1';
								step<="000";
							when X"2D"=>		--IN
								temp1:=pre_data;
								add_over<="11";
								data_opc<='0';
								sync<='0';
								phold<='1';
								step<="000";
							when others=>
								NULL;
						end case;
						
					when others=>
						NULL;
				end case;

			when others=>
				NULL;
		end case;
		


	when "001"=>--step count is 1
		case step is
			when "000"=>--step 0
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								add_over<="00";
								step<="001";
							when X"02"=>		--MOV B
								add_over<="00";
								step<="001";
							when X"03"=>		--MOV C
								add_over<="00";
								step<="001";
							when X"04"=>		--MOV D
								add_over<="00";
								step<="001";
							when X"05"=>		--MOV E
								add_over<="00";
								step<="001";
							when X"06"=>		--MOV F
								add_over<="00";
								step<="001";
							when X"07"=>		--MOV GH
								add_over<="00";
								step<="001";
							when X"08"=>		--MOV GL
								add_over<="00";
								step<="001";
							when X"09"=>		--MOV HH
								add_over<="00";
								step<="001";
							when X"0A"=>		--MOV HL
								add_over<="00";
								step<="001";
							when X"0B"=>		--MOV IH
								add_over<="00";
								step<="001";
							when X"0C"=>		--MOV IL
								add_over<="00";
								step<="001";
							when X"0D"=>		--MOV M
								phold<='0';
								step_count<="000";
								step<="000";
							when X"10"=>		--LDAX
								add_over<="00";
								step<="001";
							when X"12"=>		--MOVS
								add_over<="00";
								step<="001";
							when X"13"=>		--POP
								data_opc<='0';
								step<="001";
							when X"14"=>		--PUSH
								add_over<="00";
								step<="001";
							when X"15"=>		--PUSM
								add_over<="00";
								step<="001";
							when X"16"=>		--POPM
								add_over<="00";
								step<="001";
							when X"29"=>		--STAX
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2A"=>		--POPD
								temp2:=pre_data;
								phold<='1';
								sync<='0';
								case opc(3 downto 0) is
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								add_over<="11";
								step<="000";
							when X"2B"=>		--PUSHD
								add_over<="00";
								step<="001";
							when X"2C"=>		--PUSHFL
								add_over<="00";
								step<="001";
							when others=>
								NULL;
						end case;
						

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								add_over<="00";
								step<="001";
							when X"01"=>		--ADC
								add_over<="00";
								step<="001";
							when X"04"=>		--ADM
								step<="001";
							when X"05"=>		--ACM
								step<="001";
							when X"06"=>		--SUB
								add_over<="00";
								step<="001";
							when X"07"=>		--SBB
								add_over<="00";
								step<="001";
							when X"0A"=>		--SMU
								step<="001";
							when X"0B"=>		--SBM
								step<="001";
							when X"0C"=>		--SUBA
								add_over<="00";
								step<="001";
							when X"0D"=>		--SBBA
								add_over<="00";
								step<="001";
							when X"10"=>		--SMUA
								step<="001";
							when X"11"=>		--SBMA
								step<="001";
							when X"12"=>		--MUL
								add_over<="00";
								step<="001";
							

							when X"1B"=>		--INR
								add_over<="00";
								step<="001";
							when X"1D"=>		--DCR
								add_over<="00";
								step<="001";
							when X"1F"=>		--ANA
								add_over<="00";
								step<="001";
							when X"20"=>		--ANR B
								add_over<="00";
								step<="001";
							when X"21"=>		--ANR C
								add_over<="00";
								step<="001";
							when X"22"=>		--ANR D
								add_over<="00";
								step<="001";
							when X"23"=>		--ANR E
								add_over<="00";
								step<="001";
							when X"24"=>		--ANR F
								add_over<="00";
								step<="001";
							when X"25"=>		--ANR GH
								add_over<="00";
								step<="001";
							when X"26"=>		--ANR GL
								add_over<="00";
								step<="001";
							when X"27"=>		--ANR HH
								add_over<="00";
								step<="001";
							when X"28"=>		--ANR HL
								add_over<="00";
								step<="001";
							when X"29"=>		--ANR IH
								add_over<="00";
								step<="001";
							when X"2A"=>		--ANR IL
								add_over<="00";
								step<="001";
							when X"2C"=>		--ANM
								step<="001";
							when X"2D"=>		--ORA
								add_over<="00";
								step<="001";
							when X"2E"=>		--ORR B
								add_over<="00";
								step<="001";
							when X"2F"=>		--ORR C
								add_over<="00";
								step<="001";
							when X"30"=>		--ORR D
								add_over<="00";
								step<="001";
							when X"31"=>		--ORR E
								add_over<="00";
								step<="001";
							when X"32"=>		--ORR F
								add_over<="00";
								step<="001";
							when X"33"=>		--ORR GH
								add_over<="00";
								step<="001";
							when X"34"=>		--ORR GL
								add_over<="00";
								step<="001";
							when X"35"=>		--ORR HH
								add_over<="00";
								step<="001";
							when X"36"=>		--ORR HL
								add_over<="00";
								step<="001";
							when X"37"=>		--ORR IH
								add_over<="00";
								step<="001";
							when X"38"=>		--ORR IL
								add_over<="00";
								step<="001";
							when X"3A"=>		--ORM
								step<="001";
							when X"3B"=>		--XORA
								add_over<="00";
								step<="001";
							when X"3C"=>		--XORR B
								add_over<="00";
								step<="001";
							when X"3D"=>		--XORR C
								add_over<="00";
								step<="001";
							when X"3E"=>		--XORR D
								add_over<="00";
								step<="001";
							when X"3F"=>		--XORR E
								add_over<="00";
								step<="001";
							when X"40"=>		--XORR F
								add_over<="00";
								step<="001";
							when X"41"=>		--XORR GH
								add_over<="00";
								step<="001";
							when X"42"=>		--XORR GL
								add_over<="00";
								step<="001";
							when X"43"=>		--XORR HH
								add_over<="00";
								step<="001";
							when X"44"=>		--XORR HL
								add_over<="00";
								step<="001";
							when X"45"=>		--XORR IH
								add_over<="00";
								step<="001";
							when X"46"=>		--XORR IL
								add_over<="00";
								step<="001";
							when X"48"=>		--XORM
								step<="001";
							when X"49"=>		--NOT
								add_over<="00";
								step<="001";
							when X"4A"=>		--NOA
								add_over<="00";
								step<="001";
							when X"4C"=>		--NOM
								step<="001";
							when X"58"=>		--CPA
								add_over<="00";
								step<="001";
							when X"59"=>		--CMP B
								add_over<="00";
								step<="001";
							when X"5A"=>		--CMP C
								add_over<="00";
								step<="001";
							when X"5B"=>		--CMP D
								add_over<="00";
								step<="001";
							when X"5C"=>		--CMP E
								add_over<="00";
								step<="001";
							when X"5D"=>		--CMP F
								add_over<="00";
								step<="001";
							when X"5E"=>		--CMP GH
								add_over<="00";
								step<="001";
							when X"5F"=>		--CMP GL
								add_over<="00";
								step<="001";
							when X"60"=>		--CMP HH
								add_over<="00";
								step<="001";
							when X"61"=>		--CMP HL
								add_over<="00";
								step<="001";
							when X"62"=>		--CMP IH
								add_over<="00";
								step<="001";
							when X"63"=>		--CMP IL
								add_over<="00";
								step<="001";
							
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								add_over<="00";
								step<="001";
							when X"01"=>	--CC
								add_over<="00";
								step<="001";
							when X"02"=>	--CNC
								add_over<="00";
								step<="001";
							when X"03"=>	--CZ
								add_over<="00";
								step<="001";
							when X"04"=>	--CNZ
								add_over<="00";
								step<="001";
							when X"05"=>	--CEP
								add_over<="00";
								step<="001";
							when X"06"=>	--COP
								add_over<="00";
								step<="001";
							when X"07"=>	--CP
								add_over<="00";
								step<="001";
							when X"08"=>	--CN
								add_over<="00";
								step<="001";
							when X"09"=>	--CE
								temp1:=pre_data;
								step<="001";
							when X"0A"=>	--CNE
								temp1:=pre_data;
								step<="001";
							when X"0B"=>	--CG
								temp1:=pre_data;
								step<="001";
							when X"0C"=>	--CL
								temp1:=pre_data;
								step<="001";
							when X"0D"=>	--RET
								add_over<="00";
								step<="001";
							when X"0E"=>	--RC
								add_over<="00";
								step<="001";
							when X"0F"=>	--RNC
								add_over<="00";
								step<="001";
							when X"10"=>	--RZ
								add_over<="00";
								step<="001";
							when X"11"=>	--RNZ
								add_over<="00";
								step<="001";
							when X"12"=>	--REP
								add_over<="00";
								step<="001";
							when X"13"=>	--ROP
								add_over<="00";
								step<="001";
							when X"14"=>	--RP
								add_over<="00";
								step<="001";
							when X"15"=>	--RN
								add_over<="00";
								step<="001";
							when X"16"=>	--RE
								add_over<="00";
								step<="001";
							when X"17"=>	--RNE
								add_over<="00";
								step<="001";
							when X"18"=>	--RG
								add_over<="00";
								step<="001";
							when X"19"=>	--RL
								add_over<="00";
								step<="001";
							when X"23"=>	--JE
								add_over<="00";
								pc_wr<='0';
								step<="001";
							when X"24"=>	--JNE
								add_over<="00";
								pc_wr<='0';
								step<="001";
							when X"25"=>	--JG
								add_over<="00";
								pc_wr<='0';
								step<="001";
							when X"26"=>	--JL
								add_over<="00";
								pc_wr<='0';
								step<="001";
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;

			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								data_opc<='1';
								step<="010";
							when X"02"=>		--MOV B
								data_opc<='1';
								step<="010";
							when X"03"=>		--MOV C
								data_opc<='1';
								step<="010";
							when X"04"=>		--MOV D
								data_opc<='1';
								step<="010";
							when X"05"=>		--MOV E
								data_opc<='1';
								step<="010";
							when X"06"=>		--MOV F
								data_opc<='1';
								step<="010";
							when X"07"=>		--MOV GH
								data_opc<='1';
								step<="010";
							when X"08"=>		--MOV GL
								data_opc<='1';
								step<="010";
							when X"09"=>		--MOV HH
								data_opc<='1';
								step<="010";
							when X"0A"=>		--MOV HL
								data_opc<='1';
								step<="010";
							when X"0B"=>		--MOV IH
								data_opc<='1';
								step<="010";
							when X"0C"=>		--MOV IL
								data_opc<='1';
								step<="010";
							when X"10"=>		--LDAX
								data_opc<='1';
								step<="010";
							when X"12"=>		--MOVS
								step<="010";
							when X"13"=>		--POP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"14"=>		--PUSH
								data_opc<='0';
								step<="010";
							when X"15"=>		--PUSM
								data_opc<='1';
								step<="010";
							when X"16"=>		--POPM
								data_opc<='0';
								step<="010";
							when X"2B"=>		--PUSHD
								data_opc<='0';
								step<="010";
							when X"2C"=>		--PUSHFL
								data_opc<='0';
								step<="010";
							when others=>
								NULL;
						end case;
						

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								data_opc<='1';
								step<="010";
							when X"01"=>		--ADC
								data_opc<='1';
								step<="010";
							when X"04"=>		--ADM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"05"=>		--ACM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"06"=>		--SUB
								data_opc<='1';
								step<="010";
							when X"07"=>		--SBB
								data_opc<='1';
								step<="010";
							when X"0A"=>		--SMU
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0B"=>		--SBM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0C"=>		--SUBA
								data_opc<='1';
								step<="010";
							when X"0D"=>		--SBBA
								data_opc<='1';
								step<="010";
							when X"10"=>		--SMUA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"11"=>		--SBMA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"12"=>		--MUL
								data_opc<='1';
								step<="010";
							

							when X"1B"=>		--INR
								data_opc<='1';
								step<="010";
							when X"1D"=>		--DCR
								data_opc<='1';
								step<="010";
							when X"1F"=>		--ANA
								data_opc<='1';
								step<="010";
							when X"20"=>		--ANR B
								data_opc<='1';
								step<="010";
							when X"21"=>		--ANR C
								data_opc<='1';
								step<="010";
							when X"22"=>		--ANR D
								data_opc<='1';
								step<="010";
							when X"23"=>		--ANR E
								data_opc<='1';
								step<="010";
							when X"24"=>		--ANR F
								data_opc<='1';
								step<="010";
							when X"25"=>		--ANR GH
								data_opc<='1';
								step<="010";
							when X"26"=>		--ANR GL
								data_opc<='1';
								step<="010";
							when X"27"=>		--ANR HH
								data_opc<='1';
								step<="010";
							when X"28"=>		--ANR HL
								data_opc<='1';
								step<="010";
							when X"29"=>		--ANR IH
								data_opc<='1';
								step<="010";
							when X"2A"=>		--ANR IL
								data_opc<='1';
								step<="010";
							when X"2C"=>		--ANM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2D"=>		--ORA
								data_opc<='1';
								step<="010";
							when X"2E"=>		--ORR B
								data_opc<='1';
								step<="010";
							when X"2F"=>		--ORR C
								data_opc<='1';
								step<="010";
							when X"30"=>		--ORR D
								data_opc<='1';
								step<="010";
							when X"31"=>		--ORR E
								data_opc<='1';
								step<="010";
							when X"32"=>		--ORR F
								data_opc<='1';
								step<="010";
							when X"33"=>		--ORR GH
								data_opc<='1';
								step<="010";
							when X"34"=>		--ORR GL
								data_opc<='1';
								step<="010";
							when X"35"=>		--ORR HH
								data_opc<='1';
								step<="010";
							when X"36"=>		--ORR HL
								data_opc<='1';
								step<="010";
							when X"37"=>		--ORR IH
								data_opc<='1';
								step<="010";
							when X"38"=>		--ORR IL
								data_opc<='1';
								step<="010";
							when X"3A"=>		--ORM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3B"=>		--XORA
								data_opc<='1';
								step<="010";
							when X"3C"=>		--XORR B
								data_opc<='1';
								step<="010";
							when X"3D"=>		--XORR C
								data_opc<='1';
								step<="010";
							when X"3E"=>		--XORR D
								data_opc<='1';
								step<="010";
							when X"3F"=>		--XORR E
								data_opc<='1';
								step<="010";
							when X"40"=>		--XORR F
								data_opc<='1';
								step<="010";
							when X"41"=>		--XORR GH
								data_opc<='1';
								step<="010";
							when X"42"=>		--XORR GL
								data_opc<='1';
								step<="010";
							when X"43"=>		--XORR HH
								data_opc<='1';
								step<="010";
							when X"44"=>		--XORR HL
								data_opc<='1';
								step<="010";
							when X"45"=>		--XORR IH
								data_opc<='1';
								step<="010";
							when X"46"=>		--XORR IL
								data_opc<='1';
								step<="010";
							when X"48"=>		--XORM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"49"=>		--NOT
								data_opc<='1';
								step<="010";
							when X"4A"=>		--NOA
								data_opc<='1';
								step<="010";
							when X"4C"=>		--NOM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"58"=>		--CPA
								data_opc<='1';
								step<="010";
							when X"59"=>		--CMP B
								data_opc<='1';
								step<="010";
							when X"5A"=>		--CMP C
								data_opc<='1';
								step<="010";
							when X"5B"=>		--CMP D
								data_opc<='1';
								step<="010";
							when X"5C"=>		--CMP E
								add_over<="00";
								step<="001";
							when X"5D"=>		--CMP F
								data_opc<='1';
								step<="010";
							when X"5E"=>		--CMP GH
								data_opc<='1';
								step<="010";
							when X"5F"=>		--CMP GL
								data_opc<='1';
								step<="010";
							when X"60"=>		--CMP HH
								data_opc<='1';
								step<="010";
							when X"61"=>		--CMP HL
								data_opc<='1';
								step<="010";
							when X"62"=>		--CMP IH
								data_opc<='1';
								step<="010";
							when X"63"=>		--CMP IL
								data_opc<='1';
								step<="010";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								data_opc<='0';
								step<="010";
							when X"01"=>	--CC
								data_opc<='0';
								step<="010";
							when X"02"=>	--CNC
								data_opc<='0';
								step<="010";
							when X"03"=>	--CZ
								data_opc<='0';
								step<="010";
							when X"04"=>	--CNZ
								data_opc<='0';
								step<="010";
							when X"05"=>	--CEP
								data_opc<='0';
								step<="010";
							when X"06"=>	--COP
								data_opc<='0';
								step<="010";
							when X"07"=>	--CP
								data_opc<='0';
								step<="010";
							when X"08"=>	--CN
								data_opc<='0';
								step<="010";
							when X"09"=>	--CE
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0A"=>	--CNE
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0B"=>	--CG
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0C"=>	--CL
								temp2:=pre_data;
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0D"=>	--RET
								data_opc<='0';
								step<="010";
							when X"0E"=>	--RC
								data_opc<='0';
								step<="010";
							when X"0F"=>	--RNC
								data_opc<='0';
								step<="010";
							when X"10"=>	--RZ
								data_opc<='0';
								step<="010";
							when X"11"=>	--RNZ
								data_opc<='0';
								step<="010";
							when X"12"=>	--REP
								data_opc<='0';
								step<="010";
							when X"13"=>	--ROP
								data_opc<='0';
								step<="010";
							when X"14"=>	--RP
								data_opc<='0';
								step<="010";
							when X"15"=>	--RN
								data_opc<='0';
								step<="010";
							when X"16"=>	--RE
								data_opc<='1';
								step<="010";
							when X"17"=>	--RNE
								data_opc<='1';
								step<="010";
							when X"18"=>	--RG
								data_opc<='1';
								step<="010";
							when X"19"=>	--RL
								data_opc<='1';
								step<="010";
							when X"23"=>	--JE
								data_opc<='1';
								step<="010";
							when X"24"=>	--JNE
								data_opc<='1';
								step<="010";
							when X"25"=>	--JG
								data_opc<='1';
								step<="010";
							when X"26"=>	--JL
								data_opc<='1';
								step<="010";
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								phold<='0';
								step<="011";
							when X"02"=>		--MOV B
								phold<='0';
								step<="011";
							when X"03"=>		--MOV C
								phold<='0';
								step<="011";
							when X"04"=>		--MOV D
								phold<='0';
								step<="011";
							when X"05"=>		--MOV E
								phold<='0';
								step<="011";
							when X"06"=>		--MOV F
								phold<='0';
								step<="011";
							when X"07"=>		--MOV GH
								phold<='0';
								step<="011";
							when X"08"=>		--MOV GL
								phold<='0';
								step<="011";
							when X"09"=>		--MOV HH
								phold<='0';
								step<="011";
							when X"0A"=>		--MOV HL
								phold<='0';
								step<="011";
							when X"0B"=>		--MOV IH
								phold<='0';
								step<="011";
							when X"0C"=>		--MOV IL
								phold<='0';
								step<="011";
							when X"10"=>		--LDAX
								phold<='0';
								step<="011";
							when X"12"=>		--MOVS
								phold<='0';
								step<="011";
							when X"14"=>		--PUSH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"15"=>		--PUSM
								phold<='0';
								step<="011";
							when X"16"=>		--POPM
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2B"=>		--PUSHD
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2C"=>		--PUSHFL
								phold<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								phold<='0';
								step<="011";
							when X"01"=>		--ADC
								phold<='0';
								step<="011";
							when X"06"=>		--SUB
								phold<='0';
								step<="011";
							when X"07"=>		--SBB
								phold<='0';
								step<="011";
							when X"0C"=>		--SUBA
								phold<='0';
								step<="011";
							when X"0D"=>		--SBBA
								phold<='0';
								step<="011";
							when X"12"=>		--MUL
								phold<='0';
								step<="011";
							


							when X"1B"=>		--INR
								phold<='0';
								step<="011";
							when X"1D"=>		--DCR
								phold<='0';
								step<="011";
							when X"1F"=>		--ANA
								phold<='0';
								step<="011";
							when X"20"=>		--ANR B
								phold<='0';
								step<="011";
							when X"21"=>		--ANR C
								phold<='0';
								step<="011";
							when X"22"=>		--ANR D
								phold<='0';
								step<="011";
							when X"23"=>		--ANR E
								phold<='0';
								step<="011";
							when X"24"=>		--ANR F
								phold<='0';
								step<="011";
							when X"25"=>		--ANR GH
								phold<='0';
								step<="011";
							when X"26"=>		--ANR GL
								phold<='0';
								step<="011";
							when X"27"=>		--ANR HH
								phold<='0';
								step<="011";
							when X"28"=>		--ANR HL
								phold<='0';
								step<="011";
							when X"29"=>		--ANR IH
								phold<='0';
								step<="011";
							when X"2A"=>		--ANR IL
								phold<='0';
								step<="011";
							when X"2D"=>		--ORA
								phold<='0';
								step<="011";
							when X"2E"=>		--ORR B
								phold<='0';
								step<="011";
							when X"2F"=>		--ORR C
								phold<='0';
								step<="011";
							when X"30"=>		--ORR D
								phold<='0';
								step<="011";
							when X"31"=>		--ORR E
								phold<='0';
								step<="011";
							when X"32"=>		--ORR F
								phold<='0';
								step<="011";
							when X"33"=>		--ORR GH
								phold<='0';
								step<="011";
							when X"34"=>		--ORR GL
								phold<='0';
								step<="011";
							when X"35"=>		--ORR HH
								phold<='0';
								step<="011";
							when X"36"=>		--ORR HL
								phold<='0';
								step<="011";
							when X"37"=>		--ORR IH
								phold<='0';
								step<="011";
							when X"38"=>		--ORR IL
								phold<='0';
								step<="011";
							when X"3B"=>		--XORA
								phold<='0';
								step<="011";
							when X"3C"=>		--XORR B
								phold<='0';
								step<="011";
							when X"3D"=>		--XORR C
								phold<='0';
								step<="011";
							when X"3E"=>		--XORR D
								phold<='0';
								step<="011";
							when X"3F"=>		--XORR E
								phold<='0';
								step<="011";
							when X"40"=>		--XORR F
								phold<='0';
								step<="011";
							when X"41"=>		--XORR GH
								phold<='0';
								step<="011";
							when X"42"=>		--XORR GL
								phold<='0';
								step<="011";
							when X"43"=>		--XORR HH
								phold<='0';
								step<="011";
							when X"44"=>		--XORR HL
								phold<='0';
								step<="011";
							when X"45"=>		--XORR IH
								phold<='0';
								step<="011";
							when X"46"=>		--XORR IL
								phold<='0';
								step<="011";
							when X"49"=>		--NOT
								phold<='0';
								step<="011";
							when X"4A"=>		--NOA
								phold<='0';
								step<="011";
							when X"58"=>		--CPA
								phold<='0';
								step<="011";
							when X"59"=>		--CMP B
								phold<='0';
								step<="011";
							when X"5A"=>		--CMP C
								phold<='0';
								step<="011";
							when X"5B"=>		--CMP D
								phold<='0';
								step<="011";
							when X"5C"=>		--CMP E
								phold<='0';
								step<="011";
							when X"5D"=>		--CMP F
								phold<='0';
								step<="011";
							when X"5E"=>		--CMP GH
								phold<='0';
								step<="011";
							when X"5F"=>		--CMP GL
								phold<='0';
								step<="011";
							when X"60"=>		--CMP HH
								phold<='0';
								step<="011";
							when X"61"=>		--CMP HL
								phold<='0';
								step<="011";
							when X"62"=>		--CMP IH
								phold<='0';
								step<="011";
							when X"63"=>		--CMP IL
								phold<='0';
								step<="011";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"01"=>	--CC
								phold<='0';
								step_count<="000";
								step<="000";
							when X"02"=>	--CNC
								phold<='0';
								step_count<="000";
								step<="000";
							when X"03"=>	--CZ
								phold<='0';
								step_count<="000";
								step<="000";
							when X"04"=>	--CNZ
								phold<='0';
								step_count<="000";
								step<="000";
							when X"05"=>	--CEP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"06"=>	--COP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"07"=>	--CP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"08"=>	--CN
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0D"=>	--RET
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0E"=>	--RC
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0F"=>	--RNC
								phold<='0';
								step_count<="000";
								step<="000";
							when X"10"=>	--RZ
								phold<='0';
								step_count<="000";
								step<="000";
							when X"11"=>	--RNZ
								phold<='0';
								step_count<="000";
								step<="000";
							when X"12"=>	--REP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"13"=>	--ROP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"14"=>	--RP
								phold<='0';
								step_count<="000";
								step<="000";
							when X"15"=>	--RN
								data_opc<='0';
								step<="010";
							when X"16"=>	--RE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"17"=>	--RNE
								phold<='0';
								step<="011";
							when X"18"=>	--RG
								phold<='0';
								step<="011";
							when X"19"=>	--RL
								phold<='0';
								step<="011";
							when X"23"=>	--JE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"24"=>	--JNE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"25"=>	--JG
								phold<='0';
								step_count<="000";
								step<="000";
							when X"26"=>	--JL
								phold<='0';
								step_count<="000";
								step<="000";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"02"=>		--MOV B
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"03"=>		--MOV C
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"04"=>		--MOV D
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"05"=>		--MOV E
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"06"=>		--MOV F
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"07"=>		--MOV GH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"08"=>		--MOV GL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"09"=>		--MOV HH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"0A"=>		--MOV HL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"0B"=>		--MOV IH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"0C"=>		--MOV IL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"10"=>		--LDAX
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								step<="100";
							when X"12"=>		--MOVS
								temp2:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"15"=>		--PUSM
								temp1:=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when others=>
								NULL;
						end case;
						

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"01"=>		--ADC
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"06"=>		--SUB
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"07"=>		--SBB
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"0C"=>		--SUBA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"0D"=>		--SBBA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"12"=>		--MUL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							


							when X"1B"=>		--INR
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"1D"=>		--DCR
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"1F"=>		--ANA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"20"=>		--ANR B
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"21"=>		--ANR C
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"22"=>		--ANR D
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"23"=>		--ANR E
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"24"=>		--ANR F
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"25"=>		--ANR GH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"26"=>		--ANR GL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"27"=>		--ANR HH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"28"=>		--ANR HL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"29"=>		--ANR IH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"2A"=>		--ANR IL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"2D"=>		--ORA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"2E"=>		--ORR B
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"2F"=>		--ORR C
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"30"=>		--ORR D
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"31"=>		--ORR E
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"32"=>		--ORR F
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"33"=>		--ORR GH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"34"=>		--ORR GL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"35"=>		--ORR HH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"36"=>		--ORR HL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"37"=>		--ORR IH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"38"=>		--ORR IL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"3B"=>		--XORA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"3C"=>		--XORR B
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"3D"=>		--XORR C
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"3E"=>		--XORR D
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"3F"=>		--XORR E
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"40"=>		--XORR F
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"41"=>		--XORR GH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"42"=>		--XORR GL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"43"=>		--XORR HH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"44"=>		--XORR HL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"45"=>		--XORR IH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"46"=>		--XORR IL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"49"=>		--NOT
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"4A"=>		--NOA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"58"=>		--CPA
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"59"=>		--CMP B
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5A"=>		--CMP C
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5B"=>		--CMP D
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5C"=>		--CMP E
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5D"=>		--CMP F
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5E"=>		--CMP GH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"5F"=>		--CMP GL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"60"=>		--CMP HH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"61"=>		--CMP HL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"62"=>		--CMP IH
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							when X"63"=>		--CMP IL
								temp1:=pre_data;
								phold<='1';
								add_over<="11";
								data_opc<='0';
								sync<='0';
								step<="000";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"16"=>	--RE
								ltemp(15 downto 0):=pre_data;
								step<="100";
							when X"17"=>	--RNE
								ltemp(15 downto 0):=pre_data;
								step<="100";
							when X"18"=>	--RG
								ltemp(15 downto 0):=pre_data;
								step<="100";
							when X"19"=>	--RL
								ltemp(15 downto 0):=pre_data;
								step<="100";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								add_over<="00";
								sync<='0';
								step<="000";
							when X"02"=>		--MOV B
								add_over<="00";
								sync<='0';
								step<="000";
							when X"03"=>		--MOV C
								add_over<="00";
								sync<='0';
								step<="000";
							when X"04"=>		--MOV D
								add_over<="00";
								sync<='0';
								step<="000";
							when X"05"=>		--MOV E
								add_over<="00";
								sync<='0';
								step<="000";
							when X"06"=>		--MOV F
								add_over<="00";
								sync<='0';
								step<="000";
							when X"07"=>		--MOV GH
								add_over<="00";
								sync<='0';
								step<="000";
							when X"08"=>		--MOV GL
								add_over<="00";
								sync<='0';
								step<="000";
							when X"09"=>		--MOV HH
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0A"=>		--MOV HL
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0B"=>		--MOV IH
								add_over<="00";
								sync<='0';
								step<="000";
							when X"0C"=>		--MOV IL
								add_over<="00";
								sync<='0';
								step<="000";
							when X"10"=>		--LDAX
								add_over<="00";
								sync<='0';
								step<="000";
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"16"=>	--RE
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"17"=>	--RNE
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"18"=>	--RG
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							when X"19"=>	--RL
								ltemp(31 downto 16):=pre_data;
								phold<='1';
								sync<='0';
								step<="000";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when others=>
				NULL;
		end case;
	
	when "010"=>--step count is 2
		case step is
			when "000"=>--step 0
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								phold<='0';
								step_count<="000";
							when X"02"=>		--MOV B
								phold<='0';
								step_count<="000";
							when X"03"=>		--MOV C
								phold<='0';
								step_count<="000";
							when X"04"=>		--MOV D
								phold<='0';
								step_count<="000";
							when X"05"=>		--MOV E
								phold<='0';
								step_count<="000";
							when X"06"=>		--MOV F
								phold<='0';
								step_count<="000";
							when X"07"=>		--MOV GH
								phold<='0';
								step_count<="000";
							when X"08"=>		--MOV GL
								phold<='0';
								step_count<="000";
							when X"09"=>		--MOV HH
								phold<='0';
								step_count<="000";
							when X"0A"=>		--MOV HL
								phold<='0';
								step_count<="000";
							when X"0B"=>		--MOV IH
								phold<='0';
								step_count<="000";
							when X"0C"=>		--MOV IL
								phold<='0';
								step_count<="000";
							when X"10"=>		--LDAX
								phold<='0';
								step_count<="000";
							when X"12"=>		--MOVS
								add_over<="00";
								step<="001";
							when X"15"=>		--PUSM
								add_over<="00";
								step<="001";
							when X"2A"=>		--POPD
								data_opc<='0';
								step<="001";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								data_opc<='0';
								step<="001";
							when X"01"=>		--ADC
								data_opc<='0';
								step<="001";
							when X"06"=>		--SUB
								data_opc<='0';
								step<="001";
							when X"07"=>		--SBB
								data_opc<='0';
								step<="001";
							when X"0C"=>		--SUBA
								data_opc<='0';
								step<="001";
							when X"0D"=>		--SBBA
								data_opc<='0';
								step<="001";
							
							
							
							
							when X"1B"=>		--INR
								add_over<="00";
								step<="001";
							when X"1D"=>		--DCR
								add_over<="00";
								step<="001";
							when X"1F"=>		--ANA
								data_opc<='0';
								step<="001";
							when X"20"=>		--ANR B
								data_opc<='0';
								step<="001";
							when X"21"=>		--ANR C
								data_opc<='0';
								step<="001";
							when X"22"=>		--ANR D
								data_opc<='0';
								step<="001";
							when X"23"=>		--ANR E
								data_opc<='0';
								step<="001";
							when X"24"=>		--ANR F
								data_opc<='0';
								step<="001";
							when X"25"=>		--ANR GH
								data_opc<='0';
								step<="001";
							when X"26"=>		--ANR GL
								data_opc<='0';
								step<="001";
							when X"27"=>		--ANR HH
								data_opc<='0';
								step<="001";
							when X"28"=>		--ANR HL
								data_opc<='0';
								step<="001";
							when X"29"=>		--ANR IH
								data_opc<='0';
								step<="001";
							when X"2A"=>		--ANR IL
								data_opc<='0';
								step<="001";
							when X"2D"=>		--ORA
								data_opc<='0';
								step<="001";
							when X"2E"=>		--ORR B
								data_opc<='0';
								step<="001";
							when X"2F"=>		--ORR C
								data_opc<='0';
								step<="001";
							when X"30"=>		--ORR D
								data_opc<='0';
								step<="001";
							when X"31"=>		--ORR E
								data_opc<='0';
								step<="001";
							when X"32"=>		--ORR F
								data_opc<='0';
								step<="001";
							when X"33"=>		--ORR GH
								data_opc<='0';
								step<="001";
							when X"34"=>		--ORR GL
								data_opc<='0';
								step<="001";
							when X"35"=>		--ORR HH
								data_opc<='0';
								step<="001";
							when X"36"=>		--ORR HL
								data_opc<='0';
								step<="001";
							when X"37"=>		--ORR IH
								data_opc<='0';
								step<="001";
							when X"38"=>		--ORR IL
								data_opc<='0';
								step<="001";
							when X"3B"=>		--XORA
								data_opc<='0';
								step<="001";
							when X"3C"=>		--XORR B
								data_opc<='0';
								step<="001";
							when X"3D"=>		--XORR C
								data_opc<='0';
								step<="001";
							when X"3E"=>		--XORR D
								data_opc<='0';
								step<="001";
							when X"3F"=>		--XORR E
								data_opc<='0';
								step<="001";
							when X"40"=>		--XORR F
								data_opc<='0';
								step<="001";
							when X"41"=>		--XORR GH
								data_opc<='0';
								step<="001";
							when X"42"=>		--XORR GL
								data_opc<='0';
								step<="001";
							when X"43"=>		--XORR HH
								data_opc<='0';
								step<="001";
							when X"44"=>		--XORR HL
								data_opc<='0';
								step<="001";
							when X"45"=>		--XORR IH
								data_opc<='0';
								step<="001";
							when X"46"=>		--XORR IL
								data_opc<='0';
								step<="001";
							when X"49"=>		--NOT
								add_over<="00";
								step<="001";
							when X"4A"=>		--NOA
								data_opc<='0';
								step<="001";
							when X"58"=>		--CPA
								data_opc<='0';
								step<="001";
							when X"59"=>		--CMP B
								data_opc<='0';
								step<="001";
							when X"5A"=>		--CMP C
								data_opc<='0';
								step<="001";
							when X"5B"=>		--CMP D
								data_opc<='0';
								step<="001";
							when X"5C"=>		--CMP E
								data_opc<='0';
								step<="001";
							when X"5D"=>		--CMP F
								data_opc<='0';
								step<="001";
							when X"5E"=>		--CMP GH
								data_opc<='0';
								step<="001";
							when X"5F"=>		--CMP GL
								data_opc<='0';
								step<="001";
							when X"60"=>		--CMP HH
								data_opc<='0';
								step<="001";
							when X"61"=>		--CMP HL
								data_opc<='0';
								step<="001";
							when X"62"=>		--CMP IH
								data_opc<='0';
								step<="001";
							when X"63"=>		--CMP IL
								data_opc<='0';
								step<="001";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								add_over<="00";
								step<="001";
							when X"0A"=>	--CNE
								add_over<="00";
								step<="001";
							when X"0B"=>	--CG
								add_over<="00";
								step<="001";
							when X"0C"=>	--CL
								add_over<="00";
								step<="001";
							when X"16"=>	--RE
								add_over<="00";
								step<="001";
							when X"17"=>	--RNE
								add_over<="00";
								step<="001";
							when X"18"=>	--RG
								add_over<="00";
								step<="001";
							when X"19"=>	--RL
								add_over<="00";
								step<="001";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								data_opc<='0';
								step<="010";
							when X"15"=>		--PUSM
								data_opc<='0';
								step<="010";
							when X"2A"=>		--POPD
								phold<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								phold<='0';
								step_count<="000";
								step<="000";
							when X"01"=>		--ADC
								phold<='0';
								step_count<="000";
								step<="000";
							when X"06"=>		--SUB
								phold<='0';
								step_count<="000";
								step<="000";
							when X"07"=>		--SBB
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0C"=>		--SUBA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0D"=>		--SBBA
								phold<='0';
								step_count<="000";
								step<="000";
							
							
							
							
							when X"1B"=>		--INR
								data_opc<='0';
								step<="010";
							when X"1D"=>		--DCR
								data_opc<='0';
								step<="010";
							when X"1F"=>		--ANA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"20"=>		--ANR B
								phold<='0';
								step_count<="000";
								step<="000";
							when X"21"=>		--ANR C
								phold<='0';
								step_count<="000";
								step<="000";
							when X"22"=>		--ANR D
								phold<='0';
								step_count<="000";
								step<="000";
							when X"23"=>		--ANR E
								phold<='0';
								step_count<="000";
								step<="000";
							when X"24"=>		--ANR F
								phold<='0';
								step_count<="000";
								step<="000";
							when X"25"=>		--ANR GH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"26"=>		--ANR GL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"27"=>		--ANR HH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"28"=>		--ANR HL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"29"=>		--ANR IH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2A"=>		--ANR IL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2D"=>		--ORA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2E"=>		--ORR B
								phold<='0';
								step_count<="000";
								step<="000";
							when X"2F"=>		--ORR C
								phold<='0';
								step_count<="000";
								step<="000";
							when X"30"=>		--ORR D
								phold<='0';
								step_count<="000";
								step<="000";
							when X"31"=>		--ORR E
								phold<='0';
								step_count<="000";
								step<="000";
							when X"32"=>		--ORR F
								phold<='0';
								step_count<="000";
								step<="000";
							when X"33"=>		--ORR GH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"34"=>		--ORR GL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"35"=>		--ORR HH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"36"=>		--ORR HL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"37"=>		--ORR IH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"38"=>		--ORR IL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3B"=>		--XORA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3C"=>		--XORR B
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3D"=>		--XORR C
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3E"=>		--XORR D
								phold<='0';
								step_count<="000";
								step<="000";
							when X"3F"=>		--XORR E
								phold<='0';
								step_count<="000";
								step<="000";
							when X"40"=>		--XORR F
								phold<='0';
								step_count<="000";
								step<="000";
							when X"41"=>		--XORR GH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"42"=>		--XORR GL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"43"=>		--XORR HH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"44"=>		--XORR HL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"45"=>		--XORR IH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"46"=>		--XORR IL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"49"=>		--NOT
								phold<='0';
								step_count<="000";
								step<="000";
							when X"4A"=>		--NOA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"58"=>		--CPA
								phold<='0';
								step_count<="000";
								step<="000";
							when X"59"=>		--CMP B
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5A"=>		--CMP C
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5B"=>		--CMP D
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5C"=>		--CMP E
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5D"=>		--CMP F
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5E"=>		--CMP GH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"5F"=>		--CMP GL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"60"=>		--CMP HH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"61"=>		--CMP HL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"62"=>		--CMP IH
								phold<='0';
								step_count<="000";
								step<="000";
							when X"63"=>		--CMP IL
								phold<='0';
								step_count<="000";
								step<="000";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								data_opc<='0';
								step<="010";
							when X"0A"=>	--CNE
								data_opc<='0';
								step<="010";
							when X"0B"=>	--CG
								data_opc<='0';
								step<="010";
							when X"0C"=>	--CL
								data_opc<='0';
								step<="010";
							when X"16"=>	--RE
								data_opc<='0';
								step<="010";
							when X"17"=>	--RNE
								data_opc<='0';
								step<="010";
							when X"18"=>	--RG
								data_opc<='0';
								step<="010";
							when X"19"=>	--RL
								data_opc<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;

			when "010"=>--step 2
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								phold<='0';
								step_count<="000";
								step<="000";
							when X"15"=>		--PUSM
								phold<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							
							
							
							
							
							when X"1B"=>		--INR
								phold<='0';
								step_count<="000";
								step<="000";
							when X"1D"=>		--DCR
								phold<='0';
								step_count<="000";
								step<="000";
							
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0A"=>	--CNE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0B"=>	--CG
								phold<='0';
								step_count<="000";
								step<="000";
							when X"0C"=>	--CL
								phold<='0';
								step_count<="000";
								step<="000";
							when X"16"=>	--RE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"17"=>	--RNE
								phold<='0';
								step_count<="000";
								step<="000";
							when X"18"=>	--RG
								phold<='0';
								step_count<="000";
								step<="000";
							when X"19"=>	--RL
								phold<='0';
								step_count<="000";
								step<="000";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
			
			when others=>
				NULL;
		end case;
		
	when others=>
		NULL;
end case;


end if;
end if;
end if;

else			--async mode

	alu_end:=alu_proc_end xor alu_en;
	reg_end:=reg_proc_end xor (reg_read or reg_write);
	out_end:=out_proc_end xor out_blk_en;
	sync_flag<='0';
	
if((alu_end or reg_end or out_end)='0') then

case step_count is
	when "000"=>--step count is 0
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"02"=>		--MOV B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"03"=>		--MOV C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"04"=>		--MOV D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"05"=>		--MOV E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"06"=>		--MOV F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"07"=>		--MOV GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"08"=>		--MOV GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"09"=>		--MOV HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"0A"=>		--MOV HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"0B"=>		--MOV IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"0C"=>		--MOV IL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"0D"=>		--MOV M
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"0E"=>		--MVI
								pcup<='0';
								reg_sel<=opc(3 downto 0);
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"0F"=>		--LDA
								reg_sel<=X"1";
								add_over<="00";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"10"=>		--LDAX
								pcup<='0';
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"11"=>		--LXI
								pcup<='0';
								reg_sel<=opc(3 downto 0);
								reg_write_data<=temp2;
								reg_write<='1';
								step<="001";
							when X"12"=>		--MOVS
								pcup<='0';
								if(temp1=X"0000") then
									sync<='1';
									add_over<="11";
									step_count<="010";
									step<="000";
								else
									step<="001";
								end if;
							when X"13"=>		--POP
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								add_over<="00";
								step<="001";
							when X"14"=>		--PUSH
								se:='0';
								pcup<='0';
								if(sf='1') then
									sync<='1';
									phold<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
									step<="001";
								end if;
							when X"15"=>		--PUSM
								se:='0';
								pcup<='0';
								if(sf='1') then
									sync<='1';
									phold<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									reg_sel<=X"C";
									reg_read<='1';
									step<="001";
								end if;
							when X"16"=>		--POPM
								reg_sel<=X"C";
								reg_read<='1';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"17"=>		--XCHG A
								reg_sel<=X"1";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"18"=>		--XCHG B
								reg_sel<=X"2";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"19"=>		--XCHG C
								reg_sel<=X"3";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1A"=>		--XCHG D
								reg_sel<=X"4";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1B"=>		--XCHG E
								reg_sel<=X"5";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1C"=>		--XCHG F
								reg_sel<=X"6";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1D"=>		--XCHG GH
								reg_sel<=X"8";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1E"=>		--XCHG GL
								reg_sel<=X"9";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"1F"=>		--XCHG HH
								reg_sel<=X"A";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"20"=>		--XCHG HL
								reg_sel<=X"B";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"21"=>		--XCHG IH
								reg_sel<=X"C";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"22"=>		--XCHP A
								reg_sel<=X"1";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"23"=>		--XCHP C
								reg_sel<=X"3";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"24"=>		--XCHP E
								reg_sel<=X"5";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"25"=>		--XCHP G
								reg_sel<=X"8";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"26"=>		--XCHP H
								reg_sel<=X"A";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"27"=>		--XCHP I
								reg_sel<=X"C";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"28"=>		--STA
								reg_sel<=X"1";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"29"=>		--STAX
								reg_sel<=X"1";
								reg_read<='1';
								pcup<='0';
								step<="001";
							when X"2A"=>		--POPD
								reg_sel<=opc(3 downto 0);
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"2B"=>		--PUSHD
								se:='0';
								pcup<='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
									step<="001";
								end if;
							when X"2C"=>		--PUSHFL
								se:='0';
								pcup<='0';
								if(sf='1') then
									sync<='1';
									phold<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"2D"=>		--IN
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								add_over<="00";
								step<="001";
							when X"2E"=>		--OUT
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when others=>
								NULL;
						end case;
						

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"01"=>		--ADC
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"02"=>		--ADI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"03"=>		--ACI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"04"=>		--ADM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"05"=>		--ACM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"06"=>		--SUB
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"07"=>		--SBB
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"08"=>		--SUI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"09"=>		--SBI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0A"=>		--SMU
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"0B"=>		--SBM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"0C"=>		--SUBA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"0D"=>		--SBBA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"0E"=>		--SUIA
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0F"=>		--SBIA
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"10"=>		--SMUA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"11"=>		--SBMA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"12"=>		--MUL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"13"=>		--MUI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"14"=>		--MUM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"15"=>		--DIV
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"16"=>		--DVI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"17"=>		--DVM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"18"=>		--DIVA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"19"=>		--DVIA
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"1A"=>		--DVMA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"1B"=>		--INR
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"1C"=>		--INX
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								else
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
								end if;
								step<="001";
							when X"1D"=>		--DCR
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"1E"=>		--DCX
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
								else
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
								end if;
								step<="001";
							when X"1F"=>		--ANA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"20"=>		--ANR B
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"21"=>		--ANR C
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"22"=>		--ANR D
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"23"=>		--ANR E
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"24"=>		--ANR F
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"25"=>		--ANR GH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"26"=>		--ANR GL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"27"=>		--ANR HH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"28"=>		--ANR HL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"29"=>		--ANR IH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"2A"=>		--ANR IL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"2B"=>		--ANI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"2C"=>		--ANM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"2D"=>		--ORA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"2E"=>		--ORR B
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"2F"=>		--ORR C
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"30"=>		--ORR D
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"31"=>		--ORR E
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"32"=>		--ORR F
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"33"=>		--ORR GH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"34"=>		--ORR GL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"35"=>		--ORR HH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"36"=>		--ORR HL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"37"=>		--ORR IH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"38"=>		--ORR IL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"39"=>		--ORI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"3A"=>		--ORM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3B"=>		--XORA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"3C"=>		--XORR B
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"3D"=>		--XORR C
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"3E"=>		--XORR D
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"3F"=>		--XORR E
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"40"=>		--XORR F
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"41"=>		--XORR GH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"42"=>		--XORR GL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"43"=>		--XORR HH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"44"=>		--XORR HL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"45"=>		--XORR IH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"46"=>		--XORR IL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"47"=>		--XORI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"48"=>		--XORM
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"49"=>		--NOT
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"4A"=>		--NOA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"4B"=>		--NOI
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01011";
								alu_en<='1';
								pcup<='0';
								step<="001";
							when X"4C"=>		--NOM
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01011";
								alu_en<='1';
								step<="001";
							when X"4D"=>		--RCR
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"4E"=>		--RRC
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"4F"=>		--RRA
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"50"=>		--LCR
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"51"=>		--LRC
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"52"=>		--LRA
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"53"=>		--SHR
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"54"=>		--SRC
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"55"=>		--SHL
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"56"=>		--SLC
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"57"=>		--NEG
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"58"=>		--CPA
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"59"=>		--CMP B
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5A"=>		--CMP C
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5B"=>		--CMP D
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5C"=>		--CMP E
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5D"=>		--CMP F
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5E"=>		--CMP GH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"5F"=>		--CMP GL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"60"=>		--CMP HH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"61"=>		--CMP HL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"62"=>		--CMP IH
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"63"=>		--CMP IL
								pcup<='0';
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"C";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"64"=>		--CMI
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"65"=>		--CPP A
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"2";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"66"=>		--CPP C
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"4";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"67"=>		--CPP E
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"6";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"68"=>		--CPP G
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"9";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"69"=>		--CPP H
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"B";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"6A"=>		--CPP I
								pcup<='0';
								reg_sel<=X"D";
								reg_read<='1';
								step<="001";
							when X"6B"=>		--DAD
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"D";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"6C"=>		--SBD
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"D";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							when X"6D"=>		--SBDI
								pcup<='0';
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"D";
								else
									reg_sel<=opc(3 downto 0);
								end if;
								reg_read<='1';
								step<="001";
							


							when others=>
								NULL;
						end case;
						
						
					when "10"=>	--Master 2
						case opc(11 downto 4) is
							when X"04"=>	--STI
								interr_mask_reg_sel<='1';
								interr_mask_reg_data<=temp1(7 downto 0);
								step<="001";
							when X"05"=>	--RDI
								pcup<='0';
								temp1(7 downto 0):=interr_read_reg_data;
								temp1(15 downto 8):=X"00";
								temp1(3):=flag(9);
								interr_read_reg_sel<='0';
								step<="001";
							

	
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"01"=>	--CC
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"02"=>	--CNC
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"03"=>	--CZ
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"04"=>	--CNZ
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"05"=>	--CEP
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"06"=>	--COP
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"07"=>	--CP
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"08"=>	--CN
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"09"=>	--CE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0A"=>	--CNE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0B"=>	--CG
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0C"=>	--CL
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"0D"=>	--RET
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"0E"=>	--RC
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"0F"=>	--RNC
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"10"=>	--RZ
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"11"=>	--RNZ
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"12"=>	--REP
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"13"=>	--ROP
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"14"=>	--RP
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"15"=>	--RN
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"16"=>	--RE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"17"=>	--RNE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"18"=>	--RG
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"19"=>	--RL
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"23"=>	--JE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"24"=>	--JNE
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"25"=>	--JG
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"26"=>	--JL
								pcup<='0';
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				end if;
			
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"02"=>		--MOV B
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"03"=>		--MOV C
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"04"=>		--MOV D
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"05"=>		--MOV E
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"06"=>		--MOV F
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"07"=>		--MOV GH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"08"=>		--MOV GL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"09"=>		--MOV HH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0A"=>		--MOV HL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0B"=>		--MOV IH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0C"=>		--MOV IL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0D"=>		--MOV M
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0E"=>		--MVI
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"0F"=>		--LDA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"10"=>		--LDAX
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"3"=>	--C
										opc(3 downto 0):=X"4";
									when X"5"=>	--E
										opc(3 downto 0):=X"6";
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"11"=>		--LXI
								reg_write<='0';
								case opc(3 downto 0) is
									when X"3"=>	--C
										opc(3 downto 0):=X"4";
									when X"5"=>	--E
										opc(3 downto 0):=X"6";
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"12"=>		--MOVS
								reg_sel<=X"D";
								reg_read<='1';
								step<="010";
							when X"13"=>		--POP
								reg_write<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"14"=>		--PUSH
								temp1:=reg_read_data;
								reg_read<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"15"=>		--PUSM
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"16"=>		--POPM
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"17"=>		--XCHG A
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"18"=>		--XCHG B
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"19"=>		--XCHG C
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1A"=>		--XCHG D
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1B"=>		--XCHG E
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1C"=>		--XCHG F
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1D"=>		--XCHG GH
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1E"=>		--XCHG GL
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"1F"=>		--XCHG HH
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"20"=>		--XCHG HL
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"21"=>		--XCHG IH
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"22"=>		--XCHP A
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"23"=>		--XCHP C
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"24"=>		--XCHP E
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"25"=>		--XCHP G
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"26"=>		--XCHP H
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"27"=>		--XCHP I
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"28"=>		--STA
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"29"=>		--STAX
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2A"=>		--POPD
								reg_write<='0';
								sync<='1';
								step_count<="001";
								phold<='0';
								step<="000";
							when X"2B"=>		--PUSHD
								temp1:=reg_read_data;
								reg_read<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"2C"=>		--PUSHFL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"2D"=>		--IN
								reg_write<='0';
								step<="010";
							when X"2E"=>		--OUT
								temp1:=reg_read_data;
								reg_read<='0';
								step<="001";
							when others=>
								NULL;
						end case;



					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"01"=>		--ADC
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"02"=>		--ADI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"03"=>		--ACI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"04"=>		--ADM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"05"=>		--ACM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"06"=>		--SUB
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"07"=>		--SBB
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"08"=>		--SUI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"09"=>		--SBI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0A"=>		--SMU
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0B"=>		--SBM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0C"=>		--SUBA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0D"=>		--SBBA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"0E"=>		--SUIA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0F"=>		--SBIA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"10"=>		--SMUA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"11"=>		--SBMA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"13"=>		--MUI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"14"=>		--MUM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"15"=>		--DIV
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"16"=>		--DVI
								temp2:=reg_read_data;
								ltemp(31 downto 16):=X"0000";
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"17"=>		--DVM
								temp2:=reg_read_data;
								ltemp(31 downto 16):=X"0000";
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								reg_read<='0';
								step<="010";
							when X"18"=>		--DIVA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"19"=>		--DVIA
								temp2:=reg_read_data;
								ltemp(31 downto 16):=X"0000";
								ltemp(15 downto 0):=temp1;
								reg_read<='0';
								step<="010";
							when X"1A"=>		--DVMA
								temp2:=reg_read_data;
								ltemp(31 downto 16):=X"0000";
								ltemp(15 downto 0):=temp1;
								reg_read<='0';
								step<="010";
							when X"1B"=>		--INR
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"1C"=>		--INX
								if(opc(3 downto 0)=X"F") then
									sp(15 downto 0):=alu_result(15 downto 0);
									tc:=alu_result(16);
									alu_en<='0';
								else
									temp1:=reg_read_data;
									reg_read<='0';
									case opc(3 downto 0) is
										when X"4"=>	--D
											opc(3 downto 0):=X"3";
										when X"6"=>	--F
											opc(3 downto 0):=X"5";
										when X"9"=>	--GL
											opc(3 downto 0):=X"8";
										when X"B"=>	--HL
											opc(3 downto 0):=X"A";
										when X"D"=>	--IL
											opc(3 downto 0):=X"C";
										when others=>
											NULL;
									end case;
								end if;
								step<="010";
							when X"1D"=>		--DCR
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"1E"=>		--DCX
								if(opc(3 downto 0)=X"F") then
									sp(15 downto 0):=alu_result(15 downto 0);
									tc:=alu_result(16);
									alu_en<='0';
								else
									temp1:=reg_read_data;
									reg_read<='0';
									case opc(3 downto 0) is
										when X"4"=>	--D
											opc(3 downto 0):=X"3";
										when X"6"=>	--F
											opc(3 downto 0):=X"5";
										when X"9"=>	--GL
											opc(3 downto 0):=X"8";
										when X"B"=>	--HL
											opc(3 downto 0):=X"A";
										when X"D"=>	--IL
											opc(3 downto 0):=X"C";
										when others=>
											NULL;
									end case;
								end if;
								step<="010";
							when X"1F"=>		--ANA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"20"=>		--ANR B
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"21"=>		--ANR C
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"22"=>		--ANR D
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"23"=>		--ANR E
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"24"=>		--ANR F
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"25"=>		--ANR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"26"=>		--ANR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"27"=>		--ANR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"28"=>		--ANR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"29"=>		--ANR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"2A"=>		--ANR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"2B"=>		--ANI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2C"=>		--ANM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2D"=>		--ORA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"2E"=>		--ORR B
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"2F"=>		--ORR C
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"30"=>		--ORR D
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"31"=>		--ORR E
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"32"=>		--ORR F
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"33"=>		--ORR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"34"=>		--ORR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"35"=>		--ORR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"36"=>		--ORR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"37"=>		--ORR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"38"=>		--ORR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"39"=>		--ORI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3A"=>		--ORM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3B"=>		--XORA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"3C"=>		--XORR B
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"3D"=>		--XORR C
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"3E"=>		--XORR D
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"3F"=>		--XORR E
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"40"=>		--XORR F
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"41"=>		--XORR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"42"=>		--XORR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"43"=>		--XORR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"44"=>		--XORR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"45"=>		--XORR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"46"=>		--XORR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"47"=>		--XORI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"48"=>		--XORM
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"49"=>		--NOT
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"4A"=>		--NOA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"4B"=>		--NOI
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"4C"=>		--NOM
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"4D"=>		--RCR
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"4E"=>		--RRC
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"4F"=>		--RRA
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"50"=>		--LCR
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"51"=>		--LRC
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"52"=>		--LRA
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"53"=>		--SHR
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"54"=>		--SRC
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"55"=>		--SHL
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"56"=>		--SLC
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"57"=>		--NEG
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"58"=>		--CPA
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"59"=>		--CMP B
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5A"=>		--CMP C
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5B"=>		--CMP D
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5C"=>		--CMP E
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5D"=>		--CMP F
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5E"=>		--CMP GH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"5F"=>		--CMP GL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"60"=>		--CMP HH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"61"=>		--CMP HL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"62"=>		--CMP IH
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"63"=>		--CMP IL
								if(opc(3 downto 0)=X"7") then
									ltemp(31 downto 16):=reg_read_data;
								else
									temp1:=reg_read_data;
								end if;
								reg_read<='0';
								step<="010";
							when X"64"=>		--CMI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"65"=>		--CPP A
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"66"=>		--CPP C
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"67"=>		--CPP E
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"68"=>		--CPP G
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"69"=>		--CPP H
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"6A"=>		--CPP I
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"6B"=>		--DAD
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"6C"=>		--SBD
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"6D"=>		--SBDI
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when others=>
										NULL;
								end case;
								step<="010";
							


							when others=>
								NULL;
						end case;
						
						
					when "10"=>	--Master 2
						case opc(11 downto 4) is
							when X"04"=>	--STI
								interr_mask_reg_sel<='0';
								phold<='0';
								sync<='1';
								step<="000";
							when X"05"=>	--RDI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="010";
							

	
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"01"=>	--CC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"02"=>	--CNC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"03"=>	--CZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"04"=>	--CNZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"05"=>	--CEP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"06"=>	--COP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"07"=>	--CP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"08"=>	--CN
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"09"=>	--CE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0A"=>	--CNE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0B"=>	--CG
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0C"=>	--CL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0D"=>	--RET
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0E"=>	--RC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0F"=>	--RNC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"10"=>	--RZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"11"=>	--RNZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"12"=>	--REP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"13"=>	--ROP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"14"=>	--RP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"15"=>	--RN
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"16"=>	--RE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"17"=>	--RNE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"18"=>	--RG
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"19"=>	--RL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"23"=>	--JE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"24"=>	--JNE
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"25"=>	--JG
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"26"=>	--JL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
			
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"1";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"02"=>		--MOV B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"2";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"03"=>		--MOV C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"3";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"04"=>		--MOV D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"4";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"05"=>		--MOV E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"5";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"06"=>		--MOV F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"6";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"07"=>		--MOV GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"8";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"08"=>		--MOV GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"9";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"09"=>		--MOV HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"A";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"0A"=>		--MOV HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"B";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"0B"=>		--MOV IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"C";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"0C"=>		--MOV IL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									reg_sel<=X"D";
									reg_write_data<=temp1;
									reg_write<='1';
								end if;
								step<="011";
							when X"0D"=>		--MOV M
								reg_sel<=X"C";
								reg_read<='1';
								step<="011";
							when X"10"=>		--LDAX
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"11"=>		--LXI
								reg_sel<=opc(3 downto 0);
								reg_write_data<=temp1;
								reg_write<='1';
								step<="011";
							when X"12"=>		--MOVS
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="011";
							when X"13"=>		--POP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"14"=>		--PUSH
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"15"=>		--PUSM
								reg_sel<=X"D";
								reg_read<='1';
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"16"=>		--POPM
								reg_sel<=X"D";
								reg_read<='1';
								data_a<=sp(31 downto 16);
								data_b<=X"0001";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"17"=>		--XCHG A
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"18"=>		--XCHG B
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"19"=>		--XCHG C
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1A"=>		--XCHG D
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1B"=>		--XCHG E
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1C"=>		--XCHG F
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1D"=>		--XCHG GH
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1E"=>		--XCHG GL
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"1F"=>		--XCHG HH
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"20"=>		--XCHG HL
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"21"=>		--XCHG IH
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"22"=>		--XCHP A
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"23"=>		--XCHP C
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"24"=>		--XCHP E
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"25"=>		--XCHP G
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"26"=>		--XCHP H
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"27"=>		--XCHP I
								reg_sel<=X"D";
								reg_read<='1';
								step<="011";
							when X"28"=>		--STA
								add_over<="00";
								out_add<=ltemp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"29"=>		--STAX
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"2B"=>		--PUSHD
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"2C"=>		--PUSHFL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"2D"=>		--IN
								io_m_in<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2E"=>		--OUT
								out_add<=ltemp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								io_m_in<='1';
								step_count<="001";
								step<="000";
							when others=>
								NULL;
						end case;

						
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"01"=>		--ADC
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"02"=>		--ADI
								data_a<=temp2;
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"03"=>		--ACI
								data_a<=temp2;
								data_b<=temp1;
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"04"=>		--ADM
								data_a<=temp2;
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"05"=>		--ACM
								data_a<=temp2;
								data_b<=temp1;
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"06"=>		--SUB
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"07"=>		--SBB
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"08"=>		--SUI
								data_a<=temp2;
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"09"=>		--SBI
								data_a<=temp2;
								data_b<=temp1;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0A"=>		--SMU
								data_a<=temp2;
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0B"=>		--SBM
								data_a<=temp2;
								data_b<=temp1;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0C"=>		--SUBA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"0D"=>		--SBBA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"0E"=>		--SUIA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0F"=>		--SBIA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"10"=>		--SMUA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"11"=>		--SBMA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"13"=>		--MUI
								if(temp1(0)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								ltemp:=X"00000000";
								step<="011";
							when X"14"=>		--MUM
								if(temp1(0)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								ltemp:=X"00000000";
								step<="011";
							when X"15"=>		--DIV
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"16"=>		--DVI
								ltemp(31 downto 1):=ltemp(30 downto 0);
								data_a<=ltemp(31 downto 16);
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"17"=>		--DVI
								ltemp(31 downto 1):=ltemp(30 downto 0);
								data_a<=ltemp(31 downto 16);
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"18"=>		--DIVA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"19"=>		--DVIA
								ltemp(31 downto 1):=ltemp(30 downto 0);
								data_a<=ltemp(31 downto 16);
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"1A"=>		--DVIA
								ltemp(31 downto 1):=ltemp(30 downto 0);
								data_a<=ltemp(31 downto 16);
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"1B"=>		--INR
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									data_a<=temp1;
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								end if;
								step<="011";
							when X"1C"=>		--INX
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(31 downto 16);
									data_b<=X"0000";
									carry_out<=tc;
									alu_instr_sel<="01111";
									alu_en<='1';
								else
									data_a<=temp1;
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
								end if;
								step<="011";
							when X"1D"=>		--DCR
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									data_a<=temp1;
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
								end if;
								step<="011";
							when X"1E"=>		--DCX
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(31 downto 16);
									data_b<=X"0000";
									carry_out<=tc;
									alu_instr_sel<="10000";
									alu_en<='1';
								else
									data_a<=temp1;
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									reg_sel<=opc(3 downto 0);
									reg_read<='1';
								end if;
								step<="011";
							when X"1F"=>		--ANA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"20"=>		--ANR B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"2";
								end if;
								reg_read<='1';
								step<="011";
							when X"21"=>		--ANR C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"3";
								end if;
								reg_read<='1';
								step<="011";
							when X"22"=>		--ANR D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"4";
								end if;
								reg_read<='1';
								step<="011";
							when X"23"=>		--ANR E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"5";
								end if;
								reg_read<='1';
								step<="011";
							when X"24"=>		--ANR F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"6";
								end if;
								reg_read<='1';
								step<="011";
							when X"25"=>		--ANR GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"8";
								end if;
								reg_read<='1';
								step<="011";
							when X"26"=>		--ANR GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"9";
								end if;
								reg_read<='1';
								step<="011";
							when X"27"=>		--ANR HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"A";
								end if;
								reg_read<='1';
								step<="011";
							when X"28"=>		--ANR HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"B";
								end if;
								reg_read<='1';
								step<="011";
							when X"29"=>		--ANR IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"C";
								end if;
								reg_read<='1';
								step<="011";
							when X"2A"=>		--ANR IL
								reg_sel<=X"D";
								reg_read<='1';
								step<="011";
							when X"2B"=>		--ANI
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"2C"=>		--ANM
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"2D"=>		--ORA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"2E"=>		--ORR B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"2";
								end if;
								reg_read<='1';
								step<="011";
							when X"2F"=>		--ORR C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"3";
								end if;
								reg_read<='1';
								step<="011";
							when X"30"=>		--ORR D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"4";
								end if;
								reg_read<='1';
								step<="011";
							when X"31"=>		--ORR E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"5";
								end if;
								reg_read<='1';
								step<="011";
							when X"32"=>		--ORR F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"6";
								end if;
								reg_read<='1';
								step<="011";
							when X"33"=>		--ORR GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"8";
								end if;
								reg_read<='1';
								step<="011";
							when X"34"=>		--ORR GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"9";
								end if;
								reg_read<='1';
								step<="011";
							when X"35"=>		--ORR HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"A";
								end if;
								reg_read<='1';
								step<="011";
							when X"36"=>		--ORR HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"B";
								end if;
								reg_read<='1';
								step<="011";
							when X"37"=>		--ORR IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"C";
								end if;
								reg_read<='1';
								step<="011";
							when X"38"=>		--ORR IL
								reg_sel<=X"D";
								reg_read<='1';
								step<="011";
							when X"39"=>		--ORI
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"3A"=>		--ORM
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"3B"=>		--XORA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"3C"=>		--XORR B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"2";
								end if;
								reg_read<='1';
								step<="011";
							when X"3D"=>		--XORR C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"3";
								end if;
								reg_read<='1';
								step<="011";
							when X"3E"=>		--XORR D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"4";
								end if;
								reg_read<='1';
								step<="011";
							when X"3F"=>		--XORR E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"5";
								end if;
								reg_read<='1';
								step<="011";
							when X"40"=>		--XORR F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"6";
								end if;
								reg_read<='1';
								step<="011";
							when X"41"=>		--XORR GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"8";
								end if;
								reg_read<='1';
								step<="011";
							when X"42"=>		--XORR GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"9";
								end if;
								reg_read<='1';
								step<="011";
							when X"43"=>		--XORR HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"A";
								end if;
								reg_read<='1';
								step<="011";
							when X"44"=>		--XORR HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"B";
								end if;
								reg_read<='1';
								step<="011";
							when X"45"=>		--XORR IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"C";
								end if;
								reg_read<='1';
								step<="011";
							when X"46"=>		--XORR IL
								reg_sel<=X"D";
								reg_read<='1';
								step<="011";
							when X"47"=>		--XORI
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"48"=>		--XORM
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"49"=>		--NOT
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									data_a<=temp1;
									data_b<=X"0000";
									carry_out<='0';
									alu_instr_sel<="01011";
									alu_en<='1';
								end if;
								step<="011";
							when X"4A"=>		--NOA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
									reg_read<='1';
								else
									data_a<=temp1;
									data_b<=X"0000";
									carry_out<='0';
									alu_instr_sel<="01011";
									alu_en<='1';
								end if;
								step<="011";
							when X"4B"=>		--NOI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="011";
							when X"4C"=>		--NOM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="011";
							when X"4D"=>		--RCR
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00001";
								alu_en<='1';
								step<="011";
							when X"4E"=>		--RRC
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00010";
								alu_en<='1';
								step<="011";
							when X"4F"=>		--RRA
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00011";
								alu_en<='1';
								step<="011";
							when X"50"=>		--LCR
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00100";
								alu_en<='1';
								step<="011";
							when X"51"=>		--LRC
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00101";
								alu_en<='1';
								step<="011";
							when X"52"=>		--LRA
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00110";
								alu_en<='1';
								step<="011";
							when X"53"=>		--SHR
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01000";
								alu_en<='1';
								step<="011";
							when X"54"=>		--SRC
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="00111";
								alu_en<='1';
								step<="011";
							when X"55"=>		--SHL
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01010";
								alu_en<='1';
								step<="011";
							when X"56"=>		--SLC
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01001";
								alu_en<='1';
								step<="011";
							when X"57"=>		--NEG
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="10001";
								alu_en<='1';
								step<="011";
							when X"58"=>		--CPA
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"1";
								end if;
								reg_read<='1';
								step<="011";
							when X"59"=>		--CMP B
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"2";
								end if;
								reg_read<='1';
								step<="011";
							when X"5A"=>		--CMP C
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"3";
								end if;
								reg_read<='1';
								step<="011";
							when X"5B"=>		--CMP D
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"4";
								end if;
								reg_read<='1';
								step<="011";
							when X"5C"=>		--CMP E
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"5";
								end if;
								reg_read<='1';
								step<="011";
							when X"5D"=>		--CMP F
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"6";
								end if;
								reg_read<='1';
								step<="011";
							when X"5E"=>		--CMP GH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"8";
								end if;
								reg_read<='1';
								step<="011";
							when X"5F"=>		--CMP GL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"9";
								end if;
								reg_read<='1';
								step<="011";
							when X"60"=>		--CMP HH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"A";
								end if;
								reg_read<='1';
								step<="011";
							when X"61"=>		--CMP HL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"B";
								end if;
								reg_read<='1';
								step<="011";
							when X"62"=>		--CMP IH
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"D";
								else
									reg_sel<=X"C";
								end if;
								reg_read<='1';
								step<="011";
							when X"63"=>		--CMP IL
								reg_sel<=X"D";
								reg_read<='1';
								step<="011";
							when X"64"=>		--CMI
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"65"=>		--CPP A
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"1";
								else
									reg_sel<=X"2";
								end if;
								reg_read<='1';
								step<="011";
							when X"66"=>		--CPP C
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"3";
								else
									reg_sel<=X"4";
								end if;
								reg_read<='1';
								step<="011";
							when X"67"=>		--CPP E
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"5";
								else
									reg_sel<=X"6";
								end if;
								reg_read<='1';
								step<="011";
							when X"68"=>		--CPP G
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"8";
								else
									reg_sel<=X"9";
								end if;
								reg_read<='1';
								step<="011";
							when X"69"=>		--CPP H
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"A";
								else
									reg_sel<=X"B";
								end if;
								reg_read<='1';
								step<="011";
							when X"6A"=>		--CPP I
								reg_sel<=X"C";
								reg_read<='1';
								data_b<=sp(15 downto 0);
								data_a<=temp1;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"C";
									data_b<=sp(15 downto 0);
									data_a<=temp1;
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								else
									reg_sel<=X"D";
								end if;
								reg_read<='1';
								step<="011";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"C";
									data_a<=temp1;
									data_b<=sp(15 downto 0);
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
								else
									reg_sel<=X"D";
								end if;
								reg_read<='1';
								step<="011";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									reg_sel<=X"C";
									data_a<=sp(15 downto 0);
									data_b<=temp1;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
								else
									reg_sel<=X"D";
								end if;
								reg_read<='1';
								step<="011";
							


							when others=>
								NULL;
						end case;
						
						
					when "10"=>	--Master 2
						case opc(11 downto 4) is
							when X"04"=>	--STI
								interr_mask_reg_sel<='0';
								phold<='0';
								sync<='1';
								step<="000";
							when X"05"=>	--RDI
								reg_write<='0';
								phold<='0';
								sync<='1';
								step<="000";
							

	
							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"01"=>	--CC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"02"=>	--CNC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"03"=>	--CZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"04"=>	--CNZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"05"=>	--CEP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"06"=>	--COP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"07"=>	--CP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"08"=>	--CN
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"09"=>	--CE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0A"=>	--CNE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0B"=>	--CG
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0C"=>	--CL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0D"=>	--RET
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"0E"=>	--RC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"0F"=>	--RNC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"10"=>	--RZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"11"=>	--RNZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"12"=>	--REP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"13"=>	--ROP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"14"=>	--RP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"15"=>	--RN
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"16"=>	--RE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"17"=>	--RNE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"18"=>	--RG
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"19"=>	--RL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"23"=>	--JE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"24"=>	--JNE
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"25"=>	--JG
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"26"=>	--JL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;

			when "011"=>--step 3
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"02"=>		--MOV B
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"03"=>		--MOV C
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"04"=>		--MOV D
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"05"=>		--MOV E
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"06"=>		--MOV F
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"07"=>		--MOV GH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"08"=>		--MOV GL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"09"=>		--MOV HH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"0A"=>		--MOV HL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"0B"=>		--MOV IH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"0C"=>		--MOV IL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
									step<="100";
								else
									reg_write<='0';
									phold<='0';
									sync<='1';
									step<="000";
								end if;
							when X"0D"=>		--MOV M
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"10"=>		--LDAX
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"11"=>		--LXI
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"12"=>		--MOVS
								reg_sel<=X"C";
								reg_read<='1';
								data_a<=ltemp(15 downto 0);
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="100";
							when X"13"=>		--POP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"14"=>		--PUSH
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"15"=>		--PUSM
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"16"=>		--POPM
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"17"=>		--XCHG A
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"18"=>		--XCHG B
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"19"=>		--XCHG C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1A"=>		--XCHG D
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1B"=>		--XCHG E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1C"=>		--XCHG F
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1D"=>		--XCHG GH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1E"=>		--XCHG GL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"1F"=>		--XCHG HH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"20"=>		--XCHG HL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"21"=>		--XCHG IH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"22"=>		--XCHP A
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"23"=>		--XCHP C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"24"=>		--XCHP E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"25"=>		--XCHP G
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"26"=>		--XCHP H
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"27"=>		--XCHP I
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"29"=>		--STAX
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"3"=>	--C
										opc(3 downto 0):=X"4";
									when X"5"=>	--E
										opc(3 downto 0):=X"6";
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when others=>
										NULL;
								end case;
								step<="100";
							when X"2B"=>		--PUSHD
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"2C"=>		--PUSHFL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when others=>
								NULL;
						end case;

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"01"=>		--ADC
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"02"=>		--ADI
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"03"=>		--ACI
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"04"=>		--ADM
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"05"=>		--ACM
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"06"=>		--SUB
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"07"=>		--SBB
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"08"=>		--SUI
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"09"=>		--SBI
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0A"=>		--SMU
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0B"=>		--SBM
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0C"=>		--SUBA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"0D"=>		--SBBA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"0E"=>		--SUIA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0F"=>		--SBIA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"10"=>		--SMUA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"11"=>		--SBMA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"13"=>		--MUI
								ltemp(16 downto 0):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"14"=>		--MUM
								ltemp(16 downto 0):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"15"=>		--DIV
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"16"=>		--DVI


							when X"1B"=>		--INR
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp1:=alu_result(15 downto 0);
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):=alu_result(17);
									alu_en<='0';
								end if;
								step<="100";
							when X"1C"=>		--INX
								if(opc(3 downto 0)=X"F") then
									sp(31 downto 16):=alu_result(15 downto 0);
									sync<='1';
									phold<='0';
									step<="000";
								else
									temp1:=alu_result(15 downto 0);
									temp2:=reg_read_data;
									reg_read<='0';
									step<="100";
									case opc(3 downto 0) is
										when X"3"=>	--D
											opc(3 downto 0):=X"4";
										when X"5"=>	--F
											opc(3 downto 0):=X"6";
										when X"8"=>	--GL
											opc(3 downto 0):=X"9";
										when X"A"=>	--HL
											opc(3 downto 0):=X"B";
										when X"C"=>	--IL
											opc(3 downto 0):=X"D";
										when others=>
											NULL;
									end case;
								end if;
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
							when X"1D"=>		--DCR
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp1:=alu_result(15 downto 0);
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):=alu_result(17);
									alu_en<='0';
								end if;
								step<="100";
							when X"1E"=>		--DCX
								if(opc(3 downto 0)=X"F") then
									sp(31 downto 16):=alu_result(15 downto 0);
									sync<='1';
									phold<='0';
									step<="000";
								else
									temp1:=alu_result(15 downto 0);
									temp2:=reg_read_data;
									reg_read<='0';
									step<="100";
									case opc(3 downto 0) is
										when X"3"=>	--D
											opc(3 downto 0):=X"4";
										when X"5"=>	--F
											opc(3 downto 0):=X"6";
										when X"8"=>	--GL
											opc(3 downto 0):=X"9";
										when X"A"=>	--HL
											opc(3 downto 0):=X"B";
										when X"C"=>	--IL
											opc(3 downto 0):=X"D";
										when others=>
											NULL;
									end case;
								end if;
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
							when X"1F"=>		--ANA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"20"=>		--ANR B
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"21"=>		--ANR C
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"22"=>		--ANR D
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"23"=>		--ANR E
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"24"=>		--ANR F
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"25"=>		--ANR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"26"=>		--ANR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"27"=>		--ANR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"28"=>		--ANR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"29"=>		--ANR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"2A"=>		--ANR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"2B"=>		--ANI
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"2C"=>		--ANM
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"2D"=>		--ORA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"2E"=>		--ORR B
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"2F"=>		--ORR C
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"30"=>		--ORR D
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"31"=>		--ORR E
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"32"=>		--ORR F
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"33"=>		--ORR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"34"=>		--ORR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"35"=>		--ORR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"36"=>		--ORR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"37"=>		--ORR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"38"=>		--ORR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"39"=>		--ORI
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"3A"=>		--ORM
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"3B"=>		--XORA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"3C"=>		--XORR B
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"3D"=>		--XORR C
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"3E"=>		--XORR D
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"3F"=>		--XORR E
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"40"=>		--XORR F
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"41"=>		--XORR GH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"42"=>		--XORR GL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"43"=>		--XORR HH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"44"=>		--XORR HL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"45"=>		--XORR IH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"46"=>		--XORR IL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"47"=>		--XORI
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"48"=>		--XORM
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"49"=>		--NOT
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
								else
									temp1:=alu_result(15 downto 0);
									flag(0):='0';
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								end if;
								step<="100";
							when X"4A"=>		--NOA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
									reg_read<='0';
								else
									temp1:=alu_result(15 downto 0);
									flag(0):='0';
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								end if;
								step<="100";
							when X"4B"=>		--NOI
								reg_write<='0';
								sync<='1';
								data_opc<='0';
								phold<='0';
								step<="000";
							when X"4C"=>		--NOM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"4D"=>		--RCR
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"4E"=>		--RRC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"4F"=>		--RRA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"50"=>		--LCR
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"51"=>		--LRC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"52"=>		--LRA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"53"=>		--SHR
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"54"=>		--SRC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"55"=>		--SHL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"56"=>		--SLC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"57"=>		--NEG
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"58"=>		--CPA
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"59"=>		--CMP B
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5A"=>		--CMP C
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5B"=>		--CMP D
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5C"=>		--CMP E
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5D"=>		--CMP F
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5E"=>		--CMP GH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"5F"=>		--CMP GL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"60"=>		--CMP HH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"61"=>		--CMP HL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"62"=>		--CMP IH
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"63"=>		--CMP IL
								if(opc(3 downto 0)=X"7") then
									ltemp(15 downto 0):=reg_read_data;
								else
									temp2:=reg_read_data;
								end if;
								reg_read<='0';
								step<="100";
							when X"64"=>		--CMI
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								data_opc<='0';
								step<="000";
							when X"65"=>		--CPP A
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"66"=>		--CPP C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"67"=>		--CPP E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"68"=>		--CPP G
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"69"=>		--CPP H
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6A"=>		--CPP I
								temp2:=reg_read_data;
								reg_read<='0';
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									temp1:=alu_result(15 downto 0);
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								else
									NULL;
								end if;
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									temp1:=alu_result(15 downto 0);
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								else
									NULL;
								end if;
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									temp1:=alu_result(15 downto 0);
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								else
									NULL;
								end if;
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"01"=>	--CC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"02"=>	--CNC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"03"=>	--CZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"04"=>	--CNZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"05"=>	--CEP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"06"=>	--COP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"07"=>	--CP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"08"=>	--CN
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"09"=>	--CE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0A"=>	--CNE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0B"=>	--CG
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0C"=>	--CL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0D"=>	--RET
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0E"=>	--RC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0F"=>	--RNC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"10"=>	--RZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"11"=>	--RNZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"12"=>	--REP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"13"=>	--ROP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"14"=>	--RP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"15"=>	--RN
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"16"=>	--RE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"17"=>	--RNE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"18"=>	--RG
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"19"=>	--RL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"23"=>	--JE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"24"=>	--JNE
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"25"=>	--JG
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"26"=>	--JL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
			
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"02"=>		--MOV B
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"03"=>		--MOV C
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"04"=>		--MOV D
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"05"=>		--MOV E
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"06"=>		--MOV F
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"07"=>		--MOV GH
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"08"=>		--MOV GL
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"09"=>		--MOV HH
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"0A"=>		--MOV HL
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"0B"=>		--MOV IH
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"0C"=>		--MOV IL
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"0D"=>		--MOV M
								reg_sel<=X"D";
								reg_read<='1';
								step<="101";
							when X"10"=>		--LDAX
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								sync<='1';
								step<="000";
							when X"12"=>		--MOVS
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								ltemp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="101";
							when X"13"=>		--POP
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"14"=>		--PUSH
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"15"=>		--PUSM
								out_add<=ltemp;
								add_over<="01";
								sync<='1';
								step_count<="001";
								step<="000";
							when X"16"=>		--POPM
								out_add<=ltemp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"17"=>		--XCHG A
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"18"=>		--XCHG B
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"19"=>		--XCHG C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1A"=>		--XCHG D
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1B"=>		--XCHG E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1C"=>		--XCHG F
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1D"=>		--XCHG GH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1E"=>		--XCHG GL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"1F"=>		--XCHG HH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"20"=>		--XCHG HL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"21"=>		--XCHG IH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"22"=>		--XCHP A
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"23"=>		--XCHP C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"24"=>		--XCHP E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"25"=>		--XCHP G
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"26"=>		--XCHP H
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"27"=>		--XCHP I
								reg_write_data<=sp(31 downto 16);
								reg_sel<=X"C";
								reg_write<='1';
								step<="101";
							when X"29"=>		--STAX
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="101";
							when X"2B"=>		--PUSHD
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								case opc(3 downto 0) is
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step_count<="001";
								step<="000";
							when X"2C"=>		--PUSHFL
								out_add<=sp;
								out_blk_data<=flag;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when others=>
								NULL;
						end case;
						


						
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp2;
									data_b<=temp1;
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
									step<="101";
								end if;
							when X"01"=>		--ADC
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp2;
									data_b<=temp1;
									carry_out<=flag(0);
									alu_instr_sel<="01111";
									alu_en<='1';
									step<="101";
								end if;
							when X"02"=>		--ADI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"03"=>		--ACI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"04"=>		--ADM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"05"=>		--ACM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"06"=>		--SUB
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp2;
									data_b<=temp1;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"07"=>		--SBB
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp2;
									data_b<=temp1;
									carry_out<=flag(0);
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"08"=>		--SUI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"09"=>		--SBI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0A"=>		--SMU
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0B"=>		--SBM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0C"=>		--SUBA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"0D"=>		--SBBA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<=flag(0);
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"0E"=>		--SUIA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0F"=>		--SBIA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"10"=>		--SMUA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"11"=>		--SBMA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									if(temp1(0)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=X"0000";
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
									ltemp:=X"00000000";
									step<="101";
								end if;
							when X"13"=>		--MUI
								if(temp1(1)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(16 downto 1);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"14"=>		--MUM
								if(temp1(1)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(16 downto 1);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							


							when X"1B"=>		--INR
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									reg_write_data<=temp1;
									reg_sel<=opc(3 downto 0);
									reg_write<='1';
									step<="101";
								end if;
							when X"1C"=>		--INX
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								data_a<=temp2;
								data_b<=X"0000";
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"1D"=>		--DCR
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									reg_write_data<=temp1;
									reg_sel<=opc(3 downto 0);
									reg_write<='1';
									step<="101";
								end if;
							when X"1E"=>		--DCX
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								data_a<=temp2;
								data_b<=X"0000";
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"1F"=>		--ANA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"20"=>		--ANR B
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"21"=>		--ANR C
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"22"=>		--ANR D
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"23"=>		--ANR E
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"24"=>		--ANR F
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"25"=>		--ANR GH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"26"=>		--ANR GL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"27"=>		--ANR HH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"28"=>		--ANR HL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"29"=>		--ANR IH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"2A"=>		--ANR IL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01100";
									alu_en<='1';
									step<="101";
								end if;
							when X"2B"=>		--ANI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2C"=>		--ANM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2D"=>		--ORA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"2E"=>		--ORR B
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"2F"=>		--ORR C
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"30"=>		--ORR D
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"31"=>		--ORR E
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"32"=>		--ORR F
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"33"=>		--ORR GH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"34"=>		--ORR GL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"35"=>		--ORR HH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"36"=>		--ORR HL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"37"=>		--ORR IH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"38"=>		--ORR IL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01101";
									alu_en<='1';
									step<="101";
								end if;
							when X"39"=>		--ORI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3A"=>		--ORM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3B"=>		--XORA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"3C"=>		--XORR B
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"3D"=>		--XORR C
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"3E"=>		--XORR D
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"3F"=>		--XORR E
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"40"=>		--XORR F
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"41"=>		--XORR GH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"42"=>		--XORR GL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"43"=>		--XORR HH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"44"=>		--XORR HL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"45"=>		--XORR IH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"46"=>		--XORR IL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="01110";
									alu_en<='1';
									step<="101";
								end if;
							when X"47"=>		--XORI
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"48"=>		--XORM
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"49"=>		--NOT
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									reg_write_data<=temp1;
									reg_sel<=opc(3 downto 0);
									reg_write<='1';
									step<="101";
								end if;
							when X"4A"=>		--NOA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									reg_write_data<=temp1;
									reg_sel<=X"1";
									reg_write<='1';
									step<="101";
								end if;
							when X"4D"=>		--RCR
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"4E"=>		--RRC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"4F"=>		--RRA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"50"=>		--LCR
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"51"=>		--LRC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"52"=>		--LRA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"53"=>		--SHR
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"54"=>		--SRC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"55"=>		--SHL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"56"=>		--SLC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"57"=>		--NEG
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"58"=>		--CPA
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"59"=>		--CMP B
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5A"=>		--CMP C
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5B"=>		--CMP D
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5C"=>		--CMP E
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5D"=>		--CMP F
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5E"=>		--CMP GH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"5F"=>		--CMP GL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"60"=>		--CMP HH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"61"=>		--CMP HL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"62"=>		--CMP IH
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"63"=>		--CMP IL
								if(opc(3 downto 0)=X"7") then
									out_add<=ltemp;
									add_over<="01";
									sync<='1';
									step_count<="001";
									step<="000";
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="101";
								end if;
							when X"65"=>		--CPP A
								data_a<=temp1;
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(15 downto 0);
								else
									data_b<=temp2;
								end if;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"66"=>		--CPP C
								data_a<=temp1;
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(15 downto 0);
								else
									data_b<=temp2;
								end if;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"67"=>		--CPP E
								data_a<=temp1;
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(15 downto 0);
								else
									data_b<=temp2;
								end if;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"68"=>		--CPP G
								data_a<=temp1;
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(15 downto 0);
								else
									data_b<=temp2;
								end if;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"69"=>		--CPP H
								data_a<=temp1;
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(15 downto 0);
								else
									data_b<=temp2;
								end if;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"6A"=>		--CPP I
								data_b<=sp(31 downto 16);
								data_a<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(31 downto 16);
									data_b<=temp2;
									carry_out<=flag(0);
									reg_write_data<=temp1;
									reg_sel<=X"D";
									reg_write<='1';
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
								end if;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									data_b<=sp(31 downto 16);
									data_a<=temp2;
									carry_out<=flag(0);
									reg_write_data<=temp1;
									reg_sel<=X"D";
									reg_write<='1';
								else
									data_b<=temp1;
									data_a<=temp2;
									carry_out<='0';
								end if;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									data_a<=sp(31 downto 16);
									data_b<=temp2;
									carry_out<=flag(0);
									reg_write_data<=temp1;
									reg_sel<=X"D";
									reg_write<='1';
								else
									data_a<=temp1;
									data_b<=temp2;
									carry_out<='0';
								end if;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								out_add<=sp;
								out_blk_data<=temp2;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"01"=>	--CC
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
								step<="100";
							when X"02"=>	--CNC
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"03"=>	--CZ
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"04"=>	--CNZ
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"05"=>	--CEP
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"06"=>	--COP
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"07"=>	--CP
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"08"=>	--CN
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"09"=>	--CE
								if(flag(6)='1') then
									add_over<="10";
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"0A"=>	--CNE
								if(flag(6)='0') then
									add_over<="10";
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"0B"=>	--CG
								if(flag(6)='0' and flag(0)='1') then
									add_over<="10";
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"0C"=>	--CL
								if(flag(6)='0' and flag(0)='0') then
									add_over<="10";
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"0D"=>	--RET
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"0E"=>	--RC
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"0F"=>	--RNC
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"10"=>	--RZ
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"11"=>	--RNZ
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"12"=>	--REP
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"13"=>	--ROP
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"14"=>	--RP
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"15"=>	--RN
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="001";
								step<="000";
							when X"16"=>	--RE
								sync<='1';
								sf:='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='0') then
									phold<='0';
									data_opc<='0';
								else
									out_add<=sp;
									add_over<="01";
									step_count<="001";
								end if;
								step<="000";
							when X"17"=>	--RNE
								sync<='1';
								sf:='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='1') then
									phold<='0';
									data_opc<='0';
								else
									out_add<=sp;
									add_over<="01";
									step_count<="001";
								end if;
								step<="000";
							when X"18"=>	--RG
								sync<='1';
								sf:='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='1' and flag(0)='0') then
									phold<='0';
									data_opc<='0';
								else
									out_add<=sp;
									add_over<="01";
									step_count<="001";
								end if;
								step<="000";
							when X"19"=>	--RL
								sync<='1';
								sf:='0';
								if((se='1' or sp=X"FFFFFFFF") and flag(6)='1' and flag(0)='1') then
									phold<='0';
									data_opc<='0';
								else
									out_add<=sp;
									add_over<="01";
									step_count<="001";
								end if;
								step<="000";
							when X"23"=>	--JE
								if(flag(6)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"24"=>	--JNE
								if(flag(6)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"25"=>	--JG
								if(flag(6)='0' and flag(0)='1') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							when X"26"=>	--JL
								if(flag(6)='0' and flag(0)='0') then
									out_add<=ltemp;
									add_over<="01";
									pc_wr<='1';
									step_count<="001";
								else
									phold<='0';
									data_opc<='0';
								end if;
								sync<='1';
								step<="000";
							
							when others=>
								NULL;
						end case;
					
					when others=>
						NULL;
				end case;
				
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0D"=>		--MOV M
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="110";
							when X"12"=>		--MOVS
								data_a<=ltemp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="110";
							when X"17"=>		--XCHG A
								reg_write<='0';
								step<="110";
							when X"18"=>		--XCHG B
								reg_write<='0';
								step<="110";
							when X"19"=>		--XCHG C
								reg_write<='0';
								step<="110";
							when X"1A"=>		--XCHG D
								reg_write<='0';
								step<="110";
							when X"1B"=>		--XCHG E
								reg_write<='0';
								step<="110";
							when X"1C"=>		--XCHG F
								reg_write<='0';
								step<="110";
							when X"1D"=>		--XCHG GH
								reg_write<='0';
								step<="110";
							when X"1E"=>		--XCHG GL
								reg_write<='0';
								step<="110";
							when X"1F"=>		--XCHG HH
								reg_write<='0';
								step<="110";
							when X"20"=>		--XCHG HL
								reg_write<='0';
								step<="110";
							when X"21"=>		--XCHG IH
								reg_write<='0';
								step<="110";
							when X"22"=>		--XCHP A
								reg_write<='0';
								step<="110";
							when X"23"=>		--XCHP C
								reg_write<='0';
								step<="110";
							when X"24"=>		--XCHP E
								reg_write<='0';
								step<="110";
							when X"25"=>		--XCHP G
								reg_write<='0';
								step<="110";
							when X"26"=>		--XCHP H
								reg_write<='0';
								step<="110";
							when X"27"=>		--XCHP I
								reg_write<='0';
								step<="110";
							when X"29"=>		--STAX
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="110";
							when others=>
								NULL;
						end case;
						


						
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"01"=>		--ADC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"02"=>		--ADI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"03"=>		--ACI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"04"=>		--ADM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"05"=>		--ACM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"06"=>		--SUB
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"07"=>		--SBB
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"08"=>		--SUI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"09"=>		--SBI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"0A"=>		--SMU
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"0B"=>		--SBM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"0C"=>		--SUBA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"0D"=>		--SBBA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="110";
							when X"0E"=>		--SUIA
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"0F"=>		--SBIA
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"10"=>		--SMUA
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"11"=>		--SBMA
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"12"=>		--MUL
								ltemp(16 downto 0):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"13"=>		--MUI
								ltemp(17 downto 1):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"14"=>		--MUM
								ltemp(17 downto 1):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							


							when X"1B"=>		--INR
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1C"=>		--INX
								reg_write<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								temp2:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"1D"=>		--DCR
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1E"=>		--DCX
								reg_write<='0';
								case opc(3 downto 0) is
									when X"4"=>	--D
										opc(3 downto 0):=X"3";
									when X"6"=>	--F
										opc(3 downto 0):=X"5";
									when X"9"=>	--GL
										opc(3 downto 0):=X"8";
									when X"B"=>	--HL
										opc(3 downto 0):=X"A";
									when X"D"=>	--IL
										opc(3 downto 0):=X"C";
									when others=>
										NULL;
								end case;
								temp2:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"1F"=>		--ANA
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"20"=>		--ANR B
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"21"=>		--ANR C
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"22"=>		--ANR D
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"23"=>		--ANR E
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"24"=>		--ANR F
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"25"=>		--ANR GH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"26"=>		--ANR GL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"27"=>		--ANR HH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"28"=>		--ANR HL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"29"=>		--ANR IH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"2A"=>		--ANR IL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"2B"=>		--ANI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2C"=>		--ANM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"2D"=>		--ORA
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"2E"=>		--ORR B
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"2F"=>		--ORR C
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"30"=>		--ORR D
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"31"=>		--ORR E
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"32"=>		--ORR F
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"33"=>		--ORR GH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"34"=>		--ORR GL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"35"=>		--ORR HH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"36"=>		--ORR HL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"37"=>		--ORR IH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"38"=>		--ORR IL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"39"=>		--ORI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3A"=>		--ORM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"3B"=>		--XORA
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"3C"=>		--XORR B
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"3D"=>		--XORR C
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"3E"=>		--XORR D
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"3F"=>		--XORR E
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"40"=>		--XORR F
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"41"=>		--XORR GH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"42"=>		--XORR GL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"43"=>		--XORR HH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"44"=>		--XORR HL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"45"=>		--XORR IH
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"46"=>		--XORR IL
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"47"=>		--XORI
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"48"=>		--XORM
								reg_write<='0';
								sync<='1';
								step_count<="001";
								step<="000";
							when X"49"=>		--NOT
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"4A"=>		--NOA
								reg_write<='0';
								data_opc<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"4D"=>		--RCR
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"4E"=>		--RRC
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"4F"=>		--RRA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"50"=>		--LCR
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"51"=>		--LRC
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"52"=>		--LRA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"53"=>		--SHR
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"54"=>		--SRC
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"55"=>		--SHL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"56"=>		--SLC
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"57"=>		--NEG
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"58"=>		--CPA
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"59"=>		--CMP B
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5A"=>		--CMP C
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5B"=>		--CMP D
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5C"=>		--CMP E
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5D"=>		--CMP F
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5E"=>		--CMP GH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"5F"=>		--CMP GL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"60"=>		--CMP HH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"61"=>		--CMP HL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"62"=>		--CMP IH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"63"=>		--CMP IL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"65"=>		--CPP A
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								if(opc(3 downto 0)=X"F") then
									step<="110";
								else
									step_count<="001";
									step<="000";
								end if;
							when X"66"=>		--CPP C
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								if(opc(3 downto 0)=X"F") then
									step<="110";
								else
									step_count<="001";
									step<="000";
								end if;
							when X"67"=>		--CPP E
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								if(opc(3 downto 0)=X"F") then
									step<="110";
								else
									step_count<="001";
									step<="000";
								end if;
							when X"68"=>		--CPP G
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								if(opc(3 downto 0)=X"F") then
									step<="110";
								else
									step_count<="001";
									step<="000";
								end if;
							when X"69"=>		--CPP H
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								if(opc(3 downto 0)=X"F") then
									step<="110";
								else
									step_count<="001";
									step<="000";
								end if;
							when X"6A"=>		--CPP I
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									temp2:=alu_result(15 downto 0);
									reg_write<='0';
								else
									temp1:=alu_result(15 downto 0);
								end if;
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									temp2:=alu_result(15 downto 0);
									reg_write<='0';
								else
									temp1:=alu_result(15 downto 0);
								end if;
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									temp2:=alu_result(15 downto 0);
									reg_write<='0';
								else
									temp1:=alu_result(15 downto 0);
								end if;
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "110"=>--step 6
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"0D"=>		--MOV M
								out_add<=ltemp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when X"12"=>		--MOVS
								ltemp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="111";
							when X"17"=>		--XCHG A
								reg_write_data<=temp2;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"18"=>		--XCHG B
								reg_write_data<=temp2;
								reg_sel<=X"2";
								reg_write<='1';
								step<="111";
							when X"19"=>		--XCHG C
								reg_write_data<=temp2;
								reg_sel<=X"3";
								reg_write<='1';
								step<="111";
							when X"1A"=>		--XCHG D
								reg_write_data<=temp2;
								reg_sel<=X"4";
								reg_write<='1';
								step<="111";
							when X"1B"=>		--XCHG E
								reg_write_data<=temp2;
								reg_sel<=X"5";
								reg_write<='1';
								step<="111";
							when X"1C"=>		--XCHG F
								reg_write_data<=temp2;
								reg_sel<=X"6";
								reg_write<='1';
								step<="111";
							when X"1D"=>		--XCHG GH
								reg_write_data<=temp2;
								reg_sel<=X"8";
								reg_write<='1';
								step<="111";
							when X"1E"=>		--XCHG GL
								reg_write_data<=temp2;
								reg_sel<=X"9";
								reg_write<='1';
								step<="111";
							when X"1F"=>		--XCHG HH
								reg_write_data<=temp2;
								reg_sel<=X"A";
								reg_write<='1';
								step<="111";
							when X"20"=>		--XCHG HL
								reg_write_data<=temp2;
								reg_sel<=X"B";
								reg_write<='1';
								step<="111";
							when X"21"=>		--XCHG IH
								reg_write_data<=temp2;
								reg_sel<=X"C";
								reg_write<='1';
								step<="111";
							when X"22"=>		--XCHP A
								reg_write_data<=temp2;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"23"=>		--XCHP C
								reg_write_data<=temp2;
								reg_sel<=X"3";
								reg_write<='1';
								step<="111";
							when X"24"=>		--XCHP E
								reg_write_data<=temp2;
								reg_sel<=X"5";
								reg_write<='1';
								step<="111";
							when X"25"=>		--XCHP G
								reg_write_data<=temp2;
								reg_sel<=X"8";
								reg_write<='1';
								step<="111";
							when X"26"=>		--XCHP H
								reg_write_data<=temp2;
								reg_sel<=X"A";
								reg_write<='1';
								step<="111";
							when X"27"=>		--XCHP I
								reg_write_data<=sp(15 downto 0);
								reg_sel<=X"D";
								reg_write<='1';
								step<="111";
							when X"29"=>		--STAX
								out_add<=ltemp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="001";
								step<="000";
							when others=>
								NULL;
						end case;
						


						
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"01"=>		--ADC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"06"=>		--SUB
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"07"=>		--SBB
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"0C"=>		--SUBA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"0D"=>		--SBBA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="111";
							when X"12"=>		--MUL
								if(temp1(1)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(16 downto 1);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"13"=>		--MUI
								if(temp1(2)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(17 downto 2);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"14"=>		--MUM
								if(temp1(2)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(17 downto 2);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							


							when X"1C"=>		--INX
								reg_write_data<=temp2;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"1E"=>		--DCX
								reg_write_data<=temp2;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"1F"=>		--ANA
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"20"=>		--ANR B
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"21"=>		--ANR C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"22"=>		--ANR D
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"23"=>		--ANR E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"24"=>		--ANR F
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"25"=>		--ANR GH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"26"=>		--ANR GL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"27"=>		--ANR HH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"28"=>		--ANR HL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"29"=>		--ANR IH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"2A"=>		--ANR IL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"2D"=>		--ORA
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"2E"=>		--ORR B
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"2F"=>		--ORR C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"30"=>		--ORR D
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"31"=>		--ORR E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"32"=>		--ORR F
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"33"=>		--ORR GH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"34"=>		--ORR GL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"35"=>		--ORR HH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"36"=>		--ORR HL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"37"=>		--ORR IH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"38"=>		--ORR IL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"3B"=>		--XORA
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"3C"=>		--XORR B
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"3D"=>		--XORR C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"3E"=>		--XORR D
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"3F"=>		--XORR E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"40"=>		--XORR F
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"41"=>		--XORR GH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"42"=>		--XORR GL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"43"=>		--XORR HH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"44"=>		--XORR HL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"45"=>		--XORR IH
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"46"=>		--XORR IL
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="111";
							when X"65"=>		--CPP A
								data_a<=temp2;
								data_b<=sp(31 downto 16);
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="111";
							when X"66"=>		--CPP C
								data_a<=temp2;
								data_b<=sp(31 downto 16);
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="111";
							when X"67"=>		--CPP E
								data_a<=temp2;
								data_b<=sp(31 downto 16);
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="111";
							when X"68"=>		--CPP G
								data_a<=temp2;
								data_b<=sp(31 downto 16);
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="111";
							when X"69"=>		--CPP H
								data_a<=temp2;
								data_b<=sp(31 downto 16);
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="111";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									reg_write_data<=temp2;
									reg_sel<=X"c";
								else
									reg_write_data<=temp1;
									reg_sel<=X"D";
								end if;
								reg_write<='1';
								step<="111";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									reg_write_data<=temp2;
									reg_sel<=X"c";
								else
									reg_write_data<=temp1;
									reg_sel<=X"D";
								end if;
								reg_write<='1';
								step<="111";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									reg_write_data<=temp2;
									reg_sel<=X"c";
								else
									reg_write_data<=temp1;
									reg_sel<=X"D";
								end if;
								reg_write<='1';
								step<="111";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "111"=>--step 7
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								out_add<=ltemp;
								add_over<="01";
								sync<='1';
								step_count<="001";
								step<="000";
							when X"17"=>		--XCHG A
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"18"=>		--XCHG B
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"19"=>		--XCHG C
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1A"=>		--XCHG D
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1B"=>		--XCHG E
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1C"=>		--XCHG F
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1D"=>		--XCHG GH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1E"=>		--XCHG GL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1F"=>		--XCHG HH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"20"=>		--XCHG HL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"21"=>		--XCHG IH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"22"=>		--XCHP A
								reg_write<='0';
								step_count<="001";
								step<="000";
							when X"23"=>		--XCHP C
								reg_write<='0';
								step_count<="001";
								step<="000";
							when X"24"=>		--XCHP E
								reg_write<='0';
								step_count<="001";
								step<="000";
							when X"25"=>		--XCHP G
								reg_write<='0';
								step_count<="001";
								step<="000";
							when X"26"=>		--XCHP H
								reg_write<='0';
								step_count<="001";
								step<="000";
							when X"27"=>		--XCHP I
								reg_write<='0';
								sp:=ltemp;
								sync<='1';
								phold<='0';
								step<="000";
							when others=>
								NULL;
						end case;
						


						
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"01"=>		--ADC
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"06"=>		--SUB
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"07"=>		--SBB
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"0C"=>		--SUBA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"0D"=>		--SBBA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"12"=>		--MUL
								ltemp(17 downto 1):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="001";
								step<="000";
							when X"13"=>		--MUI
								ltemp(18 downto 2):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="001";
								step<="000";
							when X"14"=>		--MUM
								ltemp(18 downto 2):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="001";
								step<="000";
							


							when X"1C"=>		--INX
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1E"=>		--DCX
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"1F"=>		--ANA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"20"=>		--ANR B
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"21"=>		--ANR C
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"22"=>		--ANR D
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"23"=>		--ANR E
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"24"=>		--ANR F
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"25"=>		--ANR GH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"26"=>		--ANR GL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"27"=>		--ANR HH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"28"=>		--ANR HL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"29"=>		--ANR IH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2A"=>		--ANR IL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2D"=>		--ORA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2E"=>		--ORR B
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"2F"=>		--ORR C
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"30"=>		--ORR D
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"31"=>		--ORR E
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"32"=>		--ORR F
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"33"=>		--ORR GH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"34"=>		--ORR GL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"35"=>		--ORR HH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"36"=>		--ORR HL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"37"=>		--ORR IH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"38"=>		--ORR IL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3B"=>		--XORA
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3C"=>		--XORR B
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3D"=>		--XORR C
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3E"=>		--XORR D
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"3F"=>		--XORR E
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"40"=>		--XORR F
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"41"=>		--XORR GH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"42"=>		--XORR GL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"43"=>		--XORR HH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"44"=>		--XORR HL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"45"=>		--XORR IH
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"46"=>		--XORR IL
								reg_write<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"65"=>		--CPP A
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"66"=>		--CPP C
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"67"=>		--CPP E
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"68"=>		--CPP G
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"69"=>		--CPP H
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step<="000";
							when X"6B"=>		--DAD
								if(opc(3 downto 0)=X"F") then
									sync<='1';
									phold<='0';
								else
									step_count<="001";
								end if;
								reg_write<='0';
								step<="000";
							when X"6C"=>		--SBD
								if(opc(3 downto 0)=X"F") then
									sync<='1';
									phold<='0';
								else
									step_count<="001";
								end if;
								reg_write<='0';
								step<="000";
							when X"6D"=>		--SBDI
								if(opc(3 downto 0)=X"F") then
									sync<='1';
									phold<='0';
								else
									step_count<="001";
								end if;
								reg_write<='0';
								step<="000";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when others=>
				NULL;
		end case; 
			
	when "001"=>--step count is 1
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								reg_sel<=X"1";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"02"=>		--MOV B
								reg_sel<=X"2";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"03"=>		--MOV C
								reg_sel<=X"3";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"04"=>		--MOV D
								reg_sel<=X"4";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"05"=>		--MOV E
								reg_sel<=X"5";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"06"=>		--MOV F
								reg_sel<=X"6";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"07"=>		--MOV GH
								reg_sel<=X"8";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"08"=>		--MOV GL
								reg_sel<=X"9";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"09"=>		--MOV HH
								reg_sel<=X"A";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"0A"=>		--MOV HL
								reg_sel<=X"B";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"0B"=>		--MOV IH
								reg_sel<=X"C";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"0C"=>		--MOV IL
								reg_sel<=X"D";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"0D"=>		--MOV M
								out_blk_en<='0';
								sync<='1';
								step<="000";
							when X"10"=>		--LDAX
								reg_sel<=X"1";
								reg_write_data<=temp1;
								reg_write<='1';
								step<="001";
							when X"12"=>		--MOVS
								reg_sel<=X"B";
								reg_read<='1';
								step<="001";
							when X"13"=>		--POP
								flag:=temp1;
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								add_over<="00";
								step<="001";
							when X"14"=>		--PUSH
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								add_over<="11";
								step<="000";
							when X"15"=>		--PUSM
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"16"=>		--POPM
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								add_over<="11";
								step<="000";
							when X"22"=>		--XCHP A
								reg_sel<=X"2";
								reg_read<='1';
								step<="001";
							when X"23"=>		--XCHP C
								reg_sel<=X"4";
								reg_read<='1';
								step<="001";
							when X"24"=>		--XCHP E
								reg_sel<=X"6";
								reg_read<='1';
								step<="001";
							when X"25"=>		--XCHP G
								reg_sel<=X"9";
								reg_read<='1';
								step<="001";
							when X"26"=>		--XCHP H
								reg_sel<=X"B";
								reg_read<='1';
								step<="001";
							when X"28"=>		--STA
								out_blk_en<='0';
								sync<='1';
								phold<='0';
								data_opc<='0';
								step_count<="000";
								step<="000";
							when X"29"=>		--STAX
								out_blk_en<='0';
								sync<='1';
								step<="000";
							when X"2A"=>		--POPD
								reg_sel<=opc(3 downto 0);
								reg_write_data<=temp2;
								reg_write<='1';
								add_over<="00";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"2B"=>		--PUSHD
								out_blk_en<='0';
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"2C"=>		--PUSHFL
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								add_over<="11";
								step<="000";
							when X"2E"=>		--OUT
								out_blk_en<='0';
								io_m_in<='0';
								sync<='1';
								phold<='0';
								data_opc<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"01"=>		--ADC
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"06"=>		--SUB
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"07"=>		--SBB
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"0C"=>		--SUBA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"0D"=>		--SBBA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									reg_sel<=X"1";
									reg_read<='1';
									add_over<="00";
								else
									if(temp1(2)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(17 downto 2);
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								end if;
								step<="001";
							when X"13"=>		--MUI
								if(temp1(3)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(18 downto 3);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"14"=>		--MUM
								if(temp1(3)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(18 downto 3);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							


							when X"1B"=>		--INR
								data_a<=temp1;
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								add_over<="00";
								step<="001";
							when X"1D"=>		--DCR
								data_a<=temp1;
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								add_over<="00";
								step<="001";
							when X"1F"=>		--ANA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"20"=>		--ANR B
								reg_sel<=X"2";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"21"=>		--ANR C
								reg_sel<=X"3";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"22"=>		--ANR D
								reg_sel<=X"4";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"23"=>		--ANR E
								reg_sel<=X"5";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"24"=>		--ANR F
								reg_sel<=X"6";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"25"=>		--ANR GH
								reg_sel<=X"8";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"26"=>		--ANR GL
								reg_sel<=X"9";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"27"=>		--ANR HH
								reg_sel<=X"A";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"28"=>		--ANR HL
								reg_sel<=X"B";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"29"=>		--ANR IH
								reg_sel<=X"C";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"2A"=>		--ANR IL
								reg_sel<=X"D";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"2D"=>		--ORA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"2E"=>		--ORR B
								reg_sel<=X"2";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"2F"=>		--ORR C
								reg_sel<=X"3";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"30"=>		--ORR D
								reg_sel<=X"4";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"31"=>		--ORR E
								reg_sel<=X"5";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"32"=>		--ORR F
								reg_sel<=X"6";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"33"=>		--ORR GH
								reg_sel<=X"8";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"34"=>		--ORR GL
								reg_sel<=X"9";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"35"=>		--ORR HH
								reg_sel<=X"A";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"36"=>		--ORR HL
								reg_sel<=X"B";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"37"=>		--ORR IH
								reg_sel<=X"C";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"38"=>		--ORR IL
								reg_sel<=X"D";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3B"=>		--XORA
								reg_sel<=X"1";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3C"=>		--XORR B
								reg_sel<=X"2";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3D"=>		--XORR C
								reg_sel<=X"3";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3E"=>		--XORR D
								reg_sel<=X"4";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"3F"=>		--XORR E
								reg_sel<=X"5";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"40"=>		--XORR F
								reg_sel<=X"6";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"41"=>		--XORR GH
								reg_sel<=X"8";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"42"=>		--XORR GL
								reg_sel<=X"9";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"43"=>		--XORR HH
								reg_sel<=X"A";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"44"=>		--XORR HL
								reg_sel<=X"B";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"45"=>		--XORR IH
								reg_sel<=X"C";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"46"=>		--XORR IL
								reg_sel<=X"D";
								reg_read<='1';
								add_over<="00";
								step<="001";
							when X"49"=>		--NOT
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01011";
								alu_en<='1';
								pcup<='0';
								add_over<="00";
								step<="001";
							when X"4A"=>		--NOA
								data_a<=temp1;
								data_b<=X"0000";
								carry_out<='0';
								alu_instr_sel<="01011";
								alu_en<='1';
								pcup<='0';
								add_over<="00";
								step<="001";
							when X"58"=>		--CPA
								reg_sel<=X"1";
								reg_read<='1';
								step<="001";
							when X"59"=>		--CMP B
								reg_sel<=X"2";
								reg_read<='1';
								step<="001";
							when X"5A"=>		--CMP C
								reg_sel<=X"3";
								reg_read<='1';
								step<="001";
							when X"5B"=>		--CMP D
								reg_sel<=X"4";
								reg_read<='1';
								step<="001";
							when X"5C"=>		--CMP E
								reg_sel<=X"5";
								reg_read<='1';
								step<="001";
							when X"5D"=>		--CMP F
								reg_sel<=X"6";
								reg_read<='1';
								step<="001";
							when X"5E"=>		--CMP GH
								reg_sel<=X"8";
								reg_read<='1';
								step<="001";
							when X"5F"=>		--CMP GL
								reg_sel<=X"9";
								reg_read<='1';
								step<="001";
							when X"60"=>		--CMP HH
								reg_sel<=X"A";
								reg_read<='1';
								step<="001";
							when X"61"=>		--CMP HL
								reg_sel<=X"B";
								reg_read<='1';
								step<="001";
							when X"62"=>		--CMP IH
								reg_sel<=X"C";
								reg_read<='1';
								step<="001";
							when X"63"=>		--CMP IL
								reg_sel<=X"D";
								reg_read<='1';
								step<="001";
							when X"65"=>		--CPP A
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"66"=>		--CPP C
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"67"=>		--CPP E
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"68"=>		--CPP G
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"69"=>		--CPP H
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"6B"=>		--DAD
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"6C"=>		--SBD
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							when X"6D"=>		--SBDI
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="001";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"01"=>	--CC
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"02"=>	--CNC
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"03"=>	--CZ
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"04"=>	--CNZ
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"05"=>	--CEP
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"06"=>	--COP
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"07"=>	--CP
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"08"=>	--CN
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"09"=>	--CE
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step_count<="000";
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"0A"=>	--CNE
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step_count<="000";
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"0B"=>	--CG
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step_count<="000";
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"0C"=>	--CL
								se:='0';
								if(sf='1' or sp=X"00000001") then
									sync<='1';
									phold<='0';
									data_opc<='0';
									step_count<="000";
									step<="000";
								else
									data_a<=sp(15 downto 0);
									data_b<=X"0001";
									carry_out<='0';
									alu_instr_sel<="10000";
									alu_en<='1';
									step<="001";
								end if;
							when X"16"=>	--RE
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"17"=>	--RNE
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"18"=>	--RG
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"19"=>	--RL
								out_add<=ltemp;
								add_over<="01";
								data_a<=sp(15 downto 0);
								data_b<=X"0002";
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				end if;
			
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"01"=>		--MOV A
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"02"=>		--MOV B
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"03"=>		--MOV C
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"04"=>		--MOV D
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"05"=>		--MOV E
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"06"=>		--MOV F
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"07"=>		--MOV GH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"08"=>		--MOV GL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"09"=>		--MOV HH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"0A"=>		--MOV HL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"0B"=>		--MOV IH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"0C"=>		--MOV IL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"10"=>		--LDAX
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"12"=>		--MOVS
								ltemp(15 downto 0):=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"13"=>		--POP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step_count<="000";
								step<="010";
							when X"22"=>		--XCHP A
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"3"=>	--C
										opc(3 downto 0):=X"4";
									when X"5"=>	--E
										opc(3 downto 0):=X"6";
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"23"=>		--XCHP C
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"5"=>	--E
										opc(3 downto 0):=X"6";
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"24"=>		--XCHP E
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"8"=>	--GH
										opc(3 downto 0):=X"9";
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"25"=>		--XCHP G
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"A"=>	--HH
										opc(3 downto 0):=X"B";
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"26"=>		--XCHP H
								temp1:=reg_read_data;
								reg_read<='0';
								case opc(3 downto 0) is
									when X"C"=>	--IH
										opc(3 downto 0):=X"D";
									when others=>
										NULL;
								end case;
								step<="010";
							when X"2A"=>		--POPD
								reg_write<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"2B"=>		--PUSHD
								temp2:=reg_read_data;
								reg_read<='0';
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"01"=>		--ADC
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"06"=>		--SUB
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"07"=>		--SBB
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0C"=>		--SUBA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"0D"=>		--SBBA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									temp2:=reg_read_data;
									reg_read<='0';
								else
									ltemp(18 downto 2):=alu_result(16 downto 0);
									flag(0):='0';
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								end if;
								step<="010";
							when X"13"=>		--MUI
								ltemp(19 downto 3):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"14"=>		--MUM
								ltemp(19 downto 3):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							


							when X"1B"=>		--INR
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="010";
							when X"1D"=>		--DCR
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="010";
							when X"1F"=>		--ANA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"20"=>		--ANR B
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"21"=>		--ANR C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"22"=>		--ANR D
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"23"=>		--ANR E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"24"=>		--ANR F
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"25"=>		--ANR GH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"26"=>		--ANR GL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"27"=>		--ANR HH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"28"=>		--ANR HL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"29"=>		--ANR IH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2A"=>		--ANR IL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2D"=>		--ORA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2E"=>		--ORR B
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"2F"=>		--ORR C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"30"=>		--ORR D
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"31"=>		--ORR E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"32"=>		--ORR F
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"33"=>		--ORR GH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"34"=>		--ORR GL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"35"=>		--ORR HH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"36"=>		--ORR HL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"37"=>		--ORR IH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"38"=>		--ORR IL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3B"=>		--XORA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3C"=>		--XORR B
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3D"=>		--XORR C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3E"=>		--XORR D
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"3F"=>		--XORR E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"40"=>		--XORR F
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"41"=>		--XORR GH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"42"=>		--XORR GL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"43"=>		--XORR HH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"44"=>		--XORR HL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"45"=>		--XORR IH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"46"=>		--XORR IL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"49"=>		--NOT
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"4A"=>		--NOA
								temp1:=alu_result(15 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"58"=>		--CPA
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"59"=>		--CMP B
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5A"=>		--CMP C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5B"=>		--CMP D
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5C"=>		--CMP E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5D"=>		--CMP F
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5E"=>		--CMP GH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"5F"=>		--CMP GL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"60"=>		--CMP HH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"61"=>		--CMP HL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"62"=>		--CMP IH
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"63"=>		--CMP IL
								temp2:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"65"=>		--CPP A
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"66"=>		--CPP C
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"67"=>		--CPP E
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"68"=>		--CPP G
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"69"=>		--CPP H
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"6B"=>		--DAD
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"6C"=>		--SBD
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							when X"6D"=>		--SBDI
								temp1:=reg_read_data;
								reg_read<='0';
								step<="010";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"01"=>	--CC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"02"=>	--CNC
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"03"=>	--CZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"04"=>	--CNZ
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"05"=>	--CEP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"06"=>	--COP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"07"=>	--CP
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"08"=>	--CN
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"09"=>	--CE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0A"=>	--CNE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0B"=>	--CG
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0C"=>	--CL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"16"=>	--RE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"17"=>	--RNE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"18"=>	--RG
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"19"=>	--RL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								reg_sel<=X"A";
								reg_read<='1';
								data_a<=ltemp(15 downto 0);
								data_b<=temp1;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"22"=>		--XCHP A
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"23"=>		--XCHP C
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"24"=>		--XCHP E
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"25"=>		--XCHP G
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"26"=>		--XCHP H
								reg_sel<=opc(3 downto 0);
								reg_read<='1';
								step<="011";
							when X"2A"=>		--POPD
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"2B"=>		--PUSHD
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"01"=>		--ADC
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"06"=>		--SUB
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"07"=>		--SBB
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0C"=>		--SUBA
								data_b<=temp1;
								data_a<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0D"=>		--SBBA
								data_b<=temp1;
								data_a<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(0)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=X"0000";
									ltemp:=X"00000000";
								else
									if(temp1(3)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(18 downto 3);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"13"=>		--MUI
								if(temp1(4)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(19 downto 4);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"14"=>		--MUM
								if(temp1(4)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(19 downto 4);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							


							when X"1B"=>		--INR
								out_blk_data<=temp1;
								out_add<=ltemp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"1D"=>		--DCR
								out_blk_data<=temp1;
								out_add<=ltemp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"1F"=>		--ANA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"20"=>		--ANR B
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"21"=>		--ANR C
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"22"=>		--ANR D
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"23"=>		--ANR E
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"24"=>		--ANR F
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"25"=>		--ANR GH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"26"=>		--ANR GL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"27"=>		--ANR HH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"28"=>		--ANR HL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"29"=>		--ANR IH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"2A"=>		--ANR IL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01100";
								alu_en<='1';
								step<="011";
							when X"2D"=>		--ORA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"2E"=>		--ORR B
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"2F"=>		--ORR C
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"30"=>		--ORR D
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"31"=>		--ORR E
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"32"=>		--ORR F
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"33"=>		--ORR GH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"34"=>		--ORR GL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"35"=>		--ORR HH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"36"=>		--ORR HL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"37"=>		--ORR IH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"38"=>		--ORR IL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01101";
								alu_en<='1';
								step<="011";
							when X"3B"=>		--XORA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"3C"=>		--XORR B
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"3D"=>		--XORR C
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"3E"=>		--XORR D
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"3F"=>		--XORR E
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"40"=>		--XORR F
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"41"=>		--XORR GH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"42"=>		--XORR GL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"43"=>		--XORR HH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"44"=>		--XORR HL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"45"=>		--XORR IH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"46"=>		--XORR IL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="01110";
								alu_en<='1';
								step<="011";
							when X"49"=>		--NOT
								out_blk_data<=temp1;
								out_add<=ltemp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"4A"=>		--NOA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="011";
							when X"58"=>		--CPA
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"59"=>		--CMP B
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5A"=>		--CMP C
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5B"=>		--CMP D
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5C"=>		--CMP E
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5D"=>		--CMP F
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5E"=>		--CMP GH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"5F"=>		--CMP GL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"60"=>		--CMP HH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"61"=>		--CMP HL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"62"=>		--CMP IH
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"63"=>		--CMP IL
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"65"=>		--CPP A
								reg_sel<=X"1";
								reg_read<='1';
								step<="011";
							when X"66"=>		--CPP C
								reg_sel<=X"3";
								reg_read<='1';
								step<="011";
							when X"67"=>		--CPP E
								reg_sel<=X"5";
								reg_read<='1';
								step<="011";
							when X"68"=>		--CPP G
								reg_sel<=X"8";
								reg_read<='1';
								step<="011";
							when X"69"=>		--CPP H
								reg_sel<=X"A";
								reg_read<='1';
								step<="011";
							when X"6B"=>		--DAD
								reg_sel<=X"C";
								reg_read<='1';
								step<="011";
							when X"6C"=>		--SBD
								reg_sel<=X"C";
								reg_read<='1';
								step<="011";
							when X"6D"=>		--SBDI
								reg_sel<=X"C";
								reg_read<='1';
								step<="011";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"01"=>	--CC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"02"=>	--CNC
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"03"=>	--CZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"04"=>	--CNZ
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"05"=>	--CEP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"06"=>	--COP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"07"=>	--CP
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"08"=>	--CN
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"09"=>	--CE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0A"=>	--CNE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0B"=>	--CG
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0C"=>	--CL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"16"=>	--RE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"17"=>	--RNE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"18"=>	--RG
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"19"=>	--RL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								ltemp(31 downto 16):=reg_read_data;
								reg_read<='0';
								ltemp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"22"=>		--XCHP A
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"23"=>		--XCHP C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"24"=>		--XCHP E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"25"=>		--XCHP G
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"26"=>		--XCHP H
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"2A"=>		--POPD
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"2B"=>		--PUSHD
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"01"=>		--ADC
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"06"=>		--SUB
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"07"=>		--SBB
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0C"=>		--SUBA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"0D"=>		--SBBA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(16 downto 0):=alu_result(16 downto 0);
									
								else
									ltemp(19 downto 3):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"13"=>		--MUI
								ltemp(20 downto 4):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"14"=>		--MUM
								ltemp(20 downto 4):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							


							when X"1F"=>		--ANA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"20"=>		--ANR B
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"21"=>		--ANR C
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"22"=>		--ANR D
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"23"=>		--ANR E
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"24"=>		--ANR F
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"25"=>		--ANR GH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"26"=>		--ANR GL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"27"=>		--ANR HH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"28"=>		--ANR HL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"29"=>		--ANR IH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"2A"=>		--ANR IL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"2D"=>		--ORA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"2E"=>		--ORR B
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"2F"=>		--ORR C
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"30"=>		--ORR D
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"31"=>		--ORR E
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"32"=>		--ORR F
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"33"=>		--ORR GH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"34"=>		--ORR GL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"35"=>		--ORR HH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"36"=>		--ORR HL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"37"=>		--ORR IH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"38"=>		--ORR IL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"3B"=>		--XORA
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"3C"=>		--XORR B
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"3D"=>		--XORR C
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"3E"=>		--XORR D
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"3F"=>		--XORR E
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"40"=>		--XORR F
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"41"=>		--XORR GH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"42"=>		--XORR GL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"43"=>		--XORR HH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"44"=>		--XORR HL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"45"=>		--XORR IH
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"46"=>		--XORR IL
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								step<="100";
							when X"4A"=>		--NOA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"58"=>		--CPA
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"59"=>		--CMP B
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5A"=>		--CMP C
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5B"=>		--CMP D
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5C"=>		--CMP E
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5D"=>		--CMP F
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5E"=>		--CMP GH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"5F"=>		--CMP GL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"60"=>		--CMP HH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"61"=>		--CMP HL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"62"=>		--CMP IH
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"63"=>		--CMP IL
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):=alu_result(17);
								alu_en<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"65"=>		--CPP A
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"66"=>		--CPP C
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"67"=>		--CPP E
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"68"=>		--CPP G
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"69"=>		--CPP H
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6B"=>		--DAD
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6C"=>		--SBD
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							when X"6D"=>		--SBDI
								temp2:=reg_read_data;
								reg_read<='0';
								step<="100";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"01"=>	--CC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"02"=>	--CNC
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"03"=>	--CZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"04"=>	--CNZ
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"05"=>	--CEP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"06"=>	--COP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"07"=>	--CP
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"08"=>	--CN
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"09"=>	--CE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0A"=>	--CNE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0B"=>	--CG
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0C"=>	--CL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"16"=>	--RE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"17"=>	--RNE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"18"=>	--RG
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"19"=>	--RL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								data_a<=ltemp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"22"=>		--XCHP A
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"23"=>		--XCHP C
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"24"=>		--XCHP E
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"25"=>		--XCHP G
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"26"=>		--XCHP H
								reg_write_data<=temp1;
								reg_sel<=opc(3 downto 0);
								reg_write<='1';
								step<="101";
							when X"2A"=>		--POPD
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="010";
								step<="000";
							when X"2B"=>		--PUSHD
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"01"=>		--ADC
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"06"=>		--SUB
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"07"=>		--SBB
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0C"=>		--SUBA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"0D"=>		--SBBA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(1)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(16 downto 1);
								else
									if(temp1(4)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(19 downto 4);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"13"=>		--MUI
								if(temp1(5)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(20 downto 5);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"14"=>		--MUM
								if(temp1(5)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(20 downto 5);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							


							when X"1F"=>		--ANA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"20"=>		--ANR B
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"21"=>		--ANR C
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"22"=>		--ANR D
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"23"=>		--ANR E
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"24"=>		--ANR F
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"25"=>		--ANR GH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"26"=>		--ANR GL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"27"=>		--ANR HH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"28"=>		--ANR HL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"29"=>		--ANR IH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2A"=>		--ANR IL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2D"=>		--ORA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2E"=>		--ORR B
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"2F"=>		--ORR C
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"30"=>		--ORR D
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"31"=>		--ORR E
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"32"=>		--ORR F
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"33"=>		--ORR GH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"34"=>		--ORR GL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"35"=>		--ORR HH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"36"=>		--ORR HL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"37"=>		--ORR IH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"38"=>		--ORR IL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3B"=>		--XORA
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3C"=>		--XORR B
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3D"=>		--XORR C
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3E"=>		--XORR D
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"3F"=>		--XORR E
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"40"=>		--XORR F
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"41"=>		--XORR GH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"42"=>		--XORR GL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"43"=>		--XORR HH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"44"=>		--XORR HL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"45"=>		--XORR IH
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"46"=>		--XORR IL
								reg_write_data<=temp1;
								reg_sel<=X"1";
								reg_write<='1';
								step<="101";
							when X"65"=>		--CPP A
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"66"=>		--CPP C
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"67"=>		--CPP E
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"68"=>		--CPP G
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"69"=>		--CPP H
								data_a<=temp1;
								data_b<=temp2;
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"6B"=>		--DAD
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"6C"=>		--SBD
								data_b<=temp1;
								data_a<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							when X"6D"=>		--SBDI
								data_a<=temp1;
								data_b<=temp2;
								carry_out<=flag(0);
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="101";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								out_blk_data<=temp1;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"01"=>	--CC
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"02"=>	--CNC
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"03"=>	--CZ
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"04"=>	--CNZ
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"05"=>	--CEP
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"06"=>	--COP
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"07"=>	--CP
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"08"=>	--CN
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"09"=>	--CE
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"0A"=>	--CNE
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"0B"=>	--CG
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"0C"=>	--CL
								out_add<=sp;
								out_blk_data<=temp1;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"16"=>	--RE
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="010";
								step<="000";
							when X"17"=>	--RNE
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="010";
								step<="000";
							when X"18"=>	--RG
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="010";
								step<="000";
							when X"19"=>	--RL
								if(sp=X"00000000") then
									se:='1';
								else
									se:='0';
								end if;
								sync<='1';
								step_count<="010";
								step<="000";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								ltemp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="110";
							when X"22"=>		--XCHP A
								reg_write<='0';
								step<="110";
							when X"23"=>		--XCHP C
								reg_write<='0';
								step<="110";
							when X"24"=>		--XCHP E
								reg_write<='0';
								step<="110";
							when X"25"=>		--XCHP G
								reg_write<='0';
								step<="110";
							when X"26"=>		--XCHP H
								reg_write<='0';
								step<="110";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"00"=>		--ADD
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"01"=>		--ADC
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"06"=>		--SUB
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"07"=>		--SBB
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"0C"=>		--SUBA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"0D"=>		--SBBA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(17 downto 1):=alu_result(16 downto 0);
								else
									ltemp(20 downto 4):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"13"=>		--MUI
								ltemp(21 downto 5):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"14"=>		--MUM
								ltemp(21 downto 5):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							


							when X"1F"=>		--ANA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"20"=>		--ANR B
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"21"=>		--ANR C
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"22"=>		--ANR D
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"23"=>		--ANR E
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"24"=>		--ANR F
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"25"=>		--ANR GH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"26"=>		--ANR GL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"27"=>		--ANR HH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"28"=>		--ANR HL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"29"=>		--ANR IH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"2A"=>		--ANR IL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"2D"=>		--ORA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"2E"=>		--ORR B
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"2F"=>		--ORR C
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"30"=>		--ORR D
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"31"=>		--ORR E
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"32"=>		--ORR F
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"33"=>		--ORR GH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"34"=>		--ORR GL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"35"=>		--ORR HH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"36"=>		--ORR HL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"37"=>		--ORR IH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"38"=>		--ORR IL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"3B"=>		--XORA
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"3C"=>		--XORR B
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"3D"=>		--XORR C
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"3E"=>		--XORR D
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"3F"=>		--XORR E
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"40"=>		--XORR F
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"41"=>		--XORR GH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"42"=>		--XORR GL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"43"=>		--XORR HH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"44"=>		--XORR HL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"45"=>		--XORR IH
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"46"=>		--XORR IL
								reg_write<='0';
								sync<='1';
								step_count<="010";
								step<="000";
							when X"65"=>		--CPP A
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"66"=>		--CPP C
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"67"=>		--CPP E
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"68"=>		--CPP G
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"69"=>		--CPP H
								if(alu_result(20)='1') then
									NULL;
								else
									flag(0):=alu_result(16);
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
								end if;
								alu_en<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"6B"=>		--DAD
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"6C"=>		--SBD
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"6D"=>		--SBDI
								temp1:=alu_result(15 downto 0);
								flag(0):=alu_result(16);
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "110"=>--step 6
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								out_add<=ltemp;
								out_blk_data<=temp2;
								out_blk_en<='1';
								step_count<="010";
								step<="000";
							when X"22"=>		--XCHP A
								reg_write_data<=temp2;
								reg_sel<=X"2";
								reg_write<='1';
								step<="111";
							when X"23"=>		--XCHP C
								reg_write_data<=temp2;
								reg_sel<=X"4";
								reg_write<='1';
								step<="111";
							when X"24"=>		--XCHP E
								reg_write_data<=temp2;
								reg_sel<=X"6";
								reg_write<='1';
								step<="111";
							when X"25"=>		--XCHP G
								reg_write_data<=temp2;
								reg_sel<=X"9";
								reg_write<='1';
								step<="111";
							when X"26"=>		--XCHP H
								reg_write_data<=temp2;
								reg_sel<=X"B";
								reg_write<='1';
								step<="111";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(2)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(17 downto 2);
								else
									if(temp1(5)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(20 downto 5);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"13"=>		--MUI
								if(temp1(6)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(21 downto 6);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"14"=>		--MUM
								if(temp1(6)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(21 downto 6);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							

							when X"6B"=>		--DAD
								reg_write_data<=temp1;
								reg_sel<=X"C";
								reg_write<='1';
								step<="111";
							when X"6C"=>		--SBD
								reg_write_data<=temp1;
								reg_sel<=X"C";
								reg_write<='1';
								step<="111";
							when X"6D"=>		--SBDI
								reg_write_data<=temp1;
								reg_sel<=X"C";
								reg_write<='1';
								step<="111";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "111"=>--step 7
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"22"=>		--XCHP A
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"23"=>		--XCHP C
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"24"=>		--XCHP E
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"25"=>		--XCHP G
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when X"26"=>		--XCHP H
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(18 downto 2):=alu_result(16 downto 0);
								else
									ltemp(21 downto 5):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="010";
								step<="000";
							when X"13"=>		--MUI
								ltemp(22 downto 6):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="010";
								step<="000";
							when X"14"=>		--MUM
								ltemp(22 downto 6):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="010";
								step<="000";
							

							when X"6B"=>		--DAD
								reg_write<='0';
								sync<='1';
								step_count<="000";
								step<="000";
							when X"6C"=>		--SBD
								reg_write<='0';
								sync<='1';
								step_count<="000";
								step<="000";
							when X"6D"=>		--SBDI
								reg_write<='0';
								sync<='1';
								step_count<="000";
								step<="000";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
			
			when others=>
				NULL;
		end case;

	when "010"=>--step count is 2
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								out_blk_en<='0';
								data_a<=temp1;
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"15"=>		--PUSM
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								add_over<="11";
								step<="000";
							when X"2B"=>		--PUSHD
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								add_over<="11";
								step_count<="001";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(3)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(18 downto 3);
								else
									if(temp1(6)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(21 downto 6);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"13"=>		--MUI
								if(temp1(7)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(22 downto 7);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"14"=>		--MUM
								if(temp1(7)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(22 downto 7);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"00"=>	--CALL
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"01"=>	--CC
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"02"=>	--CNC
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"03"=>	--CZ
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"04"=>	--CNZ
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"05"=>	--CEP
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"06"=>	--COP
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"07"=>	--CP
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"08"=>	--CN
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="001";
								step<="000";
							when X"09"=>	--CE
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"0A"=>	--CNE
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"0B"=>	--CG
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							when X"0C"=>	--CL
								out_blk_en<='0';
								data_a<=sp(15 downto 0);
								data_b<=X"0001";
								carry_out<='0';
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="001";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				end if;
			
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "00"=>--Master 0
						case opc(11 downto 4) is
							when X"12"=>		--MOVS
								temp1:=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
						

					

					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(19 downto 3):=alu_result(16 downto 0);
								else
									ltemp(22 downto 6):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"13"=>		--MUI
								ltemp(23 downto 7):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"14"=>		--MUM
								ltemp(23 downto 7):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0A"=>	--CNE
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0B"=>	--CG
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							when X"0C"=>	--CL
								sp(15 downto 0):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(4)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(19 downto 4);
								else
									if(temp1(7)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(22 downto 7);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"13"=>		--MUI
								if(temp1(8)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(23 downto 8);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"14"=>		--MUM
								if(temp1(8)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(23 downto 8);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0A"=>	--CNE
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0B"=>	--CG
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							when X"0C"=>	--CL
								data_a<=sp(31 downto 16);
								data_b<=X"0000";
								carry_out<=tc;
								alu_instr_sel<="10000";
								alu_en<='1';
								step<="011";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(20 downto 4):=alu_result(16 downto 0);
								else
									ltemp(23 downto 7):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"13"=>		--MUI
								ltemp(24 downto 8):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"14"=>		--MUM
								ltemp(24 downto 8):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0A"=>	--CNE
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0B"=>	--CG
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							when X"0C"=>	--CL
								sp(31 downto 16):=alu_result(15 downto 0);
								tc:=alu_result(16);
								alu_en<='0';
								step<="100";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(5)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(20 downto 5);
								else
									if(temp1(8)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(23 downto 8);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"13"=>		--MUI
								if(temp1(9)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(24 downto 9);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"14"=>		--MUM
								if(temp1(9)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(24 downto 9);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="011";
								step<="000";
							when X"0A"=>	--CNE
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="011";
								step<="000";
							when X"0B"=>	--CG
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="011";
								step<="000";
							when X"0C"=>	--CL
								out_blk_data<=temp2;
								out_add<=sp;
								out_blk_en<='1';
								step_count<="011";
								step<="000";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(21 downto 5):=alu_result(16 downto 0);
								else
									ltemp(24 downto 8):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"13"=>		--MUI
								ltemp(25 downto 9):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"14"=>		--MUM
								ltemp(25 downto 9):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";

							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
			
			when "110"=>--step 6
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(6)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(21 downto 6);
								else
									if(temp1(9)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(24 downto 9);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"13"=>		--MUI
								if(temp1(10)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(25 downto 10);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"14"=>		--MUM
								if(temp1(10)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(25 downto 10);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";

							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "111"=>--step 7
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(22 downto 6):=alu_result(16 downto 0);
								else
									ltemp(25 downto 9):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="011";
								step<="000";
							when X"13"=>		--MUI
								ltemp(26 downto 10):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="011";
								step<="000";
							when X"14"=>		--MUM
								ltemp(26 downto 10):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="011";
								step<="000";

							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
			
			when others=>
				NULL;
		end case;
	
	when "011"=>--step count is 3
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(7)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(22 downto 7);
								else
									if(temp1(10)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(25 downto 10);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"13"=>		--MUI
								if(temp1(11)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(26 downto 11);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"14"=>		--MUM
								if(temp1(11)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(26 downto 11);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							


							when others=>
								NULL;
						end case;


					when "11"=>	--Master 3
						case opc(11 downto 4) is
							when X"09"=>	--CE
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="010";
								step<="000";
							when X"0A"=>	--CNE
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="010";
								step<="000";
							when X"0B"=>	--CG
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="010";
								step<="000";
							when X"0C"=>	--CL
								out_blk_en<='0';
								sync<='1';
								if(sp=X"00000000") then
									sf:='1';
								else
									sf:='0';
								end if;
								out_add<=ltemp;
								add_over<="01";
								step_count<="010";
								step<="000";

							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				end if;
			
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(23 downto 7):=alu_result(16 downto 0);
								else
									ltemp(26 downto 10):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"13"=>		--MUI
								ltemp(27 downto 11):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"14"=>		--MUM
								ltemp(27 downto 11):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(8)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(23 downto 8);
								else
									if(temp1(11)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(26 downto 11);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"13"=>		--MUI
								if(temp1(12)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(27 downto 12);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"14"=>		--MUM
								if(temp1(12)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(27 downto 12);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(24 downto 8):=alu_result(16 downto 0);
								else
									ltemp(27 downto 11):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"13"=>		--MUI
								ltemp(28 downto 12):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"14"=>		--MUM
								ltemp(28 downto 12):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(9)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(24 downto 9);
								else
									if(temp1(12)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(27 downto 12);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"13"=>		--MUI
								if(temp1(13)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(28 downto 13);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							when X"14"=>		--MUM
								if(temp1(13)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(28 downto 13);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="101";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(25 downto 9):=alu_result(16 downto 0);
								else
									ltemp(28 downto 12):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"13"=>		--MUI
								ltemp(29 downto 13):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							when X"14"=>		--MUM
								ltemp(29 downto 13):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="110";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "110"=>--step 6
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(10)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(25 downto 10);
								else
									if(temp1(13)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(28 downto 13);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"13"=>		--MUI
								if(temp1(14)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(29 downto 14);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							when X"14"=>		--MUM
								if(temp1(14)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(29 downto 14);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="111";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "111"=>--step 7
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(26 downto 10):=alu_result(16 downto 0);
								else
									ltemp(29 downto 13):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="100";
								step<="000";
							when X"13"=>		--MUI
								ltemp(30 downto 14):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="100";
								step<="000";
							when X"14"=>		--MUM
								ltemp(30 downto 14):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step_count<="100";
								step<="000";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when others=>
				NULL;
		end case;
	
	when "100"=>--step count is 4
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(11)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(26 downto 11);
								else
									if(temp1(14)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(29 downto 14);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"13"=>		--MUI
								if(temp1(15)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(30 downto 15);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when X"14"=>		--MUM
								if(temp1(15)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(30 downto 15);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				end if;
			
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(27 downto 11):=alu_result(16 downto 0);
								else
									ltemp(30 downto 14):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"13"=>		--MUI
								ltemp(31 downto 15):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							when X"14"=>		--MUM
								ltemp(31 downto 15):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="010";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(12)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(27 downto 12);
								else
									if(temp1(15)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(30 downto 15);
								end if;
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="011";
							when X"13"=>		--MUI
								reg_sel<=X"2";
								reg_write_data<=ltemp(15 downto 0);
								reg_write<='1';
								step<="011";
							when X"14"=>		--MUM
								reg_sel<=X"2";
								reg_write_data<=ltemp(15 downto 0);
								reg_write<='1';
								step<="011";
							
							when others=>
								NULL;
						end case;
							when others=>
						NULL;
				end case;
				
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(28 downto 12):=alu_result(16 downto 0);
								else
									ltemp(31 downto 15):=alu_result(16 downto 0);
								end if;
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="100";
							when X"13"=>		--MUI
								reg_write<='0';
								step<="100";
							when X"14"=>		--MUM
								reg_write<='0';
								step<="100";
							
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(13)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(28 downto 13);
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								else
									reg_sel<=X"2";
									reg_write_data<=ltemp(15 downto 0);
									reg_write<='1';
								end if;
								step<="101";
							when X"13"=>		--MUI
								reg_sel<=X"1";
								reg_write_data<=ltemp(31 downto 16);
								reg_write<='1';
								step<="101";
							when X"14"=>		--MUM
								reg_sel<=X"1";
								reg_write_data<=ltemp(31 downto 16);
								reg_write<='1';
								step<="101";
							when others=>
								NULL;
						end case;
							
					when others=>
						NULL;
				end case;
				
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(29 downto 13):=alu_result(16 downto 0);
									flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
								else
									reg_write<='0';
								end if;
								step<="110";
							when X"13"=>		--MUI
								reg_write<='0';
								sync<='1';
								phold<='0';
								data_opc<='0';
								step_count<="000";
								step<="000";
							when X"14"=>		--MUM
								reg_write<='0';
								sync<='1';
								phold<='0';
								step_count<="000";
								step<="000";
								when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			when "110"=>--step 6
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									if(temp1(14)='1') then
										data_a<=temp2;
									else
										data_a<=X"0000";
									end if;
									data_b<=ltemp(29 downto 14);
									carry_out<='0';
									alu_instr_sel<="01111";
									alu_en<='1';
								else
									reg_sel<=X"1";	reg_write_data<=ltemp(31 downto 16);
									reg_write<='1';
								end if;
								step<="111";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
	when "111"=>--step 7
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(opc(3 downto 0)=X"7") then
									ltemp(30 downto 14):=alu_result(16 downto 0);
									flag(0):='0';
									flag(2):=alu_result(18);
									flag(4):=alu_result(19);
									flag(6):=alu_result(20);
									flag(7):=alu_result(21);
									flag(11):='0';
									alu_en<='0';
									step_count<="101";
								else
									reg_write<='0';
									sync<='1';
									phold<='0';
									data_opc<='0';
									step_count<="000";
								end if;
								step<="000";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			when others=>
				NULL;
		end case;
	when "101"=>--step count is 5
		case step is
			when "000"=>--step 0
				if(clock='0' and clock'event) then
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								if(temp1(15)='1') then
									data_a<=temp2;
								else
									data_a<=X"0000";
								end if;
								data_b<=ltemp(30 downto 15);
								carry_out<='0';
								alu_instr_sel<="01111";
								alu_en<='1';
								step<="001";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
				end if;
			when "001"=>--step 1
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								ltemp(31 downto 15):=alu_result(16 downto 0);
								flag(0):='0';
								flag(2):=alu_result(18);
								flag(4):=alu_result(19);
								flag(6):=alu_result(20);
								flag(7):=alu_result(21);
								flag(11):='0';
								alu_en<='0';
								step<="001";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			when "010"=>--step 2
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								reg_sel<=X"2";
								reg_write_data<=ltemp(15 downto 0);
								reg_write<='1';
								step<="011";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			when "011"=>--step 3
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								reg_write<='0';
								step<="100";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			
			when "100"=>--step 4
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								reg_sel<=X"1";
								reg_write_data<=ltemp(31 downto 16);
								reg_write<='1';
								step<="101";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
			when "101"=>--step 5
				case opc(13 downto 12) is
					when "01"=>--	Master 1
						case opc(11 downto 4) is
							when X"12"=>		--MUL
								reg_write<='0';
								sync<='1';
								phold<='0';
								data_opc<='0';
								step_count<="000";
								step<="000";
							when others=>
								NULL;
						end case;
					when others=>
						NULL;
				end case;
							when others=>
				NULL;
		end case;
		when others=>
		NULL;
end case; 
end if;
end if;
end if;
end process;
end Behavioral;
